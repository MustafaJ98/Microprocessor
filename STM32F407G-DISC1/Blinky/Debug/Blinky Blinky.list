
Blinky Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007238  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080073c0  080073c0  000173c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073dc  080073dc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080073dc  080073dc  000173dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073e4  080073e4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080073ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000090  0800747c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  0800747c  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e668  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f22  00000000  00000000  0003e728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  00042650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  00043ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248fd  00000000  00000000  00045180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c494  00000000  00000000  00069a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d35c9  00000000  00000000  00085f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001594da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060dc  00000000  00000000  00159530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080073a8 	.word	0x080073a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080073a8 	.word	0x080073a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fc80 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f830 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f992 	bl	80007f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f8ae 	bl	8000630 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8da 	bl	800068c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f908 	bl	80006ec <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f006 fbaa 	bl	8006c34 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004e0:	f000 f93a 	bl	8000758 <MX_TIM2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
   // MX_USB_HOST_Process();
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e8:	480f      	ldr	r0, [pc, #60]	; (8000528 <main+0x68>)
 80004ea:	f000 ffca 	bl	8001482 <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 80004ee:	20fa      	movs	r0, #250	; 0xfa
 80004f0:	f000 fcdc 	bl	8000eac <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80004f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f8:	480b      	ldr	r0, [pc, #44]	; (8000528 <main+0x68>)
 80004fa:	f000 ffc2 	bl	8001482 <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 80004fe:	20fa      	movs	r0, #250	; 0xfa
 8000500:	f000 fcd4 	bl	8000eac <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000504:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <main+0x68>)
 800050a:	f000 ffba 	bl	8001482 <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 800050e:	20fa      	movs	r0, #250	; 0xfa
 8000510:	f000 fccc 	bl	8000eac <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <main+0x68>)
 800051a:	f000 ffb2 	bl	8001482 <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 800051e:	20fa      	movs	r0, #250	; 0xfa
 8000520:	f000 fcc4 	bl	8000eac <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000524:	e7de      	b.n	80004e4 <main+0x24>
 8000526:	bf00      	nop
 8000528:	40020c00 	.word	0x40020c00

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b098      	sub	sp, #96	; 0x60
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f006 fe64 	bl	8007208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 031c 	add.w	r3, r7, #28
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <SystemClock_Config+0xfc>)
 8000564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000566:	4a30      	ldr	r2, [pc, #192]	; (8000628 <SystemClock_Config+0xfc>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	6413      	str	r3, [r2, #64]	; 0x40
 800056e:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <SystemClock_Config+0xfc>)
 8000570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b2b      	ldr	r3, [pc, #172]	; (800062c <SystemClock_Config+0x100>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a2a      	ldr	r2, [pc, #168]	; (800062c <SystemClock_Config+0x100>)
 8000584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000588:	6013      	str	r3, [r2, #0]
 800058a:	4b28      	ldr	r3, [pc, #160]	; (800062c <SystemClock_Config+0x100>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000596:	2301      	movs	r3, #1
 8000598:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005aa:	2308      	movs	r3, #8
 80005ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ae:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b8:	2307      	movs	r3, #7
 80005ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 faa5 	bl	8003b10 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005cc:	f000 fa10 	bl	80009f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	2105      	movs	r1, #5
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fd06 	bl	8004000 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005fa:	f000 f9f9 	bl	80009f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005fe:	2301      	movs	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000602:	23c0      	movs	r3, #192	; 0xc0
 8000604:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000606:	2302      	movs	r3, #2
 8000608:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fede 	bl	80043d0 <HAL_RCCEx_PeriphCLKConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800061a:	f000 f9e9 	bl	80009f0 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3760      	adds	r7, #96	; 0x60
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_I2C1_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_I2C1_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_I2C1_Init+0x50>)
 800063c:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_I2C1_Init+0x58>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_I2C1_Init+0x50>)
 800064e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_I2C1_Init+0x50>)
 800066e:	f002 fc6b 	bl	8002f48 <HAL_I2C_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 f9ba 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000bc 	.word	0x200000bc
 8000684:	40005400 	.word	0x40005400
 8000688:	000186a0 	.word	0x000186a0

0800068c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_I2S3_Init+0x54>)
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <MX_I2S3_Init+0x58>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2S3_Init+0x54>)
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006b4:	4a0c      	ldr	r2, [pc, #48]	; (80006e8 <MX_I2S3_Init+0x5c>)
 80006b6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006cc:	f002 fd80 	bl	80031d0 <HAL_I2S_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006d6:	f000 f98b 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200001b0 	.word	0x200001b0
 80006e4:	40003c00 	.word	0x40003c00
 80006e8:	00017700 	.word	0x00017700

080006ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_SPI1_Init+0x64>)
 80006f2:	4a18      	ldr	r2, [pc, #96]	; (8000754 <MX_SPI1_Init+0x68>)
 80006f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_SPI1_Init+0x64>)
 80006f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_SPI1_Init+0x64>)
 8000718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_SPI1_Init+0x64>)
 8000738:	220a      	movs	r2, #10
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_SPI1_Init+0x64>)
 800073e:	f003 ff87 	bl	8004650 <HAL_SPI_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000748:	f000 f952 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000110 	.word	0x20000110
 8000754:	40013000 	.word	0x40013000

08000758 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076c:	463b      	mov	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000774:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MX_TIM2_Init+0x98>)
 8000776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800077a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000;
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_TIM2_Init+0x98>)
 800077e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000782:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_TIM2_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_TIM2_Init+0x98>)
 800078c:	f241 0268 	movw	r2, #4200	; 0x1068
 8000790:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_TIM2_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_TIM2_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800079e:	4814      	ldr	r0, [pc, #80]	; (80007f0 <MX_TIM2_Init+0x98>)
 80007a0:	f003 ffdf 	bl	8004762 <HAL_TIM_Base_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007aa:	f000 f921 	bl	80009f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	4619      	mov	r1, r3
 80007ba:	480d      	ldr	r0, [pc, #52]	; (80007f0 <MX_TIM2_Init+0x98>)
 80007bc:	f004 f820 	bl	8004800 <HAL_TIM_ConfigClockSource>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007c6:	f000 f913 	bl	80009f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	4619      	mov	r1, r3
 80007d6:	4806      	ldr	r0, [pc, #24]	; (80007f0 <MX_TIM2_Init+0x98>)
 80007d8:	f004 fa10 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007e2:	f000 f905 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000168 	.word	0x20000168

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	4b71      	ldr	r3, [pc, #452]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a70      	ldr	r2, [pc, #448]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b6e      	ldr	r3, [pc, #440]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	4b6a      	ldr	r3, [pc, #424]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a69      	ldr	r2, [pc, #420]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b67      	ldr	r3, [pc, #412]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b63      	ldr	r3, [pc, #396]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a62      	ldr	r2, [pc, #392]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b60      	ldr	r3, [pc, #384]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b5c      	ldr	r3, [pc, #368]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a5b      	ldr	r2, [pc, #364]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b59      	ldr	r3, [pc, #356]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b55      	ldr	r3, [pc, #340]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a54      	ldr	r2, [pc, #336]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b52      	ldr	r3, [pc, #328]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b4e      	ldr	r3, [pc, #312]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a4d      	ldr	r2, [pc, #308]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b4b      	ldr	r3, [pc, #300]	; (80009d4 <MX_GPIO_Init+0x1e0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2108      	movs	r1, #8
 80008b6:	4848      	ldr	r0, [pc, #288]	; (80009d8 <MX_GPIO_Init+0x1e4>)
 80008b8:	f000 fdca 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2101      	movs	r1, #1
 80008c0:	4846      	ldr	r0, [pc, #280]	; (80009dc <MX_GPIO_Init+0x1e8>)
 80008c2:	f000 fdc5 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c6:	2200      	movs	r2, #0
 80008c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008cc:	4844      	ldr	r0, [pc, #272]	; (80009e0 <MX_GPIO_Init+0x1ec>)
 80008ce:	f000 fdbf 	bl	8001450 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008d2:	2308      	movs	r3, #8
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	483b      	ldr	r0, [pc, #236]	; (80009d8 <MX_GPIO_Init+0x1e4>)
 80008ea:	f000 fc15 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4835      	ldr	r0, [pc, #212]	; (80009dc <MX_GPIO_Init+0x1e8>)
 8000906:	f000 fc07 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800090a:	2308      	movs	r3, #8
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091a:	2305      	movs	r3, #5
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	482d      	ldr	r0, [pc, #180]	; (80009dc <MX_GPIO_Init+0x1e8>)
 8000926:	f000 fbf7 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <MX_GPIO_Init+0x1f0>)
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	482a      	ldr	r0, [pc, #168]	; (80009e8 <MX_GPIO_Init+0x1f4>)
 800093e:	f000 fbeb 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000942:	2304      	movs	r3, #4
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4825      	ldr	r0, [pc, #148]	; (80009ec <MX_GPIO_Init+0x1f8>)
 8000956:	f000 fbdf 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800095a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096c:	2305      	movs	r3, #5
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	481d      	ldr	r0, [pc, #116]	; (80009ec <MX_GPIO_Init+0x1f8>)
 8000978:	f000 fbce 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800097c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000980:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4812      	ldr	r0, [pc, #72]	; (80009e0 <MX_GPIO_Init+0x1ec>)
 8000996:	f000 fbbf 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800099a:	2320      	movs	r3, #32
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <MX_GPIO_Init+0x1ec>)
 80009ae:	f000 fbb3 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_GPIO_Init+0x1f0>)
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_GPIO_Init+0x1e4>)
 80009c6:	f000 fba7 	bl	8001118 <HAL_GPIO_Init>

}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	; 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40020800 	.word	0x40020800
 80009e0:	40020c00 	.word	0x40020c00
 80009e4:	10120000 	.word	0x10120000
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020400 	.word	0x40020400

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a3a:	2007      	movs	r0, #7
 8000a3c:	f000 fb2a 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <HAL_I2C_MspInit+0x84>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12c      	bne.n	8000ac8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a8a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a90:	2312      	movs	r3, #18
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <HAL_I2C_MspInit+0x8c>)
 8000aa8:	f000 fb36 	bl	8001118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000ab6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400

08000adc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a28      	ldr	r2, [pc, #160]	; (8000b9c <HAL_I2S_MspInit+0xc0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d14a      	bne.n	8000b94 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <HAL_I2S_MspInit+0xc4>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a26      	ldr	r2, [pc, #152]	; (8000ba0 <HAL_I2S_MspInit+0xc4>)
 8000b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <HAL_I2S_MspInit+0xc4>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <HAL_I2S_MspInit+0xc4>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a1f      	ldr	r2, [pc, #124]	; (8000ba0 <HAL_I2S_MspInit+0xc4>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <HAL_I2S_MspInit+0xc4>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <HAL_I2S_MspInit+0xc4>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <HAL_I2S_MspInit+0xc4>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <HAL_I2S_MspInit+0xc4>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b52:	2310      	movs	r3, #16
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b62:	2306      	movs	r3, #6
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <HAL_I2S_MspInit+0xc8>)
 8000b6e:	f000 fad3 	bl	8001118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b72:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b84:	2306      	movs	r3, #6
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <HAL_I2S_MspInit+0xcc>)
 8000b90:	f000 fac2 	bl	8001118 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40003c00 	.word	0x40003c00
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40020800 	.word	0x40020800

08000bac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_SPI_MspInit+0x84>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12b      	bne.n	8000c26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_SPI_MspInit+0x88>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c06:	23e0      	movs	r3, #224	; 0xe0
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c16:	2305      	movs	r3, #5
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_SPI_MspInit+0x8c>)
 8000c22:	f000 fa79 	bl	8001118 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40013000 	.word	0x40013000
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000

08000c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c4c:	d10d      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_TIM_Base_MspInit+0x3c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_TIM_Base_MspInit+0x3c>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_TIM_Base_MspInit+0x3c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f8d0 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <OTG_FS_IRQHandler+0x10>)
 8000cd6:	f000 fe59 	bl	800198c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200005d4 	.word	0x200005d4

08000ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <_sbrk+0x5c>)
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <_sbrk+0x60>)
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d207      	bcs.n	8000d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d14:	f006 fa3e 	bl	8007194 <__errno>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	e009      	b.n	8000d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <_sbrk+0x64>)
 8000d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20020000 	.word	0x20020000
 8000d44:	00000400 	.word	0x00000400
 8000d48:	200000ac 	.word	0x200000ac
 8000d4c:	200008e8 	.word	0x200008e8

08000d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d7a:	490e      	ldr	r1, [pc, #56]	; (8000db4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d90:	4c0b      	ldr	r4, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d9e:	f7ff ffd7 	bl	8000d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da2:	f006 f9fd 	bl	80071a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fb8b 	bl	80004c0 <main>
  bx  lr    
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000db8:	080073ec 	.word	0x080073ec
  ldr r2, =_sbss
 8000dbc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000dc0:	200008e8 	.word	0x200008e8

08000dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <HAL_Init+0x40>)
 8000dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_Init+0x40>)
 8000dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_Init+0x40>)
 8000dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f94f 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f808 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f7ff fdfe 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023c00 	.word	0x40023c00

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x54>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x58>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f967 	bl	80010fe <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00e      	b.n	8000e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d80a      	bhi.n	8000e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f000 f92f 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e4c:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <HAL_InitTick+0x5c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e000      	b.n	8000e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000004 	.word	0x20000004

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	200001f8 	.word	0x200001f8

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	200001f8 	.word	0x200001f8

08000eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff ffee 	bl	8000e94 <HAL_GetTick>
 8000eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec4:	d005      	beq.n	8000ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_Delay+0x44>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed2:	bf00      	nop
 8000ed4:	f7ff ffde 	bl	8000e94 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d8f7      	bhi.n	8000ed4 <HAL_Delay+0x28>
  {
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff29 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff3e 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff8e 	bl	8000fe8 <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff31 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ffa2 	bl	8001050 <SysTick_Config>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	e16b      	b.n	800140c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	429a      	cmp	r2, r3
 800114e:	f040 815a 	bne.w	8001406 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d005      	beq.n	800116a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001166:	2b02      	cmp	r3, #2
 8001168:	d130      	bne.n	80011cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d017      	beq.n	8001208 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	69b9      	ldr	r1, [r7, #24]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80b4 	beq.w	8001406 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b60      	ldr	r3, [pc, #384]	; (8001424 <HAL_GPIO_Init+0x30c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a5f      	ldr	r2, [pc, #380]	; (8001424 <HAL_GPIO_Init+0x30c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b5d      	ldr	r3, [pc, #372]	; (8001424 <HAL_GPIO_Init+0x30c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ba:	4a5b      	ldr	r2, [pc, #364]	; (8001428 <HAL_GPIO_Init+0x310>)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a52      	ldr	r2, [pc, #328]	; (800142c <HAL_GPIO_Init+0x314>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d02b      	beq.n	800133e <HAL_GPIO_Init+0x226>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a51      	ldr	r2, [pc, #324]	; (8001430 <HAL_GPIO_Init+0x318>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d025      	beq.n	800133a <HAL_GPIO_Init+0x222>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a50      	ldr	r2, [pc, #320]	; (8001434 <HAL_GPIO_Init+0x31c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d01f      	beq.n	8001336 <HAL_GPIO_Init+0x21e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4f      	ldr	r2, [pc, #316]	; (8001438 <HAL_GPIO_Init+0x320>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d019      	beq.n	8001332 <HAL_GPIO_Init+0x21a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4e      	ldr	r2, [pc, #312]	; (800143c <HAL_GPIO_Init+0x324>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0x216>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4d      	ldr	r2, [pc, #308]	; (8001440 <HAL_GPIO_Init+0x328>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00d      	beq.n	800132a <HAL_GPIO_Init+0x212>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4c      	ldr	r2, [pc, #304]	; (8001444 <HAL_GPIO_Init+0x32c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x20e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4b      	ldr	r2, [pc, #300]	; (8001448 <HAL_GPIO_Init+0x330>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_GPIO_Init+0x20a>
 800131e:	2307      	movs	r3, #7
 8001320:	e00e      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001322:	2308      	movs	r3, #8
 8001324:	e00c      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001326:	2306      	movs	r3, #6
 8001328:	e00a      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800132a:	2305      	movs	r3, #5
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800132e:	2304      	movs	r3, #4
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	; (8001428 <HAL_GPIO_Init+0x310>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135e:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HAL_GPIO_Init+0x334>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001382:	4a32      	ldr	r2, [pc, #200]	; (800144c <HAL_GPIO_Init+0x334>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001388:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_GPIO_Init+0x334>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ac:	4a27      	ldr	r2, [pc, #156]	; (800144c <HAL_GPIO_Init+0x334>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_GPIO_Init+0x334>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d6:	4a1d      	ldr	r2, [pc, #116]	; (800144c <HAL_GPIO_Init+0x334>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_GPIO_Init+0x334>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <HAL_GPIO_Init+0x334>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f ae90 	bls.w	8001134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40021400 	.word	0x40021400
 8001444:	40021800 	.word	0x40021800
 8001448:	40021c00 	.word	0x40021c00
 800144c:	40013c00 	.word	0x40013c00

08001450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	4613      	mov	r3, r2
 800145e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001460:	787b      	ldrb	r3, [r7, #1]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800146c:	e003      	b.n	8001476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	041a      	lsls	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	619a      	str	r2, [r3, #24]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001494:	887a      	ldrh	r2, [r7, #2]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4013      	ands	r3, r2
 800149a:	041a      	lsls	r2, r3, #16
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43d9      	mvns	r1, r3
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	400b      	ands	r3, r1
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b8:	b08f      	sub	sp, #60	; 0x3c
 80014ba:	af0a      	add	r7, sp, #40	; 0x28
 80014bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e054      	b.n	8001572 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f005 fbfa 	bl	8006cdc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2203      	movs	r2, #3
 80014ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f003 fc66 	bl	8004dd8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	687e      	ldr	r6, [r7, #4]
 8001514:	466d      	mov	r5, sp
 8001516:	f106 0410 	add.w	r4, r6, #16
 800151a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001522:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001526:	e885 0003 	stmia.w	r5, {r0, r1}
 800152a:	1d33      	adds	r3, r6, #4
 800152c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800152e:	6838      	ldr	r0, [r7, #0]
 8001530:	f003 fbe0 	bl	8004cf4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2101      	movs	r1, #1
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fc5d 	bl	8004dfa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	687e      	ldr	r6, [r7, #4]
 8001548:	466d      	mov	r5, sp
 800154a:	f106 0410 	add.w	r4, r6, #16
 800154e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001556:	e894 0003 	ldmia.w	r4, {r0, r1}
 800155a:	e885 0003 	stmia.w	r5, {r0, r1}
 800155e:	1d33      	adds	r3, r6, #4
 8001560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	f003 fd70 	bl	8005048 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800157a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800157a:	b590      	push	{r4, r7, lr}
 800157c:	b089      	sub	sp, #36	; 0x24
 800157e:	af04      	add	r7, sp, #16
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	4608      	mov	r0, r1
 8001584:	4611      	mov	r1, r2
 8001586:	461a      	mov	r2, r3
 8001588:	4603      	mov	r3, r0
 800158a:	70fb      	strb	r3, [r7, #3]
 800158c:	460b      	mov	r3, r1
 800158e:	70bb      	strb	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_HCD_HC_Init+0x28>
 800159e:	2302      	movs	r3, #2
 80015a0:	e076      	b.n	8001690 <HAL_HCD_HC_Init+0x116>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	212c      	movs	r1, #44	; 0x2c
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	333d      	adds	r3, #61	; 0x3d
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	212c      	movs	r1, #44	; 0x2c
 80015c2:	fb01 f303 	mul.w	r3, r1, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	3338      	adds	r3, #56	; 0x38
 80015ca:	787a      	ldrb	r2, [r7, #1]
 80015cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	212c      	movs	r1, #44	; 0x2c
 80015d4:	fb01 f303 	mul.w	r3, r1, r3
 80015d8:	4413      	add	r3, r2
 80015da:	3340      	adds	r3, #64	; 0x40
 80015dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	212c      	movs	r1, #44	; 0x2c
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	3339      	adds	r3, #57	; 0x39
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	212c      	movs	r1, #44	; 0x2c
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	333f      	adds	r3, #63	; 0x3f
 8001600:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001604:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	78ba      	ldrb	r2, [r7, #2]
 800160a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800160e:	b2d0      	uxtb	r0, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	212c      	movs	r1, #44	; 0x2c
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	4413      	add	r3, r2
 800161a:	333a      	adds	r3, #58	; 0x3a
 800161c:	4602      	mov	r2, r0
 800161e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001620:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001624:	2b00      	cmp	r3, #0
 8001626:	da09      	bge.n	800163c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	212c      	movs	r1, #44	; 0x2c
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	333b      	adds	r3, #59	; 0x3b
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	e008      	b.n	800164e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	212c      	movs	r1, #44	; 0x2c
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	333b      	adds	r3, #59	; 0x3b
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	212c      	movs	r1, #44	; 0x2c
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	4413      	add	r3, r2
 800165a:	333c      	adds	r3, #60	; 0x3c
 800165c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001660:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	787c      	ldrb	r4, [r7, #1]
 8001668:	78ba      	ldrb	r2, [r7, #2]
 800166a:	78f9      	ldrb	r1, [r7, #3]
 800166c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800166e:	9302      	str	r3, [sp, #8]
 8001670:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	f897 3020 	ldrb.w	r3, [r7, #32]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	4623      	mov	r3, r4
 800167e:	f003 fe3b 	bl	80052f8 <USB_HC_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}

08001698 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_HCD_HC_Halt+0x1e>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e00f      	b.n	80016d6 <HAL_HCD_HC_Halt+0x3e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 f877 	bl	80057ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	4608      	mov	r0, r1
 80016ea:	4611      	mov	r1, r2
 80016ec:	461a      	mov	r2, r3
 80016ee:	4603      	mov	r3, r0
 80016f0:	70fb      	strb	r3, [r7, #3]
 80016f2:	460b      	mov	r3, r1
 80016f4:	70bb      	strb	r3, [r7, #2]
 80016f6:	4613      	mov	r3, r2
 80016f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	212c      	movs	r1, #44	; 0x2c
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	333b      	adds	r3, #59	; 0x3b
 8001708:	78ba      	ldrb	r2, [r7, #2]
 800170a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	212c      	movs	r1, #44	; 0x2c
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	333f      	adds	r3, #63	; 0x3f
 800171a:	787a      	ldrb	r2, [r7, #1]
 800171c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800171e:	7c3b      	ldrb	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d112      	bne.n	800174a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	3342      	adds	r3, #66	; 0x42
 8001732:	2203      	movs	r2, #3
 8001734:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	333d      	adds	r3, #61	; 0x3d
 8001744:	7f3a      	ldrb	r2, [r7, #28]
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	e008      	b.n	800175c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3342      	adds	r3, #66	; 0x42
 8001758:	2202      	movs	r2, #2
 800175a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b03      	cmp	r3, #3
 8001760:	f200 80c6 	bhi.w	80018f0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001764:	a201      	add	r2, pc, #4	; (adr r2, 800176c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	0800177d 	.word	0x0800177d
 8001770:	080018dd 	.word	0x080018dd
 8001774:	080017e1 	.word	0x080017e1
 8001778:	0800185f 	.word	0x0800185f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800177c:	7c3b      	ldrb	r3, [r7, #16]
 800177e:	2b01      	cmp	r3, #1
 8001780:	f040 80b8 	bne.w	80018f4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001784:	78bb      	ldrb	r3, [r7, #2]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 80b4 	bne.w	80018f4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800178c:	8b3b      	ldrh	r3, [r7, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d108      	bne.n	80017a4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3355      	adds	r3, #85	; 0x55
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	3355      	adds	r3, #85	; 0x55
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	212c      	movs	r1, #44	; 0x2c
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	3342      	adds	r3, #66	; 0x42
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017ca:	e093      	b.n	80018f4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	212c      	movs	r1, #44	; 0x2c
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3342      	adds	r3, #66	; 0x42
 80017da:	2202      	movs	r2, #2
 80017dc:	701a      	strb	r2, [r3, #0]
      break;
 80017de:	e089      	b.n	80018f4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017e0:	78bb      	ldrb	r3, [r7, #2]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d11d      	bne.n	8001822 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	212c      	movs	r1, #44	; 0x2c
 80017ec:	fb01 f303 	mul.w	r3, r1, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	3355      	adds	r3, #85	; 0x55
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	3342      	adds	r3, #66	; 0x42
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800180c:	e073      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	212c      	movs	r1, #44	; 0x2c
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	3342      	adds	r3, #66	; 0x42
 800181c:	2202      	movs	r2, #2
 800181e:	701a      	strb	r2, [r3, #0]
      break;
 8001820:	e069      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	3354      	adds	r3, #84	; 0x54
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	212c      	movs	r1, #44	; 0x2c
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	3342      	adds	r3, #66	; 0x42
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
      break;
 8001848:	e055      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	212c      	movs	r1, #44	; 0x2c
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	3342      	adds	r3, #66	; 0x42
 8001858:	2202      	movs	r2, #2
 800185a:	701a      	strb	r2, [r3, #0]
      break;
 800185c:	e04b      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800185e:	78bb      	ldrb	r3, [r7, #2]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d11d      	bne.n	80018a0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3355      	adds	r3, #85	; 0x55
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3342      	adds	r3, #66	; 0x42
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800188a:	e034      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3342      	adds	r3, #66	; 0x42
 800189a:	2202      	movs	r2, #2
 800189c:	701a      	strb	r2, [r3, #0]
      break;
 800189e:	e02a      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	212c      	movs	r1, #44	; 0x2c
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	3354      	adds	r3, #84	; 0x54
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	212c      	movs	r1, #44	; 0x2c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3342      	adds	r3, #66	; 0x42
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
      break;
 80018c6:	e016      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	212c      	movs	r1, #44	; 0x2c
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	3342      	adds	r3, #66	; 0x42
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
      break;
 80018da:	e00c      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3342      	adds	r3, #66	; 0x42
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
      break;
 80018ee:	e002      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80018f0:	bf00      	nop
 80018f2:	e000      	b.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80018f4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	212c      	movs	r1, #44	; 0x2c
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	4413      	add	r3, r2
 8001902:	3344      	adds	r3, #68	; 0x44
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	8b3a      	ldrh	r2, [r7, #24]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	202c      	movs	r0, #44	; 0x2c
 8001910:	fb00 f303 	mul.w	r3, r0, r3
 8001914:	440b      	add	r3, r1
 8001916:	334c      	adds	r3, #76	; 0x4c
 8001918:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	212c      	movs	r1, #44	; 0x2c
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	4413      	add	r3, r2
 8001926:	3360      	adds	r3, #96	; 0x60
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	212c      	movs	r1, #44	; 0x2c
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	3350      	adds	r3, #80	; 0x50
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	3339      	adds	r3, #57	; 0x39
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3361      	adds	r3, #97	; 0x61
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	222c      	movs	r2, #44	; 0x2c
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	3338      	adds	r3, #56	; 0x38
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	18d1      	adds	r1, r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	f003 fdca 	bl	8005514 <USB_HC_StartXfer>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop

0800198c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 fb0d 	bl	8004fc2 <USB_GetMode>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	f040 80ef 	bne.w	8001b8e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 faf1 	bl	8004f9c <USB_ReadInterrupts>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80e5 	beq.w	8001b8c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 fae8 	bl	8004f9c <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019d6:	d104      	bne.n	80019e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fad8 	bl	8004f9c <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019f6:	d104      	bne.n	8001a02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 fac8 	bl	8004f9c <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a16:	d104      	bne.n	8001a22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 fab8 	bl	8004f9c <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d103      	bne.n	8001a3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f003 faaa 	bl	8004f9c <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a52:	d115      	bne.n	8001a80 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d108      	bne.n	8001a80 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f005 f9b2 	bl	8006dd8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 fba0 	bl	80051c0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 fa89 	bl	8004f9c <USB_ReadInterrupts>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a94:	d102      	bne.n	8001a9c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f001 f9e3 	bl	8002e62 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 fa7b 	bl	8004f9c <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d106      	bne.n	8001abe <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f005 f975 	bl	8006da0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2208      	movs	r2, #8
 8001abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 fa6a 	bl	8004f9c <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b10      	cmp	r3, #16
 8001ad0:	d101      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0x14a>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_HCD_IRQHandler+0x14c>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d012      	beq.n	8001b02 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699a      	ldr	r2, [r3, #24]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0210 	bic.w	r2, r2, #16
 8001aea:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f001 f8e6 	bl	8002cbe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699a      	ldr	r2, [r3, #24]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0210 	orr.w	r2, r2, #16
 8001b00:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fa48 	bl	8004f9c <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b16:	d13a      	bne.n	8001b8e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 fe3b 	bl	8005798 <USB_HC_ReadInterrupt>
 8001b22:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e025      	b.n	8001b76 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	fa22 f303 	lsr.w	r3, r2, r3
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d018      	beq.n	8001b70 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b54:	d106      	bne.n	8001b64 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f88f 	bl	8001c80 <HCD_HC_IN_IRQHandler>
 8001b62:	e005      	b.n	8001b70 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4619      	mov	r1, r3
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fcaa 	bl	80024c4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d3d4      	bcc.n	8001b2a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b88:	615a      	str	r2, [r3, #20]
 8001b8a:	e000      	b.n	8001b8e <HAL_HCD_IRQHandler+0x202>
      return;
 8001b8c:	bf00      	nop
    }
  }
}
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_HCD_Start+0x16>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e013      	b.n	8001bd2 <HAL_HCD_Start+0x3e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 f8fd 	bl	8004db6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fb36 	bl	8005234 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_HCD_Stop+0x16>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e00d      	b.n	8001c0c <HAL_HCD_Stop+0x32>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 ff35 	bl	8005a6c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	212c      	movs	r1, #44	; 0x2c
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3360      	adds	r3, #96	; 0x60
 8001c2e:	781b      	ldrb	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	212c      	movs	r1, #44	; 0x2c
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	3350      	adds	r3, #80	; 0x50
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 fb2f 	bl	80052d4 <USB_GetCurrentFrame>
 8001c76:	4603      	mov	r3, r0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	015a      	lsls	r2, r3, #5
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d119      	bne.n	8001ce4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	015a      	lsls	r2, r3, #5
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	0151      	lsls	r1, r2, #5
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	440a      	add	r2, r1
 8001cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	60d3      	str	r3, [r2, #12]
 8001ce2:	e101      	b.n	8001ee8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	015a      	lsls	r2, r3, #5
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfa:	d12b      	bne.n	8001d54 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	212c      	movs	r1, #44	; 0x2c
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3361      	adds	r3, #97	; 0x61
 8001d1e:	2207      	movs	r2, #7
 8001d20:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	0151      	lsls	r1, r2, #5
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	440a      	add	r2, r1
 8001d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fd34 	bl	80057ba <USB_HC_Halt>
 8001d52:	e0c9      	b.n	8001ee8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d109      	bne.n	8001d7e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	461a      	mov	r2, r3
 8001d78:	2320      	movs	r3, #32
 8001d7a:	6093      	str	r3, [r2, #8]
 8001d7c:	e0b4      	b.n	8001ee8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d133      	bne.n	8001dfc <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	0151      	lsls	r1, r2, #5
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	440a      	add	r2, r1
 8001daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dae:	f043 0302 	orr.w	r3, r3, #2
 8001db2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	212c      	movs	r1, #44	; 0x2c
 8001dba:	fb01 f303 	mul.w	r3, r1, r3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3361      	adds	r3, #97	; 0x61
 8001dc2:	2205      	movs	r2, #5
 8001dc4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2310      	movs	r3, #16
 8001dd6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de4:	461a      	mov	r2, r3
 8001de6:	2308      	movs	r3, #8
 8001de8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 fce0 	bl	80057ba <USB_HC_Halt>
 8001dfa:	e075      	b.n	8001ee8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e12:	d134      	bne.n	8001e7e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	0151      	lsls	r1, r2, #5
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	440a      	add	r2, r1
 8001e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e2e:	f043 0302 	orr.w	r3, r3, #2
 8001e32:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	212c      	movs	r1, #44	; 0x2c
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	3361      	adds	r3, #97	; 0x61
 8001e42:	2208      	movs	r2, #8
 8001e44:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e52:	461a      	mov	r2, r3
 8001e54:	2310      	movs	r3, #16
 8001e56:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e64:	461a      	mov	r2, r3
 8001e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 fc9f 	bl	80057ba <USB_HC_Halt>
 8001e7c:	e034      	b.n	8001ee8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e90:	2b80      	cmp	r3, #128	; 0x80
 8001e92:	d129      	bne.n	8001ee8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	0151      	lsls	r1, r2, #5
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	440a      	add	r2, r1
 8001eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	212c      	movs	r1, #44	; 0x2c
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3361      	adds	r3, #97	; 0x61
 8001ec2:	2206      	movs	r2, #6
 8001ec4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fc72 	bl	80057ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efe:	d122      	bne.n	8001f46 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	0151      	lsls	r1, r2, #5
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	440a      	add	r2, r1
 8001f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fc45 	bl	80057ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f42:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f44:	e2ba      	b.n	80024bc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	f040 811b 	bne.w	8002194 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d019      	beq.n	8001f9a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	212c      	movs	r1, #44	; 0x2c
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	3348      	adds	r3, #72	; 0x48
 8001f74:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	0159      	lsls	r1, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	440b      	add	r3, r1
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f88:	1ad2      	subs	r2, r2, r3
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	202c      	movs	r0, #44	; 0x2c
 8001f90:	fb00 f303 	mul.w	r3, r0, r3
 8001f94:	440b      	add	r3, r1
 8001f96:	3350      	adds	r3, #80	; 0x50
 8001f98:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	212c      	movs	r1, #44	; 0x2c
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3361      	adds	r3, #97	; 0x61
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	335c      	adds	r3, #92	; 0x5c
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2301      	movs	r3, #1
 8001fce:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	212c      	movs	r1, #44	; 0x2c
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	333f      	adds	r3, #63	; 0x3f
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d009      	beq.n	8001ff8 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	212c      	movs	r1, #44	; 0x2c
 8001fea:	fb01 f303 	mul.w	r3, r1, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	333f      	adds	r3, #63	; 0x3f
 8001ff2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d121      	bne.n	800203c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	0151      	lsls	r1, r2, #5
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	440a      	add	r2, r1
 800200e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f003 fbc9 	bl	80057ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002034:	461a      	mov	r2, r3
 8002036:	2310      	movs	r3, #16
 8002038:	6093      	str	r3, [r2, #8]
 800203a:	e066      	b.n	800210a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	333f      	adds	r3, #63	; 0x3f
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d127      	bne.n	80020a0 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	0151      	lsls	r1, r2, #5
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	440a      	add	r2, r1
 8002066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800206a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800206e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	212c      	movs	r1, #44	; 0x2c
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	4413      	add	r3, r2
 800207c:	3360      	adds	r3, #96	; 0x60
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	b2d9      	uxtb	r1, r3
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	202c      	movs	r0, #44	; 0x2c
 800208c:	fb00 f303 	mul.w	r3, r0, r3
 8002090:	4413      	add	r3, r2
 8002092:	3360      	adds	r3, #96	; 0x60
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f004 feab 	bl	8006df4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800209e:	e034      	b.n	800210a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	333f      	adds	r3, #63	; 0x3f
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d12a      	bne.n	800210a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	3360      	adds	r3, #96	; 0x60
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	3354      	adds	r3, #84	; 0x54
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	f083 0301 	eor.w	r3, r3, #1
 80020da:	b2d8      	uxtb	r0, r3
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	3354      	adds	r3, #84	; 0x54
 80020ea:	4602      	mov	r2, r0
 80020ec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	b2d9      	uxtb	r1, r3
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	202c      	movs	r0, #44	; 0x2c
 80020f8:	fb00 f303 	mul.w	r3, r0, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3360      	adds	r3, #96	; 0x60
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f004 fe75 	bl	8006df4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d12b      	bne.n	800216a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	3348      	adds	r3, #72	; 0x48
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	202c      	movs	r0, #44	; 0x2c
 8002128:	fb00 f202 	mul.w	r2, r0, r2
 800212c:	440a      	add	r2, r1
 800212e:	3240      	adds	r2, #64	; 0x40
 8002130:	8812      	ldrh	r2, [r2, #0]
 8002132:	fbb3 f3f2 	udiv	r3, r3, r2
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 81be 	beq.w	80024bc <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3354      	adds	r3, #84	; 0x54
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f083 0301 	eor.w	r3, r3, #1
 8002154:	b2d8      	uxtb	r0, r3
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3354      	adds	r3, #84	; 0x54
 8002164:	4602      	mov	r2, r0
 8002166:	701a      	strb	r2, [r3, #0]
}
 8002168:	e1a8      	b.n	80024bc <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	212c      	movs	r1, #44	; 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	3354      	adds	r3, #84	; 0x54
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2d8      	uxtb	r0, r3
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	3354      	adds	r3, #84	; 0x54
 800218e:	4602      	mov	r2, r0
 8002190:	701a      	strb	r2, [r3, #0]
}
 8002192:	e193      	b.n	80024bc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	f040 8106 	bne.w	80023b8 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	0151      	lsls	r1, r2, #5
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	440a      	add	r2, r1
 80021c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c6:	f023 0302 	bic.w	r3, r3, #2
 80021ca:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3361      	adds	r3, #97	; 0x61
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d109      	bne.n	80021f4 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3360      	adds	r3, #96	; 0x60
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
 80021f2:	e0c9      	b.n	8002388 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	3361      	adds	r3, #97	; 0x61
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b05      	cmp	r3, #5
 8002206:	d109      	bne.n	800221c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3360      	adds	r3, #96	; 0x60
 8002216:	2205      	movs	r2, #5
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e0b5      	b.n	8002388 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	3361      	adds	r3, #97	; 0x61
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b06      	cmp	r3, #6
 800222e:	d009      	beq.n	8002244 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3361      	adds	r3, #97	; 0x61
 800223e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002240:	2b08      	cmp	r3, #8
 8002242:	d150      	bne.n	80022e6 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	335c      	adds	r3, #92	; 0x5c
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	202c      	movs	r0, #44	; 0x2c
 800225c:	fb00 f303 	mul.w	r3, r0, r3
 8002260:	440b      	add	r3, r1
 8002262:	335c      	adds	r3, #92	; 0x5c
 8002264:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	335c      	adds	r3, #92	; 0x5c
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d912      	bls.n	80022a0 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	335c      	adds	r3, #92	; 0x5c
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	3360      	adds	r3, #96	; 0x60
 800229a:	2204      	movs	r2, #4
 800229c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800229e:	e073      	b.n	8002388 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3360      	adds	r3, #96	; 0x60
 80022ae:	2202      	movs	r2, #2
 80022b0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022c8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022d0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022de:	461a      	mov	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022e4:	e050      	b.n	8002388 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	3361      	adds	r3, #97	; 0x61
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d122      	bne.n	8002340 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	3360      	adds	r3, #96	; 0x60
 8002308:	2202      	movs	r2, #2
 800230a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4413      	add	r3, r2
 8002314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002322:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800232a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e023      	b.n	8002388 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	3361      	adds	r3, #97	; 0x61
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b07      	cmp	r3, #7
 8002352:	d119      	bne.n	8002388 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	335c      	adds	r3, #92	; 0x5c
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	202c      	movs	r0, #44	; 0x2c
 800236c:	fb00 f303 	mul.w	r3, r0, r3
 8002370:	440b      	add	r3, r1
 8002372:	335c      	adds	r3, #92	; 0x5c
 8002374:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	212c      	movs	r1, #44	; 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	3360      	adds	r3, #96	; 0x60
 8002384:	2204      	movs	r2, #4
 8002386:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002394:	461a      	mov	r2, r3
 8002396:	2302      	movs	r3, #2
 8002398:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	b2d9      	uxtb	r1, r3
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	202c      	movs	r0, #44	; 0x2c
 80023a4:	fb00 f303 	mul.w	r3, r0, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	3360      	adds	r3, #96	; 0x60
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f004 fd1f 	bl	8006df4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023b6:	e081      	b.n	80024bc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d176      	bne.n	80024bc <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	333f      	adds	r3, #63	; 0x3f
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d121      	bne.n	8002426 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	335c      	adds	r3, #92	; 0x5c
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	0151      	lsls	r1, r2, #5
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	440a      	add	r2, r1
 800240a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800240e:	f043 0302 	orr.w	r3, r3, #2
 8002412:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f003 f9cb 	bl	80057ba <USB_HC_Halt>
 8002424:	e041      	b.n	80024aa <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	333f      	adds	r3, #63	; 0x3f
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	333f      	adds	r3, #63	; 0x3f
 8002448:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800244a:	2b02      	cmp	r3, #2
 800244c:	d12d      	bne.n	80024aa <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	335c      	adds	r3, #92	; 0x5c
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d120      	bne.n	80024aa <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	212c      	movs	r1, #44	; 0x2c
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	4413      	add	r3, r2
 8002474:	3361      	adds	r3, #97	; 0x61
 8002476:	2203      	movs	r2, #3
 8002478:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4413      	add	r3, r2
 8002482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	0151      	lsls	r1, r2, #5
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	440a      	add	r2, r1
 8002490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f003 f988 	bl	80057ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	461a      	mov	r2, r3
 80024b8:	2310      	movs	r3, #16
 80024ba:	6093      	str	r3, [r2, #8]
}
 80024bc:	bf00      	nop
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d119      	bne.n	8002528 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	461a      	mov	r2, r3
 8002502:	2304      	movs	r3, #4
 8002504:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	0151      	lsls	r1, r2, #5
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	440a      	add	r2, r1
 800251c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002526:	e3c6      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b20      	cmp	r3, #32
 800253c:	d13e      	bne.n	80025bc <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	461a      	mov	r2, r3
 800254c:	2320      	movs	r3, #32
 800254e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	333d      	adds	r3, #61	; 0x3d
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	f040 83a8 	bne.w	8002cb6 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	333d      	adds	r3, #61	; 0x3d
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3360      	adds	r3, #96	; 0x60
 8002586:	2202      	movs	r2, #2
 8002588:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	0151      	lsls	r1, r2, #5
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	440a      	add	r2, r1
 80025a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 f900 	bl	80057ba <USB_HC_Halt>
}
 80025ba:	e37c      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d2:	d122      	bne.n	800261a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	0151      	lsls	r1, r2, #5
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	440a      	add	r2, r1
 80025ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ee:	f043 0302 	orr.w	r3, r3, #2
 80025f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 f8db 	bl	80057ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	461a      	mov	r2, r3
 8002612:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002616:	6093      	str	r3, [r2, #8]
}
 8002618:	e34d      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d150      	bne.n	80026d2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	212c      	movs	r1, #44	; 0x2c
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4413      	add	r3, r2
 800263c:	335c      	adds	r3, #92	; 0x5c
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d111      	bne.n	800267c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	212c      	movs	r1, #44	; 0x2c
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	4413      	add	r3, r2
 8002664:	333d      	adds	r3, #61	; 0x3d
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002676:	461a      	mov	r2, r3
 8002678:	2340      	movs	r3, #64	; 0x40
 800267a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	0151      	lsls	r1, r2, #5
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	440a      	add	r2, r1
 8002692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002696:	f043 0302 	orr.w	r3, r3, #2
 800269a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 f887 	bl	80057ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	461a      	mov	r2, r3
 80026ba:	2301      	movs	r3, #1
 80026bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	3361      	adds	r3, #97	; 0x61
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
}
 80026d0:	e2f1      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d13c      	bne.n	8002762 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3361      	adds	r3, #97	; 0x61
 80026f6:	2204      	movs	r2, #4
 80026f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	333d      	adds	r3, #61	; 0x3d
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	212c      	movs	r1, #44	; 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	335c      	adds	r3, #92	; 0x5c
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	0151      	lsls	r1, r2, #5
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	440a      	add	r2, r1
 8002734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f003 f836 	bl	80057ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	461a      	mov	r2, r3
 800275c:	2340      	movs	r3, #64	; 0x40
 800275e:	6093      	str	r3, [r2, #8]
}
 8002760:	e2a9      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b08      	cmp	r3, #8
 8002776:	d12a      	bne.n	80027ce <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002784:	461a      	mov	r2, r3
 8002786:	2308      	movs	r3, #8
 8002788:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	0151      	lsls	r1, r2, #5
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	440a      	add	r2, r1
 80027a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 f800 	bl	80057ba <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3361      	adds	r3, #97	; 0x61
 80027c8:	2205      	movs	r2, #5
 80027ca:	701a      	strb	r2, [r3, #0]
}
 80027cc:	e273      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d150      	bne.n	8002886 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	335c      	adds	r3, #92	; 0x5c
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	3361      	adds	r3, #97	; 0x61
 8002804:	2203      	movs	r2, #3
 8002806:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	333d      	adds	r3, #61	; 0x3d
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d112      	bne.n	8002842 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	333c      	adds	r3, #60	; 0x3c
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d108      	bne.n	8002842 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	333d      	adds	r3, #61	; 0x3d
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	0151      	lsls	r1, r2, #5
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	440a      	add	r2, r1
 8002858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f002 ffa4 	bl	80057ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	461a      	mov	r2, r3
 8002880:	2310      	movs	r3, #16
 8002882:	6093      	str	r3, [r2, #8]
}
 8002884:	e217      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002898:	2b80      	cmp	r3, #128	; 0x80
 800289a:	d174      	bne.n	8002986 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d121      	bne.n	80028e8 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3361      	adds	r3, #97	; 0x61
 80028b2:	2206      	movs	r2, #6
 80028b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	0151      	lsls	r1, r2, #5
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	440a      	add	r2, r1
 80028cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 ff6a 	bl	80057ba <USB_HC_Halt>
 80028e6:	e044      	b.n	8002972 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	335c      	adds	r3, #92	; 0x5c
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	202c      	movs	r0, #44	; 0x2c
 8002900:	fb00 f303 	mul.w	r3, r0, r3
 8002904:	440b      	add	r3, r1
 8002906:	335c      	adds	r3, #92	; 0x5c
 8002908:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	335c      	adds	r3, #92	; 0x5c
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d920      	bls.n	8002960 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	212c      	movs	r1, #44	; 0x2c
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	335c      	adds	r3, #92	; 0x5c
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3360      	adds	r3, #96	; 0x60
 800293e:	2204      	movs	r2, #4
 8002940:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	b2d9      	uxtb	r1, r3
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	202c      	movs	r0, #44	; 0x2c
 800294c:	fb00 f303 	mul.w	r3, r0, r3
 8002950:	4413      	add	r3, r2
 8002952:	3360      	adds	r3, #96	; 0x60
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f004 fa4b 	bl	8006df4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800295e:	e008      	b.n	8002972 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	3360      	adds	r3, #96	; 0x60
 800296e:	2202      	movs	r2, #2
 8002970:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	461a      	mov	r2, r3
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	6093      	str	r3, [r2, #8]
}
 8002984:	e197      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299c:	d134      	bne.n	8002a08 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	0151      	lsls	r1, r2, #5
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	440a      	add	r2, r1
 80029b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f002 fef6 	bl	80057ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029da:	461a      	mov	r2, r3
 80029dc:	2310      	movs	r3, #16
 80029de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	461a      	mov	r2, r3
 80029ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3361      	adds	r3, #97	; 0x61
 8002a02:	2208      	movs	r2, #8
 8002a04:	701a      	strb	r2, [r3, #0]
}
 8002a06:	e156      	b.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	f040 814b 	bne.w	8002cb6 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	0151      	lsls	r1, r2, #5
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	440a      	add	r2, r1
 8002a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a3a:	f023 0302 	bic.w	r3, r3, #2
 8002a3e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3361      	adds	r3, #97	; 0x61
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d179      	bne.n	8002b48 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3360      	adds	r3, #96	; 0x60
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	333f      	adds	r3, #63	; 0x3f
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d00a      	beq.n	8002a90 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	333f      	adds	r3, #63	; 0x3f
 8002a88:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	f040 80fc 	bne.w	8002c88 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d142      	bne.n	8002b1e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	334c      	adds	r3, #76	; 0x4c
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80ed 	beq.w	8002c88 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	334c      	adds	r3, #76	; 0x4c
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	202c      	movs	r0, #44	; 0x2c
 8002ac4:	fb00 f202 	mul.w	r2, r0, r2
 8002ac8:	440a      	add	r2, r1
 8002aca:	3240      	adds	r2, #64	; 0x40
 8002acc:	8812      	ldrh	r2, [r2, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	202c      	movs	r0, #44	; 0x2c
 8002ad8:	fb00 f202 	mul.w	r2, r0, r2
 8002adc:	440a      	add	r2, r1
 8002ade:	3240      	adds	r2, #64	; 0x40
 8002ae0:	8812      	ldrh	r2, [r2, #0]
 8002ae2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80ca 	beq.w	8002c88 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3355      	adds	r3, #85	; 0x55
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	f083 0301 	eor.w	r3, r3, #1
 8002b08:	b2d8      	uxtb	r0, r3
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3355      	adds	r3, #85	; 0x55
 8002b18:	4602      	mov	r2, r0
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e0b4      	b.n	8002c88 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3355      	adds	r3, #85	; 0x55
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	f083 0301 	eor.w	r3, r3, #1
 8002b32:	b2d8      	uxtb	r0, r3
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3355      	adds	r3, #85	; 0x55
 8002b42:	4602      	mov	r2, r0
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e09f      	b.n	8002c88 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3361      	adds	r3, #97	; 0x61
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d109      	bne.n	8002b70 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3360      	adds	r3, #96	; 0x60
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e08b      	b.n	8002c88 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3361      	adds	r3, #97	; 0x61
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d109      	bne.n	8002b98 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3360      	adds	r3, #96	; 0x60
 8002b92:	2202      	movs	r2, #2
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e077      	b.n	8002c88 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3361      	adds	r3, #97	; 0x61
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d109      	bne.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3360      	adds	r3, #96	; 0x60
 8002bba:	2205      	movs	r2, #5
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	e063      	b.n	8002c88 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3361      	adds	r3, #97	; 0x61
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b06      	cmp	r3, #6
 8002bd2:	d009      	beq.n	8002be8 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3361      	adds	r3, #97	; 0x61
 8002be2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d14f      	bne.n	8002c88 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	335c      	adds	r3, #92	; 0x5c
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	202c      	movs	r0, #44	; 0x2c
 8002c00:	fb00 f303 	mul.w	r3, r0, r3
 8002c04:	440b      	add	r3, r1
 8002c06:	335c      	adds	r3, #92	; 0x5c
 8002c08:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	335c      	adds	r3, #92	; 0x5c
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d912      	bls.n	8002c44 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	335c      	adds	r3, #92	; 0x5c
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3360      	adds	r3, #96	; 0x60
 8002c3e:	2204      	movs	r2, #4
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e021      	b.n	8002c88 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3360      	adds	r3, #96	; 0x60
 8002c52:	2202      	movs	r2, #2
 8002c54:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c6c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c74:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c82:	461a      	mov	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	2302      	movs	r3, #2
 8002c98:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	b2d9      	uxtb	r1, r3
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	202c      	movs	r0, #44	; 0x2c
 8002ca4:	fb00 f303 	mul.w	r3, r0, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3360      	adds	r3, #96	; 0x60
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f004 f89f 	bl	8006df4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cb6:	bf00      	nop
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b08a      	sub	sp, #40	; 0x28
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	0c5b      	lsrs	r3, r3, #17
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cf2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d004      	beq.n	8002d04 <HCD_RXQLVL_IRQHandler+0x46>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b05      	cmp	r3, #5
 8002cfe:	f000 80a9 	beq.w	8002e54 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d02:	e0aa      	b.n	8002e5a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80a6 	beq.w	8002e58 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3344      	adds	r3, #68	; 0x44
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 809b 	beq.w	8002e58 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3350      	adds	r3, #80	; 0x50
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	441a      	add	r2, r3
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	202c      	movs	r0, #44	; 0x2c
 8002d3c:	fb00 f303 	mul.w	r3, r0, r3
 8002d40:	440b      	add	r3, r1
 8002d42:	334c      	adds	r3, #76	; 0x4c
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d87a      	bhi.n	8002e40 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3344      	adds	r3, #68	; 0x44
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	b292      	uxth	r2, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	f002 f8f1 	bl	8004f4a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3344      	adds	r3, #68	; 0x44
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	441a      	add	r2, r3
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	202c      	movs	r0, #44	; 0x2c
 8002d82:	fb00 f303 	mul.w	r3, r0, r3
 8002d86:	440b      	add	r3, r1
 8002d88:	3344      	adds	r3, #68	; 0x44
 8002d8a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3350      	adds	r3, #80	; 0x50
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	441a      	add	r2, r3
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	202c      	movs	r0, #44	; 0x2c
 8002da6:	fb00 f303 	mul.w	r3, r0, r3
 8002daa:	440b      	add	r3, r1
 8002dac:	3350      	adds	r3, #80	; 0x50
 8002dae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	0cdb      	lsrs	r3, r3, #19
 8002dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3340      	adds	r3, #64	; 0x40
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d13c      	bne.n	8002e58 <HCD_RXQLVL_IRQHandler+0x19a>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d039      	beq.n	8002e58 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dfa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e02:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e10:	461a      	mov	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	3354      	adds	r3, #84	; 0x54
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	f083 0301 	eor.w	r3, r3, #1
 8002e2a:	b2d8      	uxtb	r0, r3
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3354      	adds	r3, #84	; 0x54
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	701a      	strb	r2, [r3, #0]
      break;
 8002e3e:	e00b      	b.n	8002e58 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3360      	adds	r3, #96	; 0x60
 8002e4e:	2204      	movs	r2, #4
 8002e50:	701a      	strb	r2, [r3, #0]
      break;
 8002e52:	e001      	b.n	8002e58 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e54:	bf00      	nop
 8002e56:	e000      	b.n	8002e5a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e58:	bf00      	nop
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	3728      	adds	r7, #40	; 0x28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e8e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d10b      	bne.n	8002eb2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f003 ff89 	bl	8006dbc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d132      	bne.n	8002f22 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f043 0308 	orr.w	r3, r3, #8
 8002ec2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d126      	bne.n	8002f1c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d113      	bne.n	8002efe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002edc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ee0:	d106      	bne.n	8002ef0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 f969 	bl	80051c0 <USB_InitFSLSPClkSel>
 8002eee:	e011      	b.n	8002f14 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 f962 	bl	80051c0 <USB_InitFSLSPClkSel>
 8002efc:	e00a      	b.n	8002f14 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d106      	bne.n	8002f14 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f12:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f003 ff7b 	bl	8006e10 <HAL_HCD_PortEnabled_Callback>
 8002f1a:	e002      	b.n	8002f22 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f003 ff85 	bl	8006e2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d103      	bne.n	8002f34 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f043 0320 	orr.w	r3, r3, #32
 8002f32:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	6013      	str	r3, [r2, #0]
}
 8002f40:	bf00      	nop
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e12b      	b.n	80031b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd fd6c 	bl	8000a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2224      	movs	r2, #36	; 0x24
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002faa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fac:	f001 f9fc 	bl	80043a8 <HAL_RCC_GetPCLK1Freq>
 8002fb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4a81      	ldr	r2, [pc, #516]	; (80031bc <HAL_I2C_Init+0x274>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d807      	bhi.n	8002fcc <HAL_I2C_Init+0x84>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4a80      	ldr	r2, [pc, #512]	; (80031c0 <HAL_I2C_Init+0x278>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	bf94      	ite	ls
 8002fc4:	2301      	movls	r3, #1
 8002fc6:	2300      	movhi	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e006      	b.n	8002fda <HAL_I2C_Init+0x92>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a7d      	ldr	r2, [pc, #500]	; (80031c4 <HAL_I2C_Init+0x27c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	bf94      	ite	ls
 8002fd4:	2301      	movls	r3, #1
 8002fd6:	2300      	movhi	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0e7      	b.n	80031b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4a78      	ldr	r2, [pc, #480]	; (80031c8 <HAL_I2C_Init+0x280>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	0c9b      	lsrs	r3, r3, #18
 8002fec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a6a      	ldr	r2, [pc, #424]	; (80031bc <HAL_I2C_Init+0x274>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d802      	bhi.n	800301c <HAL_I2C_Init+0xd4>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3301      	adds	r3, #1
 800301a:	e009      	b.n	8003030 <HAL_I2C_Init+0xe8>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	4a69      	ldr	r2, [pc, #420]	; (80031cc <HAL_I2C_Init+0x284>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	3301      	adds	r3, #1
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	430b      	orrs	r3, r1
 8003036:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003042:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	495c      	ldr	r1, [pc, #368]	; (80031bc <HAL_I2C_Init+0x274>)
 800304c:	428b      	cmp	r3, r1
 800304e:	d819      	bhi.n	8003084 <HAL_I2C_Init+0x13c>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1e59      	subs	r1, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	fbb1 f3f3 	udiv	r3, r1, r3
 800305e:	1c59      	adds	r1, r3, #1
 8003060:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003064:	400b      	ands	r3, r1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_I2C_Init+0x138>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1e59      	subs	r1, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fbb1 f3f3 	udiv	r3, r1, r3
 8003078:	3301      	adds	r3, #1
 800307a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307e:	e051      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 8003080:	2304      	movs	r3, #4
 8003082:	e04f      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d111      	bne.n	80030b0 <HAL_I2C_Init+0x168>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1e58      	subs	r0, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	440b      	add	r3, r1
 800309a:	fbb0 f3f3 	udiv	r3, r0, r3
 800309e:	3301      	adds	r3, #1
 80030a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e012      	b.n	80030d6 <HAL_I2C_Init+0x18e>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e58      	subs	r0, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	0099      	lsls	r1, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Init+0x196>
 80030da:	2301      	movs	r3, #1
 80030dc:	e022      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10e      	bne.n	8003104 <HAL_I2C_Init+0x1bc>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1e58      	subs	r0, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6859      	ldr	r1, [r3, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	440b      	add	r3, r1
 80030f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003102:	e00f      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	0099      	lsls	r1, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	fbb0 f3f3 	udiv	r3, r0, r3
 800311a:	3301      	adds	r3, #1
 800311c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	6809      	ldr	r1, [r1, #0]
 8003128:	4313      	orrs	r3, r2
 800312a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003152:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6911      	ldr	r1, [r2, #16]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68d2      	ldr	r2, [r2, #12]
 800315e:	4311      	orrs	r1, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	430b      	orrs	r3, r1
 8003166:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	000186a0 	.word	0x000186a0
 80031c0:	001e847f 	.word	0x001e847f
 80031c4:	003d08ff 	.word	0x003d08ff
 80031c8:	431bde83 	.word	0x431bde83
 80031cc:	10624dd3 	.word	0x10624dd3

080031d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e128      	b.n	8003434 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a90      	ldr	r2, [pc, #576]	; (800343c <HAL_I2S_Init+0x26c>)
 80031fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7fd fc6d 	bl	8000adc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003218:	f023 030f 	bic.w	r3, r3, #15
 800321c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2202      	movs	r2, #2
 8003224:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d060      	beq.n	80032f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003236:	2310      	movs	r3, #16
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e001      	b.n	8003240 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800323c:	2320      	movs	r3, #32
 800323e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b20      	cmp	r3, #32
 8003246:	d802      	bhi.n	800324e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800324e:	2001      	movs	r0, #1
 8003250:	f001 f9a0 	bl	8004594 <HAL_RCCEx_GetPeriphCLKFreq>
 8003254:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800325e:	d125      	bne.n	80032ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d010      	beq.n	800328a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	461a      	mov	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	fbb2 f3f3 	udiv	r3, r2, r3
 8003284:	3305      	adds	r3, #5
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	e01f      	b.n	80032ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	fbb2 f2f3 	udiv	r2, r2, r3
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	3305      	adds	r3, #5
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	e00e      	b.n	80032ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	461a      	mov	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c6:	3305      	adds	r3, #5
 80032c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4a5c      	ldr	r2, [pc, #368]	; (8003440 <HAL_I2S_Init+0x270>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	08db      	lsrs	r3, r3, #3
 80032d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	e003      	b.n	80032f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032f0:	2302      	movs	r3, #2
 80032f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d902      	bls.n	8003304 <HAL_I2S_Init+0x134>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	2bff      	cmp	r3, #255	; 0xff
 8003302:	d907      	bls.n	8003314 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	f043 0210 	orr.w	r2, r3, #16
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e08f      	b.n	8003434 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	ea42 0103 	orr.w	r1, r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	430a      	orrs	r2, r1
 8003326:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003332:	f023 030f 	bic.w	r3, r3, #15
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6851      	ldr	r1, [r2, #4]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6892      	ldr	r2, [r2, #8]
 800333e:	4311      	orrs	r1, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68d2      	ldr	r2, [r2, #12]
 8003344:	4311      	orrs	r1, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6992      	ldr	r2, [r2, #24]
 800334a:	430a      	orrs	r2, r1
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003356:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d161      	bne.n	8003424 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a38      	ldr	r2, [pc, #224]	; (8003444 <HAL_I2S_Init+0x274>)
 8003364:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a37      	ldr	r2, [pc, #220]	; (8003448 <HAL_I2S_Init+0x278>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_I2S_Init+0x1a4>
 8003370:	4b36      	ldr	r3, [pc, #216]	; (800344c <HAL_I2S_Init+0x27c>)
 8003372:	e001      	b.n	8003378 <HAL_I2S_Init+0x1a8>
 8003374:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	4932      	ldr	r1, [pc, #200]	; (8003448 <HAL_I2S_Init+0x278>)
 8003380:	428a      	cmp	r2, r1
 8003382:	d101      	bne.n	8003388 <HAL_I2S_Init+0x1b8>
 8003384:	4a31      	ldr	r2, [pc, #196]	; (800344c <HAL_I2S_Init+0x27c>)
 8003386:	e001      	b.n	800338c <HAL_I2S_Init+0x1bc>
 8003388:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800338c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003390:	f023 030f 	bic.w	r3, r3, #15
 8003394:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <HAL_I2S_Init+0x278>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d101      	bne.n	80033a4 <HAL_I2S_Init+0x1d4>
 80033a0:	4b2a      	ldr	r3, [pc, #168]	; (800344c <HAL_I2S_Init+0x27c>)
 80033a2:	e001      	b.n	80033a8 <HAL_I2S_Init+0x1d8>
 80033a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a8:	2202      	movs	r2, #2
 80033aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a25      	ldr	r2, [pc, #148]	; (8003448 <HAL_I2S_Init+0x278>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <HAL_I2S_Init+0x1ea>
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <HAL_I2S_Init+0x27c>)
 80033b8:	e001      	b.n	80033be <HAL_I2S_Init+0x1ee>
 80033ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ca:	d003      	beq.n	80033d4 <HAL_I2S_Init+0x204>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d103      	bne.n	80033dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	e001      	b.n	80033e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033ea:	4313      	orrs	r3, r2
 80033ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033f4:	4313      	orrs	r3, r2
 80033f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033fe:	4313      	orrs	r3, r2
 8003400:	b29a      	uxth	r2, r3
 8003402:	897b      	ldrh	r3, [r7, #10]
 8003404:	4313      	orrs	r3, r2
 8003406:	b29b      	uxth	r3, r3
 8003408:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800340c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a0d      	ldr	r2, [pc, #52]	; (8003448 <HAL_I2S_Init+0x278>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d101      	bne.n	800341c <HAL_I2S_Init+0x24c>
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <HAL_I2S_Init+0x27c>)
 800341a:	e001      	b.n	8003420 <HAL_I2S_Init+0x250>
 800341c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003420:	897a      	ldrh	r2, [r7, #10]
 8003422:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	08003547 	.word	0x08003547
 8003440:	cccccccd 	.word	0xcccccccd
 8003444:	0800365d 	.word	0x0800365d
 8003448:	40003800 	.word	0x40003800
 800344c:	40003400 	.word	0x40003400

08003450 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	881a      	ldrh	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	1c9a      	adds	r2, r3, #2
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10e      	bne.n	80034e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ffb8 	bl	8003450 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	b292      	uxth	r2, r2
 80034fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	1c9a      	adds	r2, r3, #2
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10e      	bne.n	800353e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800352e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff ff93 	bl	8003464 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b086      	sub	sp, #24
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b04      	cmp	r3, #4
 8003560:	d13a      	bne.n	80035d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d109      	bne.n	8003580 <I2S_IRQHandler+0x3a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	d102      	bne.n	8003580 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff ffb4 	bl	80034e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d126      	bne.n	80035d8 <I2S_IRQHandler+0x92>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b20      	cmp	r3, #32
 8003596:	d11f      	bne.n	80035d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f043 0202 	orr.w	r2, r3, #2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ff50 	bl	8003478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d136      	bne.n	8003652 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d109      	bne.n	8003602 <I2S_IRQHandler+0xbc>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	2b80      	cmp	r3, #128	; 0x80
 80035fa:	d102      	bne.n	8003602 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff45 	bl	800348c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b08      	cmp	r3, #8
 800360a:	d122      	bne.n	8003652 <I2S_IRQHandler+0x10c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b20      	cmp	r3, #32
 8003618:	d11b      	bne.n	8003652 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003628:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	f043 0204 	orr.w	r2, r3, #4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff13 	bl	8003478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003652:	bf00      	nop
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4aa2      	ldr	r2, [pc, #648]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003676:	4ba2      	ldr	r3, [pc, #648]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003678:	e001      	b.n	800367e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800367a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a9b      	ldr	r2, [pc, #620]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d101      	bne.n	8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003694:	4b9a      	ldr	r3, [pc, #616]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003696:	e001      	b.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003698:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a8:	d004      	beq.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f040 8099 	bne.w	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d107      	bne.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f925 	bl	8003918 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d107      	bne.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f9c8 	bl	8003a78 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d13a      	bne.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d035      	beq.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a7e      	ldr	r2, [pc, #504]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d101      	bne.n	800370a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003706:	4b7e      	ldr	r3, [pc, #504]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003708:	e001      	b.n	800370e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800370a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4979      	ldr	r1, [pc, #484]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003716:	428b      	cmp	r3, r1
 8003718:	d101      	bne.n	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800371a:	4b79      	ldr	r3, [pc, #484]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800371c:	e001      	b.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800371e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003722:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003726:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003736:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f043 0202 	orr.w	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff fe88 	bl	8003478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b08      	cmp	r3, #8
 8003770:	f040 80be 	bne.w	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80b8 	beq.w	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800378e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a59      	ldr	r2, [pc, #356]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800379a:	4b59      	ldr	r3, [pc, #356]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800379c:	e001      	b.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800379e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4954      	ldr	r1, [pc, #336]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037aa:	428b      	cmp	r3, r1
 80037ac:	d101      	bne.n	80037b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037ae:	4b54      	ldr	r3, [pc, #336]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037b0:	e001      	b.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037bc:	2300      	movs	r3, #0
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f043 0204 	orr.w	r2, r3, #4
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff fe4a 	bl	8003478 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037e4:	e084      	b.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d107      	bne.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8be 	bl	800397c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b01      	cmp	r3, #1
 8003808:	d107      	bne.n	800381a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8fd 	bl	8003a14 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	2b40      	cmp	r3, #64	; 0x40
 8003822:	d12f      	bne.n	8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d02a      	beq.n	8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800383c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a2e      	ldr	r2, [pc, #184]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d101      	bne.n	800384c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003848:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800384a:	e001      	b.n	8003850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800384c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4929      	ldr	r1, [pc, #164]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003858:	428b      	cmp	r3, r1
 800385a:	d101      	bne.n	8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800385c:	4b28      	ldr	r3, [pc, #160]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800385e:	e001      	b.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003860:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003864:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003868:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f043 0202 	orr.w	r2, r3, #2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fdfa 	bl	8003478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b08      	cmp	r3, #8
 800388c:	d131      	bne.n	80038f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02c      	beq.n	80038f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a17      	ldr	r2, [pc, #92]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038a2:	4b17      	ldr	r3, [pc, #92]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038a4:	e001      	b.n	80038aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4912      	ldr	r1, [pc, #72]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038b2:	428b      	cmp	r3, r1
 80038b4:	d101      	bne.n	80038ba <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038b8:	e001      	b.n	80038be <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80038ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038d2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	f043 0204 	orr.w	r2, r3, #4
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fdc5 	bl	8003478 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ee:	e000      	b.n	80038f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038f0:	bf00      	nop
}
 80038f2:	bf00      	nop
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40003800 	.word	0x40003800
 8003900:	40003400 	.word	0x40003400

08003904 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	1c99      	adds	r1, r3, #2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6251      	str	r1, [r2, #36]	; 0x24
 800392a:	881a      	ldrh	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d113      	bne.n	8003972 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003958:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ffc9 	bl	8003904 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c99      	adds	r1, r3, #2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6251      	str	r1, [r2, #36]	; 0x24
 800398e:	8819      	ldrh	r1, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <I2SEx_TxISR_I2SExt+0x90>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <I2SEx_TxISR_I2SExt+0x22>
 800399a:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <I2SEx_TxISR_I2SExt+0x94>)
 800399c:	e001      	b.n	80039a2 <I2SEx_TxISR_I2SExt+0x26>
 800399e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a2:	460a      	mov	r2, r1
 80039a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d121      	bne.n	8003a02 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <I2SEx_TxISR_I2SExt+0x90>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d101      	bne.n	80039cc <I2SEx_TxISR_I2SExt+0x50>
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <I2SEx_TxISR_I2SExt+0x94>)
 80039ca:	e001      	b.n	80039d0 <I2SEx_TxISR_I2SExt+0x54>
 80039cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	490d      	ldr	r1, [pc, #52]	; (8003a0c <I2SEx_TxISR_I2SExt+0x90>)
 80039d8:	428b      	cmp	r3, r1
 80039da:	d101      	bne.n	80039e0 <I2SEx_TxISR_I2SExt+0x64>
 80039dc:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <I2SEx_TxISR_I2SExt+0x94>)
 80039de:	e001      	b.n	80039e4 <I2SEx_TxISR_I2SExt+0x68>
 80039e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d106      	bne.n	8003a02 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff81 	bl	8003904 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40003800 	.word	0x40003800
 8003a10:	40003400 	.word	0x40003400

08003a14 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68d8      	ldr	r0, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	1c99      	adds	r1, r3, #2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a2c:	b282      	uxth	r2, r0
 8003a2e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d113      	bne.n	8003a70 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a56:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff4a 	bl	8003904 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <I2SEx_RxISR_I2SExt+0x90>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <I2SEx_RxISR_I2SExt+0x16>
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <I2SEx_RxISR_I2SExt+0x94>)
 8003a8c:	e001      	b.n	8003a92 <I2SEx_RxISR_I2SExt+0x1a>
 8003a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a92:	68d8      	ldr	r0, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	1c99      	adds	r1, r3, #2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a9e:	b282      	uxth	r2, r0
 8003aa0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d121      	bne.n	8003afe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <I2SEx_RxISR_I2SExt+0x90>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d101      	bne.n	8003ac8 <I2SEx_RxISR_I2SExt+0x50>
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <I2SEx_RxISR_I2SExt+0x94>)
 8003ac6:	e001      	b.n	8003acc <I2SEx_RxISR_I2SExt+0x54>
 8003ac8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	490d      	ldr	r1, [pc, #52]	; (8003b08 <I2SEx_RxISR_I2SExt+0x90>)
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	d101      	bne.n	8003adc <I2SEx_RxISR_I2SExt+0x64>
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <I2SEx_RxISR_I2SExt+0x94>)
 8003ada:	e001      	b.n	8003ae0 <I2SEx_RxISR_I2SExt+0x68>
 8003adc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ae4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff03 	bl	8003904 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40003800 	.word	0x40003800
 8003b0c:	40003400 	.word	0x40003400

08003b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e264      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d075      	beq.n	8003c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b2e:	4ba3      	ldr	r3, [pc, #652]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d00c      	beq.n	8003b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b3a:	4ba0      	ldr	r3, [pc, #640]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d112      	bne.n	8003b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b46:	4b9d      	ldr	r3, [pc, #628]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b52:	d10b      	bne.n	8003b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b54:	4b99      	ldr	r3, [pc, #612]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d05b      	beq.n	8003c18 <HAL_RCC_OscConfig+0x108>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d157      	bne.n	8003c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e23f      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d106      	bne.n	8003b84 <HAL_RCC_OscConfig+0x74>
 8003b76:	4b91      	ldr	r3, [pc, #580]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a90      	ldr	r2, [pc, #576]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e01d      	b.n	8003bc0 <HAL_RCC_OscConfig+0xb0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x98>
 8003b8e:	4b8b      	ldr	r3, [pc, #556]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a8a      	ldr	r2, [pc, #552]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	4b88      	ldr	r3, [pc, #544]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a87      	ldr	r2, [pc, #540]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e00b      	b.n	8003bc0 <HAL_RCC_OscConfig+0xb0>
 8003ba8:	4b84      	ldr	r3, [pc, #528]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a83      	ldr	r2, [pc, #524]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	4b81      	ldr	r3, [pc, #516]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a80      	ldr	r2, [pc, #512]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fd f964 	bl	8000e94 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7fd f960 	bl	8000e94 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e204      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	4b76      	ldr	r3, [pc, #472]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0xc0>
 8003bee:	e014      	b.n	8003c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fd f950 	bl	8000e94 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fd f94c 	bl	8000e94 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e1f0      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0a:	4b6c      	ldr	r3, [pc, #432]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0xe8>
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d063      	beq.n	8003cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c26:	4b65      	ldr	r3, [pc, #404]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c32:	4b62      	ldr	r3, [pc, #392]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d11c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3e:	4b5f      	ldr	r3, [pc, #380]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d116      	bne.n	8003c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4a:	4b5c      	ldr	r3, [pc, #368]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_RCC_OscConfig+0x152>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d001      	beq.n	8003c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e1c4      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c62:	4b56      	ldr	r3, [pc, #344]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4952      	ldr	r1, [pc, #328]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c76:	e03a      	b.n	8003cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c80:	4b4f      	ldr	r3, [pc, #316]	; (8003dc0 <HAL_RCC_OscConfig+0x2b0>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c86:	f7fd f905 	bl	8000e94 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c8e:	f7fd f901 	bl	8000e94 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e1a5      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca0:	4b46      	ldr	r3, [pc, #280]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cac:	4b43      	ldr	r3, [pc, #268]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4940      	ldr	r1, [pc, #256]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]
 8003cc0:	e015      	b.n	8003cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc2:	4b3f      	ldr	r3, [pc, #252]	; (8003dc0 <HAL_RCC_OscConfig+0x2b0>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fd f8e4 	bl	8000e94 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7fd f8e0 	bl	8000e94 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e184      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d030      	beq.n	8003d5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d016      	beq.n	8003d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d02:	4b30      	ldr	r3, [pc, #192]	; (8003dc4 <HAL_RCC_OscConfig+0x2b4>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fd f8c4 	bl	8000e94 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d10:	f7fd f8c0 	bl	8000e94 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e164      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d22:	4b26      	ldr	r3, [pc, #152]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x200>
 8003d2e:	e015      	b.n	8003d5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d30:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_RCC_OscConfig+0x2b4>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d36:	f7fd f8ad 	bl	8000e94 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3e:	f7fd f8a9 	bl	8000e94 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e14d      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d50:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f0      	bne.n	8003d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a0 	beq.w	8003eaa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6e:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10f      	bne.n	8003d9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d96:	2301      	movs	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_OscConfig+0x2b8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d121      	bne.n	8003dea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <HAL_RCC_OscConfig+0x2b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a07      	ldr	r2, [pc, #28]	; (8003dc8 <HAL_RCC_OscConfig+0x2b8>)
 8003dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db2:	f7fd f86f 	bl	8000e94 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db8:	e011      	b.n	8003dde <HAL_RCC_OscConfig+0x2ce>
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	42470000 	.word	0x42470000
 8003dc4:	42470e80 	.word	0x42470e80
 8003dc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dcc:	f7fd f862 	bl	8000e94 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e106      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dde:	4b85      	ldr	r3, [pc, #532]	; (8003ff4 <HAL_RCC_OscConfig+0x4e4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d106      	bne.n	8003e00 <HAL_RCC_OscConfig+0x2f0>
 8003df2:	4b81      	ldr	r3, [pc, #516]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a80      	ldr	r2, [pc, #512]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfe:	e01c      	b.n	8003e3a <HAL_RCC_OscConfig+0x32a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	d10c      	bne.n	8003e22 <HAL_RCC_OscConfig+0x312>
 8003e08:	4b7b      	ldr	r3, [pc, #492]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	4a7a      	ldr	r2, [pc, #488]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003e0e:	f043 0304 	orr.w	r3, r3, #4
 8003e12:	6713      	str	r3, [r2, #112]	; 0x70
 8003e14:	4b78      	ldr	r3, [pc, #480]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	4a77      	ldr	r2, [pc, #476]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e20:	e00b      	b.n	8003e3a <HAL_RCC_OscConfig+0x32a>
 8003e22:	4b75      	ldr	r3, [pc, #468]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a74      	ldr	r2, [pc, #464]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2e:	4b72      	ldr	r3, [pc, #456]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	4a71      	ldr	r2, [pc, #452]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003e34:	f023 0304 	bic.w	r3, r3, #4
 8003e38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d015      	beq.n	8003e6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fd f827 	bl	8000e94 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fd f823 	bl	8000e94 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e0c5      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e60:	4b65      	ldr	r3, [pc, #404]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ee      	beq.n	8003e4a <HAL_RCC_OscConfig+0x33a>
 8003e6c:	e014      	b.n	8003e98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6e:	f7fd f811 	bl	8000e94 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fd f80d 	bl	8000e94 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0af      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8c:	4b5a      	ldr	r3, [pc, #360]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1ee      	bne.n	8003e76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d105      	bne.n	8003eaa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9e:	4b56      	ldr	r3, [pc, #344]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	4a55      	ldr	r2, [pc, #340]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 809b 	beq.w	8003fea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eb4:	4b50      	ldr	r3, [pc, #320]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d05c      	beq.n	8003f7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d141      	bne.n	8003f4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec8:	4b4c      	ldr	r3, [pc, #304]	; (8003ffc <HAL_RCC_OscConfig+0x4ec>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ece:	f7fc ffe1 	bl	8000e94 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed6:	f7fc ffdd 	bl	8000e94 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e081      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee8:	4b43      	ldr	r3, [pc, #268]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f0      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	019b      	lsls	r3, r3, #6
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	041b      	lsls	r3, r3, #16
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	061b      	lsls	r3, r3, #24
 8003f18:	4937      	ldr	r1, [pc, #220]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f1e:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <HAL_RCC_OscConfig+0x4ec>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f24:	f7fc ffb6 	bl	8000e94 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7fc ffb2 	bl	8000e94 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e056      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x41c>
 8003f4a:	e04e      	b.n	8003fea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4c:	4b2b      	ldr	r3, [pc, #172]	; (8003ffc <HAL_RCC_OscConfig+0x4ec>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f52:	f7fc ff9f 	bl	8000e94 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fc ff9b 	bl	8000e94 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e03f      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6c:	4b22      	ldr	r3, [pc, #136]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x44a>
 8003f78:	e037      	b.n	8003fea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e032      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f86:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <HAL_RCC_OscConfig+0x4e8>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d028      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d121      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d11a      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fbc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d111      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d001      	beq.n	8003fea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40007000 	.word	0x40007000
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	42470060 	.word	0x42470060

08004000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0cc      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004014:	4b68      	ldr	r3, [pc, #416]	; (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d90c      	bls.n	800403c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b65      	ldr	r3, [pc, #404]	; (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b63      	ldr	r3, [pc, #396]	; (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0b8      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004054:	4b59      	ldr	r3, [pc, #356]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a58      	ldr	r2, [pc, #352]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800405e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800406c:	4b53      	ldr	r3, [pc, #332]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4a52      	ldr	r2, [pc, #328]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b50      	ldr	r3, [pc, #320]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	494d      	ldr	r1, [pc, #308]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d044      	beq.n	8004120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b47      	ldr	r3, [pc, #284]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d119      	bne.n	80040de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e07f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d003      	beq.n	80040be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040be:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e06f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ce:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e067      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040de:	4b37      	ldr	r3, [pc, #220]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f023 0203 	bic.w	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4934      	ldr	r1, [pc, #208]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040f0:	f7fc fed0 	bl	8000e94 <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	e00a      	b.n	800410e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f8:	f7fc fecc 	bl	8000e94 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	; 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e04f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410e:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 020c 	and.w	r2, r3, #12
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	429a      	cmp	r2, r3
 800411e:	d1eb      	bne.n	80040f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004120:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d20c      	bcs.n	8004148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e032      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4916      	ldr	r1, [pc, #88]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	490e      	ldr	r1, [pc, #56]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004186:	f000 f821 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 800418a:	4602      	mov	r2, r0
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	490a      	ldr	r1, [pc, #40]	; (80041c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004198:	5ccb      	ldrb	r3, [r1, r3]
 800419a:	fa22 f303 	lsr.w	r3, r2, r3
 800419e:	4a09      	ldr	r2, [pc, #36]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fc fe30 	bl	8000e0c <HAL_InitTick>

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023c00 	.word	0x40023c00
 80041bc:	40023800 	.word	0x40023800
 80041c0:	080073c4 	.word	0x080073c4
 80041c4:	20000000 	.word	0x20000000
 80041c8:	20000004 	.word	0x20000004

080041cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	607b      	str	r3, [r7, #4]
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	2300      	movs	r3, #0
 80041de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041e4:	4b67      	ldr	r3, [pc, #412]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 030c 	and.w	r3, r3, #12
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d00d      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x40>
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	f200 80bd 	bhi.w	8004370 <HAL_RCC_GetSysClockFreq+0x1a4>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x34>
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d003      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x3a>
 80041fe:	e0b7      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004200:	4b61      	ldr	r3, [pc, #388]	; (8004388 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004202:	60bb      	str	r3, [r7, #8]
       break;
 8004204:	e0b7      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004206:	4b61      	ldr	r3, [pc, #388]	; (800438c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004208:	60bb      	str	r3, [r7, #8]
      break;
 800420a:	e0b4      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800420c:	4b5d      	ldr	r3, [pc, #372]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004214:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004216:	4b5b      	ldr	r3, [pc, #364]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d04d      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004222:	4b58      	ldr	r3, [pc, #352]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	461a      	mov	r2, r3
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	ea02 0800 	and.w	r8, r2, r0
 800423a:	ea03 0901 	and.w	r9, r3, r1
 800423e:	4640      	mov	r0, r8
 8004240:	4649      	mov	r1, r9
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	014b      	lsls	r3, r1, #5
 800424c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004250:	0142      	lsls	r2, r0, #5
 8004252:	4610      	mov	r0, r2
 8004254:	4619      	mov	r1, r3
 8004256:	ebb0 0008 	subs.w	r0, r0, r8
 800425a:	eb61 0109 	sbc.w	r1, r1, r9
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	018b      	lsls	r3, r1, #6
 8004268:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800426c:	0182      	lsls	r2, r0, #6
 800426e:	1a12      	subs	r2, r2, r0
 8004270:	eb63 0301 	sbc.w	r3, r3, r1
 8004274:	f04f 0000 	mov.w	r0, #0
 8004278:	f04f 0100 	mov.w	r1, #0
 800427c:	00d9      	lsls	r1, r3, #3
 800427e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004282:	00d0      	lsls	r0, r2, #3
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	eb12 0208 	adds.w	r2, r2, r8
 800428c:	eb43 0309 	adc.w	r3, r3, r9
 8004290:	f04f 0000 	mov.w	r0, #0
 8004294:	f04f 0100 	mov.w	r1, #0
 8004298:	0259      	lsls	r1, r3, #9
 800429a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800429e:	0250      	lsls	r0, r2, #9
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4610      	mov	r0, r2
 80042a6:	4619      	mov	r1, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	f7fb ff8a 	bl	80001c8 <__aeabi_uldivmod>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4613      	mov	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	e04a      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	099b      	lsrs	r3, r3, #6
 80042c4:	461a      	mov	r2, r3
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	ea02 0400 	and.w	r4, r2, r0
 80042d6:	ea03 0501 	and.w	r5, r3, r1
 80042da:	4620      	mov	r0, r4
 80042dc:	4629      	mov	r1, r5
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	014b      	lsls	r3, r1, #5
 80042e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042ec:	0142      	lsls	r2, r0, #5
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	1b00      	subs	r0, r0, r4
 80042f4:	eb61 0105 	sbc.w	r1, r1, r5
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	018b      	lsls	r3, r1, #6
 8004302:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004306:	0182      	lsls	r2, r0, #6
 8004308:	1a12      	subs	r2, r2, r0
 800430a:	eb63 0301 	sbc.w	r3, r3, r1
 800430e:	f04f 0000 	mov.w	r0, #0
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	00d9      	lsls	r1, r3, #3
 8004318:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800431c:	00d0      	lsls	r0, r2, #3
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	1912      	adds	r2, r2, r4
 8004324:	eb45 0303 	adc.w	r3, r5, r3
 8004328:	f04f 0000 	mov.w	r0, #0
 800432c:	f04f 0100 	mov.w	r1, #0
 8004330:	0299      	lsls	r1, r3, #10
 8004332:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004336:	0290      	lsls	r0, r2, #10
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	461a      	mov	r2, r3
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	f7fb ff3e 	bl	80001c8 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4613      	mov	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	3301      	adds	r3, #1
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	60bb      	str	r3, [r7, #8]
      break;
 800436e:	e002      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004372:	60bb      	str	r3, [r7, #8]
      break;
 8004374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004376:	68bb      	ldr	r3, [r7, #8]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800
 8004388:	00f42400 	.word	0x00f42400
 800438c:	007a1200 	.word	0x007a1200

08004390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004394:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004396:	681b      	ldr	r3, [r3, #0]
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20000000 	.word	0x20000000

080043a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043ac:	f7ff fff0 	bl	8004390 <HAL_RCC_GetHCLKFreq>
 80043b0:	4602      	mov	r2, r0
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	0a9b      	lsrs	r3, r3, #10
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	4903      	ldr	r1, [pc, #12]	; (80043cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043be:	5ccb      	ldrb	r3, [r1, r3]
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40023800 	.word	0x40023800
 80043cc:	080073d4 	.word	0x080073d4

080043d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d105      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d035      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043f8:	4b62      	ldr	r3, [pc, #392]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043fe:	f7fc fd49 	bl	8000e94 <HAL_GetTick>
 8004402:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004406:	f7fc fd45 	bl	8000e94 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e0b0      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004418:	4b5b      	ldr	r3, [pc, #364]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f0      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	019a      	lsls	r2, r3, #6
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	071b      	lsls	r3, r3, #28
 8004430:	4955      	ldr	r1, [pc, #340]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004438:	4b52      	ldr	r3, [pc, #328]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800443e:	f7fc fd29 	bl	8000e94 <HAL_GetTick>
 8004442:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004446:	f7fc fd25 	bl	8000e94 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e090      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004458:	4b4b      	ldr	r3, [pc, #300]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8083 	beq.w	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	4b44      	ldr	r3, [pc, #272]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	4a43      	ldr	r2, [pc, #268]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004480:	6413      	str	r3, [r2, #64]	; 0x40
 8004482:	4b41      	ldr	r3, [pc, #260]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800448e:	4b3f      	ldr	r3, [pc, #252]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a3e      	ldr	r2, [pc, #248]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004498:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800449a:	f7fc fcfb 	bl	8000e94 <HAL_GetTick>
 800449e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044a2:	f7fc fcf7 	bl	8000e94 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e062      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044b4:	4b35      	ldr	r3, [pc, #212]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044c0:	4b31      	ldr	r3, [pc, #196]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d02f      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d028      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044de:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044e8:	4b29      	ldr	r3, [pc, #164]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044ee:	4b28      	ldr	r3, [pc, #160]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044f4:	4a24      	ldr	r2, [pc, #144]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044fa:	4b23      	ldr	r3, [pc, #140]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b01      	cmp	r3, #1
 8004504:	d114      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004506:	f7fc fcc5 	bl	8000e94 <HAL_GetTick>
 800450a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	e00a      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7fc fcc1 	bl	8000e94 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	; 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e02a      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004524:	4b18      	ldr	r3, [pc, #96]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0ee      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800453c:	d10d      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800453e:	4b12      	ldr	r3, [pc, #72]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800454e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004552:	490d      	ldr	r1, [pc, #52]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004554:	4313      	orrs	r3, r2
 8004556:	608b      	str	r3, [r1, #8]
 8004558:	e005      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004560:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004564:	6093      	str	r3, [r2, #8]
 8004566:	4b08      	ldr	r3, [pc, #32]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004568:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004572:	4905      	ldr	r1, [pc, #20]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004574:	4313      	orrs	r3, r2
 8004576:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	42470068 	.word	0x42470068
 8004588:	40023800 	.word	0x40023800
 800458c:	40007000 	.word	0x40007000
 8004590:	42470e40 	.word	0x42470e40

08004594 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d13e      	bne.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045b2:	4b23      	ldr	r3, [pc, #140]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d12f      	bne.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045c8:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045ca:	617b      	str	r3, [r7, #20]
          break;
 80045cc:	e02f      	b.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045ce:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045da:	d108      	bne.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045dc:	4b18      	ldr	r3, [pc, #96]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e4:	4a18      	ldr	r2, [pc, #96]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80045e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	e007      	b.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045ee:	4b14      	ldr	r3, [pc, #80]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f6:	4a15      	ldr	r2, [pc, #84]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045fe:	4b10      	ldr	r3, [pc, #64]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	fb02 f303 	mul.w	r3, r2, r3
 8004610:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004612:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004618:	0f1b      	lsrs	r3, r3, #28
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	617b      	str	r3, [r7, #20]
          break;
 8004626:	e002      	b.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
          break;
 800462c:	bf00      	nop
        }
      }
      break;
 800462e:	bf00      	nop
    }
  }
  return frequency;
 8004630:	697b      	ldr	r3, [r7, #20]
}
 8004632:	4618      	mov	r0, r3
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800
 8004644:	00bb8000 	.word	0x00bb8000
 8004648:	007a1200 	.word	0x007a1200
 800464c:	00f42400 	.word	0x00f42400

08004650 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e07b      	b.n	800475a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2b00      	cmp	r3, #0
 8004668:	d108      	bne.n	800467c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004672:	d009      	beq.n	8004688 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	61da      	str	r2, [r3, #28]
 800467a:	e005      	b.n	8004688 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fc fa82 	bl	8000bac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470c:	ea42 0103 	orr.w	r1, r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	0c1b      	lsrs	r3, r3, #16
 8004726:	f003 0104 	and.w	r1, r3, #4
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	f003 0210 	and.w	r2, r3, #16
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004748:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e041      	b.n	80047f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d106      	bne.n	800478e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fc fa57 	bl	8000c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3304      	adds	r3, #4
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f000 f8f1 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIM_ConfigClockSource+0x18>
 8004814:	2302      	movs	r3, #2
 8004816:	e0b3      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x180>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004836:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800483e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004850:	d03e      	beq.n	80048d0 <HAL_TIM_ConfigClockSource+0xd0>
 8004852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004856:	f200 8087 	bhi.w	8004968 <HAL_TIM_ConfigClockSource+0x168>
 800485a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485e:	f000 8085 	beq.w	800496c <HAL_TIM_ConfigClockSource+0x16c>
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004866:	d87f      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x168>
 8004868:	2b70      	cmp	r3, #112	; 0x70
 800486a:	d01a      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0xa2>
 800486c:	2b70      	cmp	r3, #112	; 0x70
 800486e:	d87b      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x168>
 8004870:	2b60      	cmp	r3, #96	; 0x60
 8004872:	d050      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0x116>
 8004874:	2b60      	cmp	r3, #96	; 0x60
 8004876:	d877      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x168>
 8004878:	2b50      	cmp	r3, #80	; 0x50
 800487a:	d03c      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0xf6>
 800487c:	2b50      	cmp	r3, #80	; 0x50
 800487e:	d873      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x168>
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	d058      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0x136>
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	d86f      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x168>
 8004888:	2b30      	cmp	r3, #48	; 0x30
 800488a:	d064      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x156>
 800488c:	2b30      	cmp	r3, #48	; 0x30
 800488e:	d86b      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x168>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d060      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x156>
 8004894:	2b20      	cmp	r3, #32
 8004896:	d867      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x168>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d05c      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x156>
 800489c:	2b10      	cmp	r3, #16
 800489e:	d05a      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80048a0:	e062      	b.n	8004968 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6899      	ldr	r1, [r3, #8]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f000 f983 	bl	8004bbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	609a      	str	r2, [r3, #8]
      break;
 80048ce:	e04e      	b.n	800496e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	6899      	ldr	r1, [r3, #8]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f000 f96c 	bl	8004bbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048f2:	609a      	str	r2, [r3, #8]
      break;
 80048f4:	e03b      	b.n	800496e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6859      	ldr	r1, [r3, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	461a      	mov	r2, r3
 8004904:	f000 f8e0 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2150      	movs	r1, #80	; 0x50
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f939 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 8004914:	e02b      	b.n	800496e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6859      	ldr	r1, [r3, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	461a      	mov	r2, r3
 8004924:	f000 f8ff 	bl	8004b26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2160      	movs	r1, #96	; 0x60
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f929 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 8004934:	e01b      	b.n	800496e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6859      	ldr	r1, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	461a      	mov	r2, r3
 8004944:	f000 f8c0 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2140      	movs	r1, #64	; 0x40
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f919 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 8004954:	e00b      	b.n	800496e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f000 f910 	bl	8004b86 <TIM_ITRx_SetConfig>
        break;
 8004966:	e002      	b.n	800496e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004968:	bf00      	nop
 800496a:	e000      	b.n	800496e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800496c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a40      	ldr	r2, [pc, #256]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3d      	ldr	r2, [pc, #244]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3c      	ldr	r2, [pc, #240]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3b      	ldr	r2, [pc, #236]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3a      	ldr	r2, [pc, #232]	; (8004aac <TIM_Base_SetConfig+0x124>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e8:	d027      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2c      	ldr	r2, [pc, #176]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d023      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2a      	ldr	r2, [pc, #168]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a29      	ldr	r2, [pc, #164]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d017      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a28      	ldr	r2, [pc, #160]	; (8004ab0 <TIM_Base_SetConfig+0x128>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a27      	ldr	r2, [pc, #156]	; (8004ab4 <TIM_Base_SetConfig+0x12c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a26      	ldr	r2, [pc, #152]	; (8004ab8 <TIM_Base_SetConfig+0x130>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a25      	ldr	r2, [pc, #148]	; (8004abc <TIM_Base_SetConfig+0x134>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <TIM_Base_SetConfig+0x138>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <TIM_Base_SetConfig+0x13c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0xf8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800
 8004abc:	40001800 	.word	0x40001800
 8004ac0:	40001c00 	.word	0x40001c00
 8004ac4:	40002000 	.word	0x40002000

08004ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f023 0201 	bic.w	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 030a 	bic.w	r3, r3, #10
 8004b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b087      	sub	sp, #28
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f023 0210 	bic.w	r2, r3, #16
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	031b      	lsls	r3, r3, #12
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	621a      	str	r2, [r3, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f043 0307 	orr.w	r3, r3, #7
 8004ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	609a      	str	r2, [r3, #8]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	021a      	lsls	r2, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	609a      	str	r2, [r3, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e05a      	b.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a21      	ldr	r2, [pc, #132]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d022      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c60:	d01d      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d018      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00e      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a17      	ldr	r2, [pc, #92]	; (8004cec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40010400 	.word	0x40010400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40001800 	.word	0x40001800

08004cf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	f107 001c 	add.w	r0, r7, #28
 8004d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d122      	bne.n	8004d52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d105      	bne.n	8004d46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f94a 	bl	8004fe0 <USB_CoreReset>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	73fb      	strb	r3, [r7, #15]
 8004d50:	e01a      	b.n	8004d88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f93e 	bl	8004fe0 <USB_CoreReset>
 8004d64:	4603      	mov	r3, r0
 8004d66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
 8004d7a:	e005      	b.n	8004d88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10b      	bne.n	8004da6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f043 0206 	orr.w	r2, r3, #6
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f043 0220 	orr.w	r2, r3, #32
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004db2:	b004      	add	sp, #16
 8004db4:	4770      	bx	lr

08004db6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f043 0201 	orr.w	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f023 0201 	bic.w	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d106      	bne.n	8004e26 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	60da      	str	r2, [r3, #12]
 8004e24:	e00b      	b.n	8004e3e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	60da      	str	r2, [r3, #12]
 8004e38:	e001      	b.n	8004e3e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e003      	b.n	8004e46 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004e3e:	2032      	movs	r0, #50	; 0x32
 8004e40:	f7fc f834 	bl	8000eac <HAL_Delay>

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	019b      	lsls	r3, r3, #6
 8004e62:	f043 0220 	orr.w	r2, r3, #32
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4a09      	ldr	r2, [pc, #36]	; (8004e98 <USB_FlushTxFifo+0x48>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d901      	bls.n	8004e7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e006      	b.n	8004e8a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d0f0      	beq.n	8004e6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	00030d40 	.word	0x00030d40

08004e9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2210      	movs	r2, #16
 8004eac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4a09      	ldr	r2, [pc, #36]	; (8004edc <USB_FlushRxFifo+0x40>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d901      	bls.n	8004ec0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e006      	b.n	8004ece <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b10      	cmp	r3, #16
 8004eca:	d0f0      	beq.n	8004eae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	00030d40 	.word	0x00030d40

08004ee0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b089      	sub	sp, #36	; 0x24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	4611      	mov	r1, r2
 8004eec:	461a      	mov	r2, r3
 8004eee:	460b      	mov	r3, r1
 8004ef0:	71fb      	strb	r3, [r7, #7]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004efe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d11a      	bne.n	8004f3c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f06:	88bb      	ldrh	r3, [r7, #4]
 8004f08:	3303      	adds	r3, #3
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	e00f      	b.n	8004f34 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	031a      	lsls	r2, r3, #12
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f20:	461a      	mov	r2, r3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	3301      	adds	r3, #1
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d3eb      	bcc.n	8004f14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3724      	adds	r7, #36	; 0x24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b089      	sub	sp, #36	; 0x24
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	4613      	mov	r3, r2
 8004f56:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	3303      	adds	r3, #3
 8004f64:	089b      	lsrs	r3, r3, #2
 8004f66:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	e00b      	b.n	8004f86 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	3301      	adds	r3, #1
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d3ef      	bcc.n	8004f6e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004f8e:	69fb      	ldr	r3, [r7, #28]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3724      	adds	r7, #36	; 0x24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0301 	and.w	r3, r3, #1
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a13      	ldr	r2, [pc, #76]	; (8005044 <USB_CoreReset+0x64>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e01b      	b.n	8005036 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	daf2      	bge.n	8004fec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f043 0201 	orr.w	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3301      	adds	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4a09      	ldr	r2, [pc, #36]	; (8005044 <USB_CoreReset+0x64>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d901      	bls.n	8005028 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e006      	b.n	8005036 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b01      	cmp	r3, #1
 8005032:	d0f0      	beq.n	8005016 <USB_CoreReset+0x36>

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	00030d40 	.word	0x00030d40

08005048 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005048:	b084      	sub	sp, #16
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	f107 001c 	add.w	r0, r7, #28
 8005056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005064:	461a      	mov	r2, r3
 8005066:	2300      	movs	r3, #0
 8005068:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d018      	beq.n	80050cc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	2b01      	cmp	r3, #1
 800509e:	d10a      	bne.n	80050b6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050ae:	f043 0304 	orr.w	r3, r3, #4
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	e014      	b.n	80050e0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050c4:	f023 0304 	bic.w	r3, r3, #4
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	e009      	b.n	80050e0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050da:	f023 0304 	bic.w	r3, r3, #4
 80050de:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80050e0:	2110      	movs	r1, #16
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff feb4 	bl	8004e50 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff fed7 	bl	8004e9c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e015      	b.n	8005120 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005100:	461a      	mov	r2, r3
 8005102:	f04f 33ff 	mov.w	r3, #4294967295
 8005106:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4413      	add	r3, r2
 8005110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005114:	461a      	mov	r2, r3
 8005116:	2300      	movs	r3, #0
 8005118:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3301      	adds	r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	429a      	cmp	r2, r3
 8005126:	d3e5      	bcc.n	80050f4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005128:	2101      	movs	r1, #1
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f882 	bl	8005234 <USB_DriveVbus>

  HAL_Delay(200U);
 8005130:	20c8      	movs	r0, #200	; 0xc8
 8005132:	f7fb febb 	bl	8000eac <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f04f 32ff 	mov.w	r2, #4294967295
 8005142:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00b      	beq.n	8005168 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005156:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a14      	ldr	r2, [pc, #80]	; (80051ac <USB_HostInit+0x164>)
 800515c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <USB_HostInit+0x168>)
 8005162:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005166:	e009      	b.n	800517c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2280      	movs	r2, #128	; 0x80
 800516c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a10      	ldr	r2, [pc, #64]	; (80051b4 <USB_HostInit+0x16c>)
 8005172:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <USB_HostInit+0x170>)
 8005178:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d105      	bne.n	800518e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f043 0210 	orr.w	r2, r3, #16
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <USB_HostInit+0x174>)
 8005194:	4313      	orrs	r3, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051a6:	b004      	add	sp, #16
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	01000200 	.word	0x01000200
 80051b0:	00e00300 	.word	0x00e00300
 80051b4:	00600080 	.word	0x00600080
 80051b8:	004000e0 	.word	0x004000e0
 80051bc:	a3200008 	.word	0xa3200008

080051c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051de:	f023 0303 	bic.w	r3, r3, #3
 80051e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051f8:	4313      	orrs	r3, r2
 80051fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d107      	bne.n	8005212 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005208:	461a      	mov	r2, r3
 800520a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800520e:	6053      	str	r3, [r2, #4]
 8005210:	e009      	b.n	8005226 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d106      	bne.n	8005226 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521e:	461a      	mov	r2, r3
 8005220:	f241 7370 	movw	r3, #6000	; 0x1770
 8005224:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005258:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <USB_DriveVbus+0x44>
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d106      	bne.n	8005278 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005272:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005276:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800527e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005282:	d109      	bne.n	8005298 <USB_DriveVbus+0x64>
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005296:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b085      	sub	sp, #20
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	0c5b      	lsrs	r3, r3, #17
 80052c4:	f003 0303 	and.w	r3, r3, #3
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	b29b      	uxth	r3, r3
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
	...

080052f8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	4608      	mov	r0, r1
 8005302:	4611      	mov	r1, r2
 8005304:	461a      	mov	r2, r3
 8005306:	4603      	mov	r3, r0
 8005308:	70fb      	strb	r3, [r7, #3]
 800530a:	460b      	mov	r3, r1
 800530c:	70bb      	strb	r3, [r7, #2]
 800530e:	4613      	mov	r3, r2
 8005310:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4413      	add	r3, r2
 8005322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005326:	461a      	mov	r2, r3
 8005328:	f04f 33ff 	mov.w	r3, #4294967295
 800532c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800532e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005332:	2b03      	cmp	r3, #3
 8005334:	d87e      	bhi.n	8005434 <USB_HC_Init+0x13c>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <USB_HC_Init+0x44>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	0800534d 	.word	0x0800534d
 8005340:	080053f7 	.word	0x080053f7
 8005344:	0800534d 	.word	0x0800534d
 8005348:	080053b9 	.word	0x080053b9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4413      	add	r3, r2
 8005354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005358:	461a      	mov	r2, r3
 800535a:	f240 439d 	movw	r3, #1181	; 0x49d
 800535e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005360:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005364:	2b00      	cmp	r3, #0
 8005366:	da10      	bge.n	800538a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4413      	add	r3, r2
 8005370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	440a      	add	r2, r1
 800537e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005386:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005388:	e057      	b.n	800543a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d051      	beq.n	800543a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005396:	78fb      	ldrb	r3, [r7, #3]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	4413      	add	r3, r2
 800539e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	78fa      	ldrb	r2, [r7, #3]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80053b4:	60d3      	str	r3, [r2, #12]
      break;
 80053b6:	e040      	b.n	800543a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c4:	461a      	mov	r2, r3
 80053c6:	f240 639d 	movw	r3, #1693	; 0x69d
 80053ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80053cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	da34      	bge.n	800543e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	0151      	lsls	r1, r2, #5
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	440a      	add	r2, r1
 80053ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80053f4:	e023      	b.n	800543e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053f6:	78fb      	ldrb	r3, [r7, #3]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005402:	461a      	mov	r2, r3
 8005404:	f240 2325 	movw	r3, #549	; 0x225
 8005408:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800540a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800540e:	2b00      	cmp	r3, #0
 8005410:	da17      	bge.n	8005442 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005412:	78fb      	ldrb	r3, [r7, #3]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4413      	add	r3, r2
 800541a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	440a      	add	r2, r1
 8005428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800542c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005430:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005432:	e006      	b.n	8005442 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	77fb      	strb	r3, [r7, #31]
      break;
 8005438:	e004      	b.n	8005444 <USB_HC_Init+0x14c>
      break;
 800543a:	bf00      	nop
 800543c:	e002      	b.n	8005444 <USB_HC_Init+0x14c>
      break;
 800543e:	bf00      	nop
 8005440:	e000      	b.n	8005444 <USB_HC_Init+0x14c>
      break;
 8005442:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544a:	699a      	ldr	r2, [r3, #24]
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	2101      	movs	r1, #1
 8005454:	fa01 f303 	lsl.w	r3, r1, r3
 8005458:	6939      	ldr	r1, [r7, #16]
 800545a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800545e:	4313      	orrs	r3, r2
 8005460:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800546e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005472:	2b00      	cmp	r3, #0
 8005474:	da03      	bge.n	800547e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	e001      	b.n	8005482 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff ff0f 	bl	80052a6 <USB_GetHostSpeed>
 8005488:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800548a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800548e:	2b02      	cmp	r3, #2
 8005490:	d106      	bne.n	80054a0 <USB_HC_Init+0x1a8>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d003      	beq.n	80054a0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e001      	b.n	80054a4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054a4:	787b      	ldrb	r3, [r7, #1]
 80054a6:	059b      	lsls	r3, r3, #22
 80054a8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054ac:	78bb      	ldrb	r3, [r7, #2]
 80054ae:	02db      	lsls	r3, r3, #11
 80054b0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054b4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80054ba:	049b      	lsls	r3, r3, #18
 80054bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80054c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	0159      	lsls	r1, r3, #5
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	440b      	add	r3, r1
 80054d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054da:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054e0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80054e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d10f      	bne.n	800550a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	78fa      	ldrb	r2, [r7, #3]
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005504:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005508:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800550a:	7ffb      	ldrb	r3, [r7, #31]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3720      	adds	r7, #32
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08c      	sub	sp, #48	; 0x30
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	4613      	mov	r3, r2
 8005520:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	785b      	ldrb	r3, [r3, #1]
 800552a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800552c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005530:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553a:	2b00      	cmp	r3, #0
 800553c:	d02d      	beq.n	800559a <USB_HC_StartXfer+0x86>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	791b      	ldrb	r3, [r3, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d129      	bne.n	800559a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d117      	bne.n	800557c <USB_HC_StartXfer+0x68>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	79db      	ldrb	r3, [r3, #7]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <USB_HC_StartXfer+0x48>
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	79db      	ldrb	r3, [r3, #7]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d10f      	bne.n	800557c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	6a3a      	ldr	r2, [r7, #32]
 8005570:	440a      	add	r2, r1
 8005572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10b      	bne.n	800559a <USB_HC_StartXfer+0x86>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	795b      	ldrb	r3, [r3, #5]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	4619      	mov	r1, r3
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 fa2f 	bl	80059f4 <USB_DoPing>
      return HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	e0f8      	b.n	800578c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d018      	beq.n	80055d4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	8912      	ldrh	r2, [r2, #8]
 80055aa:	4413      	add	r3, r2
 80055ac:	3b01      	subs	r3, #1
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	8912      	ldrh	r2, [r2, #8]
 80055b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80055b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80055ba:	8b7b      	ldrh	r3, [r7, #26]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d90b      	bls.n	80055d8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80055c0:	8b7b      	ldrh	r3, [r7, #26]
 80055c2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80055c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	8912      	ldrh	r2, [r2, #8]
 80055ca:	fb02 f203 	mul.w	r2, r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	611a      	str	r2, [r3, #16]
 80055d2:	e001      	b.n	80055d8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80055d4:	2301      	movs	r3, #1
 80055d6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	78db      	ldrb	r3, [r3, #3]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80055e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	8912      	ldrh	r2, [r2, #8]
 80055e6:	fb02 f203 	mul.w	r2, r2, r3
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	611a      	str	r2, [r3, #16]
 80055ee:	e003      	b.n	80055f8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005600:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005602:	04d9      	lsls	r1, r3, #19
 8005604:	4b63      	ldr	r3, [pc, #396]	; (8005794 <USB_HC_StartXfer+0x280>)
 8005606:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005608:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	7a9b      	ldrb	r3, [r3, #10]
 800560e:	075b      	lsls	r3, r3, #29
 8005610:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005614:	69f9      	ldr	r1, [r7, #28]
 8005616:	0148      	lsls	r0, r1, #5
 8005618:	6a39      	ldr	r1, [r7, #32]
 800561a:	4401      	add	r1, r0
 800561c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005620:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005622:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	68d9      	ldr	r1, [r3, #12]
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563a:	460a      	mov	r2, r1
 800563c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	bf0c      	ite	eq
 800564e:	2301      	moveq	r3, #1
 8005650:	2300      	movne	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	6a3a      	ldr	r2, [r7, #32]
 800566a:	440a      	add	r2, r1
 800566c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005670:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005674:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	4413      	add	r3, r2
 800567e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	7e7b      	ldrb	r3, [r7, #25]
 8005686:	075b      	lsls	r3, r3, #29
 8005688:	69f9      	ldr	r1, [r7, #28]
 800568a:	0148      	lsls	r0, r1, #5
 800568c:	6a39      	ldr	r1, [r7, #32]
 800568e:	4401      	add	r1, r0
 8005690:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005694:	4313      	orrs	r3, r2
 8005696:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056ae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	78db      	ldrb	r3, [r3, #3]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	e003      	b.n	80056ca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056c8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056d0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056de:	461a      	mov	r2, r3
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e04e      	b.n	800578c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	78db      	ldrb	r3, [r3, #3]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d149      	bne.n	800578a <USB_HC_StartXfer+0x276>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d045      	beq.n	800578a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	79db      	ldrb	r3, [r3, #7]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d830      	bhi.n	8005768 <USB_HC_StartXfer+0x254>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <USB_HC_StartXfer+0x1f8>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	0800571d 	.word	0x0800571d
 8005710:	08005741 	.word	0x08005741
 8005714:	0800571d 	.word	0x0800571d
 8005718:	08005741 	.word	0x08005741
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	3303      	adds	r3, #3
 8005722:	089b      	lsrs	r3, r3, #2
 8005724:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005726:	8afa      	ldrh	r2, [r7, #22]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	b29b      	uxth	r3, r3
 800572e:	429a      	cmp	r2, r3
 8005730:	d91c      	bls.n	800576c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f043 0220 	orr.w	r2, r3, #32
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	619a      	str	r2, [r3, #24]
        }
        break;
 800573e:	e015      	b.n	800576c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	3303      	adds	r3, #3
 8005746:	089b      	lsrs	r3, r3, #2
 8005748:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800574a:	8afa      	ldrh	r2, [r7, #22]
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	b29b      	uxth	r3, r3
 8005756:	429a      	cmp	r2, r3
 8005758:	d90a      	bls.n	8005770 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	619a      	str	r2, [r3, #24]
        }
        break;
 8005766:	e003      	b.n	8005770 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005768:	bf00      	nop
 800576a:	e002      	b.n	8005772 <USB_HC_StartXfer+0x25e>
        break;
 800576c:	bf00      	nop
 800576e:	e000      	b.n	8005772 <USB_HC_StartXfer+0x25e>
        break;
 8005770:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	68d9      	ldr	r1, [r3, #12]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	785a      	ldrb	r2, [r3, #1]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	b29b      	uxth	r3, r3
 8005780:	2000      	movs	r0, #0
 8005782:	9000      	str	r0, [sp, #0]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f7ff fbab 	bl	8004ee0 <USB_WritePacket>
  }

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3728      	adds	r7, #40	; 0x28
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	1ff80000 	.word	0x1ff80000

08005798 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	b29b      	uxth	r3, r3
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b089      	sub	sp, #36	; 0x24
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	460b      	mov	r3, r1
 80057c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	0c9b      	lsrs	r3, r3, #18
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	0fdb      	lsrs	r3, r3, #31
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b20      	cmp	r3, #32
 8005808:	d104      	bne.n	8005814 <USB_HC_Halt+0x5a>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	e0e8      	b.n	80059e6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <USB_HC_Halt+0x66>
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b02      	cmp	r3, #2
 800581e:	d173      	bne.n	8005908 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	4413      	add	r3, r2
 8005828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	440a      	add	r2, r1
 8005836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800583a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800583e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	f040 80cb 	bne.w	80059e4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d143      	bne.n	80058e2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	4413      	add	r3, r2
 8005862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	440a      	add	r2, r1
 8005870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005878:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	4413      	add	r3, r2
 8005882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	440a      	add	r2, r1
 8005890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005898:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058b8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	3301      	adds	r3, #1
 80058be:	61fb      	str	r3, [r7, #28]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058c6:	d81d      	bhi.n	8005904 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058de:	d0ec      	beq.n	80058ba <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058e0:	e080      	b.n	80059e4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005900:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005902:	e06f      	b.n	80059e4 <USB_HC_Halt+0x22a>
            break;
 8005904:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005906:	e06d      	b.n	80059e4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	4413      	add	r3, r2
 8005910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	440a      	add	r2, r1
 800591e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005922:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005926:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d143      	bne.n	80059c0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	4413      	add	r3, r2
 8005940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	440a      	add	r2, r1
 800594e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005952:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005956:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	4413      	add	r3, r2
 8005960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	440a      	add	r2, r1
 800596e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005972:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005976:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	4413      	add	r3, r2
 8005980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	440a      	add	r2, r1
 800598e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005992:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005996:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	3301      	adds	r3, #1
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059a4:	d81d      	bhi.n	80059e2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059bc:	d0ec      	beq.n	8005998 <USB_HC_Halt+0x1de>
 80059be:	e011      	b.n	80059e4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	e000      	b.n	80059e4 <USB_HC_Halt+0x22a>
          break;
 80059e2:	bf00      	nop
    }
  }

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3724      	adds	r7, #36	; 0x24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
	...

080059f4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	04da      	lsls	r2, r3, #19
 8005a10:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <USB_DoPing+0x74>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a24:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a3c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a44:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a52:	461a      	mov	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	1ff80000 	.word	0x1ff80000

08005a6c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff f9ab 	bl	8004dd8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005a82:	2110      	movs	r1, #16
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff f9e3 	bl	8004e50 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fa06 	bl	8004e9c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005a90:	2300      	movs	r3, #0
 8005a92:	613b      	str	r3, [r7, #16]
 8005a94:	e01f      	b.n	8005ad6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ab4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005abc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aca:	461a      	mov	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	613b      	str	r3, [r7, #16]
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b0f      	cmp	r3, #15
 8005ada:	d9dc      	bls.n	8005a96 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005adc:	2300      	movs	r3, #0
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	e034      	b.n	8005b4c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005af8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b00:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b08:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b16:	461a      	mov	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b28:	d80c      	bhi.n	8005b44 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b40:	d0ec      	beq.n	8005b1c <USB_StopHost+0xb0>
 8005b42:	e000      	b.n	8005b46 <USB_StopHost+0xda>
        break;
 8005b44:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b0f      	cmp	r3, #15
 8005b50:	d9c7      	bls.n	8005ae2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b58:	461a      	mov	r2, r3
 8005b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f04f 32ff 	mov.w	r2, #4294967295
 8005b66:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff f924 	bl	8004db6 <USB_EnableGlobalInt>

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b089      	sub	sp, #36	; 0x24
 8005b7c:	af04      	add	r7, sp, #16
 8005b7e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005b80:	2301      	movs	r3, #1
 8005b82:	2202      	movs	r2, #2
 8005b84:	2102      	movs	r1, #2
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fc66 	bl	8006458 <USBH_FindInterface>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	2bff      	cmp	r3, #255	; 0xff
 8005b94:	d002      	beq.n	8005b9c <USBH_CDC_InterfaceInit+0x24>
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d901      	bls.n	8005ba0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e13d      	b.n	8005e1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fc3b 	bl	8006420 <USBH_SelectInterface>
 8005baa:	4603      	mov	r3, r0
 8005bac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005bae:	7bbb      	ldrb	r3, [r7, #14]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e131      	b.n	8005e1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005bbe:	2050      	movs	r0, #80	; 0x50
 8005bc0:	f001 fb12 	bl	80071e8 <malloc>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e11f      	b.n	8005e1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005bdc:	2250      	movs	r2, #80	; 0x50
 8005bde:	2100      	movs	r1, #0
 8005be0:	68b8      	ldr	r0, [r7, #8]
 8005be2:	f001 fb11 	bl	8007208 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	211a      	movs	r1, #26
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	b25b      	sxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	da15      	bge.n	8005c2a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	211a      	movs	r1, #26
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	4413      	add	r3, r2
 8005c0a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c0e:	781a      	ldrb	r2, [r3, #0]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	211a      	movs	r1, #26
 8005c1a:	fb01 f303 	mul.w	r3, r1, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c24:	881a      	ldrh	r2, [r3, #0]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	785b      	ldrb	r3, [r3, #1]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 ff9c 	bl	8006b6e <USBH_AllocPipe>
 8005c36:	4603      	mov	r3, r0
 8005c38:	461a      	mov	r2, r3
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	7819      	ldrb	r1, [r3, #0]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	7858      	ldrb	r0, [r3, #1]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	8952      	ldrh	r2, [r2, #10]
 8005c56:	9202      	str	r2, [sp, #8]
 8005c58:	2203      	movs	r2, #3
 8005c5a:	9201      	str	r2, [sp, #4]
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	4623      	mov	r3, r4
 8005c60:	4602      	mov	r2, r0
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 ff54 	bl	8006b10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f001 fa17 	bl	80070a4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005c76:	2300      	movs	r3, #0
 8005c78:	2200      	movs	r2, #0
 8005c7a:	210a      	movs	r1, #10
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fbeb 	bl	8006458 <USBH_FindInterface>
 8005c82:	4603      	mov	r3, r0
 8005c84:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	2bff      	cmp	r3, #255	; 0xff
 8005c8a:	d002      	beq.n	8005c92 <USBH_CDC_InterfaceInit+0x11a>
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d901      	bls.n	8005c96 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005c92:	2302      	movs	r3, #2
 8005c94:	e0c2      	b.n	8005e1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	211a      	movs	r1, #26
 8005c9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	b25b      	sxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	da16      	bge.n	8005cdc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	211a      	movs	r1, #26
 8005cb4:	fb01 f303 	mul.w	r3, r1, r3
 8005cb8:	4413      	add	r3, r2
 8005cba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cbe:	781a      	ldrb	r2, [r3, #0]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	211a      	movs	r1, #26
 8005cca:	fb01 f303 	mul.w	r3, r1, r3
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005cd4:	881a      	ldrh	r2, [r3, #0]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	835a      	strh	r2, [r3, #26]
 8005cda:	e015      	b.n	8005d08 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	211a      	movs	r1, #26
 8005ce2:	fb01 f303 	mul.w	r3, r1, r3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cec:	781a      	ldrb	r2, [r3, #0]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	211a      	movs	r1, #26
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d02:	881a      	ldrh	r2, [r3, #0]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	211a      	movs	r1, #26
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	4413      	add	r3, r2
 8005d14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	b25b      	sxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da16      	bge.n	8005d4e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	211a      	movs	r1, #26
 8005d26:	fb01 f303 	mul.w	r3, r1, r3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d30:	781a      	ldrb	r2, [r3, #0]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	211a      	movs	r1, #26
 8005d3c:	fb01 f303 	mul.w	r3, r1, r3
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005d46:	881a      	ldrh	r2, [r3, #0]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	835a      	strh	r2, [r3, #26]
 8005d4c:	e015      	b.n	8005d7a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	211a      	movs	r1, #26
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	4413      	add	r3, r2
 8005d5a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d5e:	781a      	ldrb	r2, [r3, #0]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	211a      	movs	r1, #26
 8005d6a:	fb01 f303 	mul.w	r3, r1, r3
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005d74:	881a      	ldrh	r2, [r3, #0]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	7b9b      	ldrb	r3, [r3, #14]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fef4 	bl	8006b6e <USBH_AllocPipe>
 8005d86:	4603      	mov	r3, r0
 8005d88:	461a      	mov	r2, r3
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	7bdb      	ldrb	r3, [r3, #15]
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 feea 	bl	8006b6e <USBH_AllocPipe>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	7b59      	ldrb	r1, [r3, #13]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	7b98      	ldrb	r0, [r3, #14]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	8b12      	ldrh	r2, [r2, #24]
 8005dba:	9202      	str	r2, [sp, #8]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	9201      	str	r2, [sp, #4]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	4623      	mov	r3, r4
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fea2 	bl	8006b10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	7b19      	ldrb	r1, [r3, #12]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	7bd8      	ldrb	r0, [r3, #15]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	8b52      	ldrh	r2, [r2, #26]
 8005de4:	9202      	str	r2, [sp, #8]
 8005de6:	2202      	movs	r2, #2
 8005de8:	9201      	str	r2, [sp, #4]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	4623      	mov	r3, r4
 8005dee:	4602      	mov	r2, r0
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fe8d 	bl	8006b10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	7b5b      	ldrb	r3, [r3, #13]
 8005e02:	2200      	movs	r2, #0
 8005e04:	4619      	mov	r1, r3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 f94c 	bl	80070a4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	7b1b      	ldrb	r3, [r3, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f001 f945 	bl	80070a4 <USBH_LL_SetToggle>

  return USBH_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd90      	pop	{r4, r7, pc}

08005e24 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00e      	beq.n	8005e5c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	4619      	mov	r1, r3
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fe82 	bl	8006b4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fead 	bl	8006bb0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	7b1b      	ldrb	r3, [r3, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00e      	beq.n	8005e82 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	7b1b      	ldrb	r3, [r3, #12]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fe6f 	bl	8006b4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	7b1b      	ldrb	r3, [r3, #12]
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fe9a 	bl	8006bb0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	7b5b      	ldrb	r3, [r3, #13]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00e      	beq.n	8005ea8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	7b5b      	ldrb	r3, [r3, #13]
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fe5c 	bl	8006b4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	7b5b      	ldrb	r3, [r3, #13]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fe87 	bl	8006bb0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 f99b 	bl	80071f8 <free>
    phost->pActiveClass->pData = 0U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ec8:	2200      	movs	r2, #0
 8005eca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3340      	adds	r3, #64	; 0x40
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f8b1 	bl	8006056 <GetLineCoding>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005ef8:	7afb      	ldrb	r3, [r7, #11]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d105      	bne.n	8005f0a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f04:	2102      	movs	r1, #2
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005f0a:	7afb      	ldrb	r3, [r7, #11]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d877      	bhi.n	8006028 <USBH_CDC_Process+0x114>
 8005f38:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <USBH_CDC_Process+0x2c>)
 8005f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3e:	bf00      	nop
 8005f40:	08005f55 	.word	0x08005f55
 8005f44:	08005f5b 	.word	0x08005f5b
 8005f48:	08005f8b 	.word	0x08005f8b
 8005f4c:	08005fff 	.word	0x08005fff
 8005f50:	0800600d 	.word	0x0800600d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	73fb      	strb	r3, [r7, #15]
      break;
 8005f58:	e06d      	b.n	8006036 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f897 	bl	8006094 <SetLineCoding>
 8005f66:	4603      	mov	r3, r0
 8005f68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005f6a:	7bbb      	ldrb	r3, [r7, #14]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005f78:	e058      	b.n	800602c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d055      	beq.n	800602c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2204      	movs	r2, #4
 8005f84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005f88:	e050      	b.n	800602c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	3340      	adds	r3, #64	; 0x40
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f860 	bl	8006056 <GetLineCoding>
 8005f96:	4603      	mov	r3, r0
 8005f98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005f9a:	7bbb      	ldrb	r3, [r7, #14]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d126      	bne.n	8005fee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb2:	791b      	ldrb	r3, [r3, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d13b      	bne.n	8006030 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d133      	bne.n	8006030 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d12b      	bne.n	8006030 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d124      	bne.n	8006030 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f958 	bl	800629c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005fec:	e020      	b.n	8006030 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d01d      	beq.n	8006030 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2204      	movs	r2, #4
 8005ff8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005ffc:	e018      	b.n	8006030 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f867 	bl	80060d2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f8da 	bl	80061be <CDC_ProcessReception>
      break;
 800600a:	e014      	b.n	8006036 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800600c:	2100      	movs	r1, #0
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fb08 	bl	8006624 <USBH_ClrFeature>
 8006014:	4603      	mov	r3, r0
 8006016:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006018:	7bbb      	ldrb	r3, [r7, #14]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006026:	e005      	b.n	8006034 <USBH_CDC_Process+0x120>

    default:
      break;
 8006028:	bf00      	nop
 800602a:	e004      	b.n	8006036 <USBH_CDC_Process+0x122>
      break;
 800602c:	bf00      	nop
 800602e:	e002      	b.n	8006036 <USBH_CDC_Process+0x122>
      break;
 8006030:	bf00      	nop
 8006032:	e000      	b.n	8006036 <USBH_CDC_Process+0x122>
      break;
 8006034:	bf00      	nop

  }

  return status;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	22a1      	movs	r2, #161	; 0xa1
 8006064:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2221      	movs	r2, #33	; 0x21
 800606a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2207      	movs	r2, #7
 800607c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2207      	movs	r2, #7
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 faf1 	bl	800666c <USBH_CtlReq>
 800608a:	4603      	mov	r3, r0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2221      	movs	r2, #33	; 0x21
 80060a2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2207      	movs	r2, #7
 80060ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2207      	movs	r2, #7
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fad2 	bl	800666c <USBH_CtlReq>
 80060c8:	4603      	mov	r3, r0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	af02      	add	r7, sp, #8
 80060d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d002      	beq.n	80060f8 <CDC_ProcessTransmission+0x26>
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d023      	beq.n	800613e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80060f6:	e05e      	b.n	80061b6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	8b12      	ldrh	r2, [r2, #24]
 8006100:	4293      	cmp	r3, r2
 8006102:	d90b      	bls.n	800611c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	69d9      	ldr	r1, [r3, #28]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8b1a      	ldrh	r2, [r3, #24]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	7b5b      	ldrb	r3, [r3, #13]
 8006110:	2001      	movs	r0, #1
 8006112:	9000      	str	r0, [sp, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fcb8 	bl	8006a8a <USBH_BulkSendData>
 800611a:	e00b      	b.n	8006134 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006124:	b29a      	uxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	7b5b      	ldrb	r3, [r3, #13]
 800612a:	2001      	movs	r0, #1
 800612c:	9000      	str	r0, [sp, #0]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fcab 	bl	8006a8a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800613c:	e03b      	b.n	80061b6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	7b5b      	ldrb	r3, [r3, #13]
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 ff83 	bl	8007050 <USBH_LL_GetURBState>
 800614a:	4603      	mov	r3, r0
 800614c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800614e:	7afb      	ldrb	r3, [r7, #11]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d128      	bne.n	80061a6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	8b12      	ldrh	r2, [r2, #24]
 800615c:	4293      	cmp	r3, r2
 800615e:	d90e      	bls.n	800617e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	8b12      	ldrh	r2, [r2, #24]
 8006168:	1a9a      	subs	r2, r3, r2
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	8b12      	ldrh	r2, [r2, #24]
 8006176:	441a      	add	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	61da      	str	r2, [r3, #28]
 800617c:	e002      	b.n	8006184 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	2b00      	cmp	r3, #0
 800618a:	d004      	beq.n	8006196 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006194:	e00e      	b.n	80061b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f868 	bl	8006274 <USBH_CDC_TransmitCallback>
      break;
 80061a4:	e006      	b.n	80061b4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80061a6:	7afb      	ldrb	r3, [r7, #11]
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d103      	bne.n	80061b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80061b4:	bf00      	nop
  }
}
 80061b6:	bf00      	nop
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b086      	sub	sp, #24
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80061d0:	2300      	movs	r3, #0
 80061d2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d002      	beq.n	80061e4 <CDC_ProcessReception+0x26>
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d00e      	beq.n	8006200 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80061e2:	e043      	b.n	800626c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	6a19      	ldr	r1, [r3, #32]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	8b5a      	ldrh	r2, [r3, #26]
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	7b1b      	ldrb	r3, [r3, #12]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fc6f 	bl	8006ad4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2204      	movs	r2, #4
 80061fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80061fe:	e035      	b.n	800626c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	7b1b      	ldrb	r3, [r3, #12]
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 ff22 	bl	8007050 <USBH_LL_GetURBState>
 800620c:	4603      	mov	r3, r0
 800620e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006210:	7cfb      	ldrb	r3, [r7, #19]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d129      	bne.n	800626a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	7b1b      	ldrb	r3, [r3, #12]
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fe85 	bl	8006f2c <USBH_LL_GetLastXferSize>
 8006222:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	429a      	cmp	r2, r3
 800622c:	d016      	beq.n	800625c <CDC_ProcessReception+0x9e>
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	8b5b      	ldrh	r3, [r3, #26]
 8006232:	461a      	mov	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4293      	cmp	r3, r2
 8006238:	d910      	bls.n	800625c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1ad2      	subs	r2, r2, r3
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	441a      	add	r2, r3
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2203      	movs	r2, #3
 8006256:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800625a:	e006      	b.n	800626a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f80f 	bl	8006288 <USBH_CDC_ReceiveCallback>
      break;
 800626a:	bf00      	nop
  }
}
 800626c:	bf00      	nop
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80062c4:	2302      	movs	r3, #2
 80062c6:	e029      	b.n	800631c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	79fa      	ldrb	r2, [r7, #7]
 80062cc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f81f 	bl	8006324 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fd97 	bl	8006e48 <USBH_LL_Init>

  return USBH_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	e009      	b.n	800634a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	33e0      	adds	r3, #224	; 0xe0
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	2200      	movs	r2, #0
 8006342:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b0e      	cmp	r3, #14
 800634e:	d9f2      	bls.n	8006336 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e009      	b.n	800636a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4413      	add	r3, r2
 800635c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006360:	2200      	movs	r2, #0
 8006362:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3301      	adds	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006370:	d3f1      	bcc.n	8006356 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2240      	movs	r2, #64	; 0x40
 8006396:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d016      	beq.n	800640e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10e      	bne.n	8006408 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80063f0:	1c59      	adds	r1, r3, #1
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	33de      	adds	r3, #222	; 0xde
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	73fb      	strb	r3, [r7, #15]
 8006406:	e004      	b.n	8006412 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006408:	2302      	movs	r3, #2
 800640a:	73fb      	strb	r3, [r7, #15]
 800640c:	e001      	b.n	8006412 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800640e:	2302      	movs	r3, #2
 8006410:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006436:	78fa      	ldrb	r2, [r7, #3]
 8006438:	429a      	cmp	r2, r3
 800643a:	d204      	bcs.n	8006446 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	78fa      	ldrb	r2, [r7, #3]
 8006440:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006444:	e001      	b.n	800644a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006446:	2302      	movs	r3, #2
 8006448:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	4608      	mov	r0, r1
 8006462:	4611      	mov	r1, r2
 8006464:	461a      	mov	r2, r3
 8006466:	4603      	mov	r3, r0
 8006468:	70fb      	strb	r3, [r7, #3]
 800646a:	460b      	mov	r3, r1
 800646c:	70bb      	strb	r3, [r7, #2]
 800646e:	4613      	mov	r3, r2
 8006470:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006480:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006482:	e025      	b.n	80064d0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	221a      	movs	r2, #26
 8006488:	fb02 f303 	mul.w	r3, r2, r3
 800648c:	3308      	adds	r3, #8
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	3302      	adds	r3, #2
 8006494:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	795b      	ldrb	r3, [r3, #5]
 800649a:	78fa      	ldrb	r2, [r7, #3]
 800649c:	429a      	cmp	r2, r3
 800649e:	d002      	beq.n	80064a6 <USBH_FindInterface+0x4e>
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	2bff      	cmp	r3, #255	; 0xff
 80064a4:	d111      	bne.n	80064ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80064aa:	78ba      	ldrb	r2, [r7, #2]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d002      	beq.n	80064b6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80064b0:	78bb      	ldrb	r3, [r7, #2]
 80064b2:	2bff      	cmp	r3, #255	; 0xff
 80064b4:	d109      	bne.n	80064ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80064ba:	787a      	ldrb	r2, [r7, #1]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d002      	beq.n	80064c6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80064c0:	787b      	ldrb	r3, [r7, #1]
 80064c2:	2bff      	cmp	r3, #255	; 0xff
 80064c4:	d101      	bne.n	80064ca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
 80064c8:	e006      	b.n	80064d8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
 80064cc:	3301      	adds	r3, #1
 80064ce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d9d6      	bls.n	8006484 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80064d6:	23ff      	movs	r3, #255	; 0xff
}
 80064d8:	4618      	mov	r0, r3
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fce7 	bl	8006ec0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80064f2:	2101      	movs	r1, #1
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fdbe 	bl	8007076 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006516:	bf00      	nop
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f804 	bl	8006546 <USBH_HandleSof>
}
 800653e:	bf00      	nop
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b0b      	cmp	r3, #11
 8006556:	d10a      	bne.n	800656e <USBH_HandleSof+0x28>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
  }
}
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006586:	bf00      	nop
}
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80065a2:	bf00      	nop
}
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fc7a 	bl	8006ef6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	791b      	ldrb	r3, [r3, #4]
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fad1 	bl	8006bb0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	795b      	ldrb	r3, [r3, #5]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 facb 	bl	8006bb0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	789b      	ldrb	r3, [r3, #2]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d10f      	bne.n	8006658 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	b29a      	uxth	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006658:	2200      	movs	r2, #0
 800665a:	2100      	movs	r1, #0
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f805 	bl	800666c <USBH_CtlReq>
 8006662:	4603      	mov	r3, r0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	4613      	mov	r3, r2
 8006678:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800667a:	2301      	movs	r3, #1
 800667c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	789b      	ldrb	r3, [r3, #2]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d002      	beq.n	800668c <USBH_CtlReq+0x20>
 8006686:	2b02      	cmp	r3, #2
 8006688:	d00f      	beq.n	80066aa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800668a:	e027      	b.n	80066dc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	88fa      	ldrh	r2, [r7, #6]
 8006696:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2202      	movs	r2, #2
 80066a2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80066a4:	2301      	movs	r3, #1
 80066a6:	75fb      	strb	r3, [r7, #23]
      break;
 80066a8:	e018      	b.n	80066dc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 f81c 	bl	80066e8 <USBH_HandleControl>
 80066b0:	4603      	mov	r3, r0
 80066b2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <USBH_CtlReq+0x54>
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d106      	bne.n	80066ce <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	761a      	strb	r2, [r3, #24]
      break;
 80066cc:	e005      	b.n	80066da <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d102      	bne.n	80066da <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	709a      	strb	r2, [r3, #2]
      break;
 80066da:	bf00      	nop
  }
  return status;
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80066f4:	2300      	movs	r3, #0
 80066f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	7e1b      	ldrb	r3, [r3, #24]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	2b0a      	cmp	r3, #10
 8006700:	f200 8156 	bhi.w	80069b0 <USBH_HandleControl+0x2c8>
 8006704:	a201      	add	r2, pc, #4	; (adr r2, 800670c <USBH_HandleControl+0x24>)
 8006706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670a:	bf00      	nop
 800670c:	08006739 	.word	0x08006739
 8006710:	08006753 	.word	0x08006753
 8006714:	080067bd 	.word	0x080067bd
 8006718:	080067e3 	.word	0x080067e3
 800671c:	0800681b 	.word	0x0800681b
 8006720:	08006845 	.word	0x08006845
 8006724:	08006897 	.word	0x08006897
 8006728:	080068b9 	.word	0x080068b9
 800672c:	080068f5 	.word	0x080068f5
 8006730:	0800691b 	.word	0x0800691b
 8006734:	08006959 	.word	0x08006959
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f103 0110 	add.w	r1, r3, #16
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	795b      	ldrb	r3, [r3, #5]
 8006742:	461a      	mov	r2, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f943 	bl	80069d0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2202      	movs	r2, #2
 800674e:	761a      	strb	r2, [r3, #24]
      break;
 8006750:	e139      	b.n	80069c6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	795b      	ldrb	r3, [r3, #5]
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fc79 	bl	8007050 <USBH_LL_GetURBState>
 800675e:	4603      	mov	r3, r0
 8006760:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006762:	7bbb      	ldrb	r3, [r7, #14]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d11e      	bne.n	80067a6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	7c1b      	ldrb	r3, [r3, #16]
 800676c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006770:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	8adb      	ldrh	r3, [r3, #22]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800677a:	7b7b      	ldrb	r3, [r7, #13]
 800677c:	2b80      	cmp	r3, #128	; 0x80
 800677e:	d103      	bne.n	8006788 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2203      	movs	r2, #3
 8006784:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006786:	e115      	b.n	80069b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2205      	movs	r2, #5
 800678c:	761a      	strb	r2, [r3, #24]
      break;
 800678e:	e111      	b.n	80069b4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006790:	7b7b      	ldrb	r3, [r7, #13]
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d103      	bne.n	800679e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2209      	movs	r2, #9
 800679a:	761a      	strb	r2, [r3, #24]
      break;
 800679c:	e10a      	b.n	80069b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2207      	movs	r2, #7
 80067a2:	761a      	strb	r2, [r3, #24]
      break;
 80067a4:	e106      	b.n	80069b4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80067a6:	7bbb      	ldrb	r3, [r7, #14]
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d003      	beq.n	80067b4 <USBH_HandleControl+0xcc>
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	f040 8100 	bne.w	80069b4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	220b      	movs	r2, #11
 80067b8:	761a      	strb	r2, [r3, #24]
      break;
 80067ba:	e0fb      	b.n	80069b4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6899      	ldr	r1, [r3, #8]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	899a      	ldrh	r2, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	791b      	ldrb	r3, [r3, #4]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f93a 	bl	8006a4e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2204      	movs	r2, #4
 80067de:	761a      	strb	r2, [r3, #24]
      break;
 80067e0:	e0f1      	b.n	80069c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	791b      	ldrb	r3, [r3, #4]
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fc31 	bl	8007050 <USBH_LL_GetURBState>
 80067ee:	4603      	mov	r3, r0
 80067f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d102      	bne.n	80067fe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2209      	movs	r2, #9
 80067fc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
 8006800:	2b05      	cmp	r3, #5
 8006802:	d102      	bne.n	800680a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006804:	2303      	movs	r3, #3
 8006806:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006808:	e0d6      	b.n	80069b8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800680a:	7bbb      	ldrb	r3, [r7, #14]
 800680c:	2b04      	cmp	r3, #4
 800680e:	f040 80d3 	bne.w	80069b8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	220b      	movs	r2, #11
 8006816:	761a      	strb	r2, [r3, #24]
      break;
 8006818:	e0ce      	b.n	80069b8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6899      	ldr	r1, [r3, #8]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	899a      	ldrh	r2, [r3, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	795b      	ldrb	r3, [r3, #5]
 8006826:	2001      	movs	r0, #1
 8006828:	9000      	str	r0, [sp, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f8ea 	bl	8006a04 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006836:	b29a      	uxth	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2206      	movs	r2, #6
 8006840:	761a      	strb	r2, [r3, #24]
      break;
 8006842:	e0c0      	b.n	80069c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	795b      	ldrb	r3, [r3, #5]
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fc00 	bl	8007050 <USBH_LL_GetURBState>
 8006850:	4603      	mov	r3, r0
 8006852:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d103      	bne.n	8006862 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2207      	movs	r2, #7
 800685e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006860:	e0ac      	b.n	80069bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	2b05      	cmp	r3, #5
 8006866:	d105      	bne.n	8006874 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	220c      	movs	r2, #12
 800686c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800686e:	2303      	movs	r3, #3
 8006870:	73fb      	strb	r3, [r7, #15]
      break;
 8006872:	e0a3      	b.n	80069bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	2b02      	cmp	r3, #2
 8006878:	d103      	bne.n	8006882 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2205      	movs	r2, #5
 800687e:	761a      	strb	r2, [r3, #24]
      break;
 8006880:	e09c      	b.n	80069bc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	2b04      	cmp	r3, #4
 8006886:	f040 8099 	bne.w	80069bc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	220b      	movs	r2, #11
 800688e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006890:	2302      	movs	r3, #2
 8006892:	73fb      	strb	r3, [r7, #15]
      break;
 8006894:	e092      	b.n	80069bc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	791b      	ldrb	r3, [r3, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	2100      	movs	r1, #0
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f8d5 	bl	8006a4e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2208      	movs	r2, #8
 80068b4:	761a      	strb	r2, [r3, #24]

      break;
 80068b6:	e086      	b.n	80069c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	791b      	ldrb	r3, [r3, #4]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fbc6 	bl	8007050 <USBH_LL_GetURBState>
 80068c4:	4603      	mov	r3, r0
 80068c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d105      	bne.n	80068da <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	220d      	movs	r2, #13
 80068d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80068d8:	e072      	b.n	80069c0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	2b04      	cmp	r3, #4
 80068de:	d103      	bne.n	80068e8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	220b      	movs	r2, #11
 80068e4:	761a      	strb	r2, [r3, #24]
      break;
 80068e6:	e06b      	b.n	80069c0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80068e8:	7bbb      	ldrb	r3, [r7, #14]
 80068ea:	2b05      	cmp	r3, #5
 80068ec:	d168      	bne.n	80069c0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80068ee:	2303      	movs	r3, #3
 80068f0:	73fb      	strb	r3, [r7, #15]
      break;
 80068f2:	e065      	b.n	80069c0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	795b      	ldrb	r3, [r3, #5]
 80068f8:	2201      	movs	r2, #1
 80068fa:	9200      	str	r2, [sp, #0]
 80068fc:	2200      	movs	r2, #0
 80068fe:	2100      	movs	r1, #0
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f87f 	bl	8006a04 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800690c:	b29a      	uxth	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	220a      	movs	r2, #10
 8006916:	761a      	strb	r2, [r3, #24]
      break;
 8006918:	e055      	b.n	80069c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	795b      	ldrb	r3, [r3, #5]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fb95 	bl	8007050 <USBH_LL_GetURBState>
 8006926:	4603      	mov	r3, r0
 8006928:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800692a:	7bbb      	ldrb	r3, [r7, #14]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d105      	bne.n	800693c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	220d      	movs	r2, #13
 8006938:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800693a:	e043      	b.n	80069c4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800693c:	7bbb      	ldrb	r3, [r7, #14]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d103      	bne.n	800694a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2209      	movs	r2, #9
 8006946:	761a      	strb	r2, [r3, #24]
      break;
 8006948:	e03c      	b.n	80069c4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800694a:	7bbb      	ldrb	r3, [r7, #14]
 800694c:	2b04      	cmp	r3, #4
 800694e:	d139      	bne.n	80069c4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	220b      	movs	r2, #11
 8006954:	761a      	strb	r2, [r3, #24]
      break;
 8006956:	e035      	b.n	80069c4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	7e5b      	ldrb	r3, [r3, #25]
 800695c:	3301      	adds	r3, #1
 800695e:	b2da      	uxtb	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	765a      	strb	r2, [r3, #25]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	7e5b      	ldrb	r3, [r3, #25]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d806      	bhi.n	800697a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006978:	e025      	b.n	80069c6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006980:	2106      	movs	r1, #6
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	795b      	ldrb	r3, [r3, #5]
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f90c 	bl	8006bb0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	791b      	ldrb	r3, [r3, #4]
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f906 	bl	8006bb0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80069aa:	2302      	movs	r3, #2
 80069ac:	73fb      	strb	r3, [r7, #15]
      break;
 80069ae:	e00a      	b.n	80069c6 <USBH_HandleControl+0x2de>

    default:
      break;
 80069b0:	bf00      	nop
 80069b2:	e008      	b.n	80069c6 <USBH_HandleControl+0x2de>
      break;
 80069b4:	bf00      	nop
 80069b6:	e006      	b.n	80069c6 <USBH_HandleControl+0x2de>
      break;
 80069b8:	bf00      	nop
 80069ba:	e004      	b.n	80069c6 <USBH_HandleControl+0x2de>
      break;
 80069bc:	bf00      	nop
 80069be:	e002      	b.n	80069c6 <USBH_HandleControl+0x2de>
      break;
 80069c0:	bf00      	nop
 80069c2:	e000      	b.n	80069c6 <USBH_HandleControl+0x2de>
      break;
 80069c4:	bf00      	nop
  }

  return status;
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af04      	add	r7, sp, #16
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	4613      	mov	r3, r2
 80069dc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80069de:	79f9      	ldrb	r1, [r7, #7]
 80069e0:	2300      	movs	r3, #0
 80069e2:	9303      	str	r3, [sp, #12]
 80069e4:	2308      	movs	r3, #8
 80069e6:	9302      	str	r3, [sp, #8]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	2300      	movs	r3, #0
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	2300      	movs	r3, #0
 80069f2:	2200      	movs	r2, #0
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 fafa 	bl	8006fee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af04      	add	r7, sp, #16
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	4611      	mov	r1, r2
 8006a10:	461a      	mov	r2, r3
 8006a12:	460b      	mov	r3, r1
 8006a14:	80fb      	strh	r3, [r7, #6]
 8006a16:	4613      	mov	r3, r2
 8006a18:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006a28:	7979      	ldrb	r1, [r7, #5]
 8006a2a:	7e3b      	ldrb	r3, [r7, #24]
 8006a2c:	9303      	str	r3, [sp, #12]
 8006a2e:	88fb      	ldrh	r3, [r7, #6]
 8006a30:	9302      	str	r3, [sp, #8]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	2301      	movs	r3, #1
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 fad5 	bl	8006fee <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b088      	sub	sp, #32
 8006a52:	af04      	add	r7, sp, #16
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	4611      	mov	r1, r2
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	80fb      	strh	r3, [r7, #6]
 8006a60:	4613      	mov	r3, r2
 8006a62:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006a64:	7979      	ldrb	r1, [r7, #5]
 8006a66:	2300      	movs	r3, #0
 8006a68:	9303      	str	r3, [sp, #12]
 8006a6a:	88fb      	ldrh	r3, [r7, #6]
 8006a6c:	9302      	str	r3, [sp, #8]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	2301      	movs	r3, #1
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	2300      	movs	r3, #0
 8006a78:	2201      	movs	r2, #1
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 fab7 	bl	8006fee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006a80:	2300      	movs	r3, #0

}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b088      	sub	sp, #32
 8006a8e:	af04      	add	r7, sp, #16
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	4611      	mov	r1, r2
 8006a96:	461a      	mov	r2, r3
 8006a98:	460b      	mov	r3, r1
 8006a9a:	80fb      	strh	r3, [r7, #6]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006aae:	7979      	ldrb	r1, [r7, #5]
 8006ab0:	7e3b      	ldrb	r3, [r7, #24]
 8006ab2:	9303      	str	r3, [sp, #12]
 8006ab4:	88fb      	ldrh	r3, [r7, #6]
 8006ab6:	9302      	str	r3, [sp, #8]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	2301      	movs	r3, #1
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 fa92 	bl	8006fee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b088      	sub	sp, #32
 8006ad8:	af04      	add	r7, sp, #16
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4611      	mov	r1, r2
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	80fb      	strh	r3, [r7, #6]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006aea:	7979      	ldrb	r1, [r7, #5]
 8006aec:	2300      	movs	r3, #0
 8006aee:	9303      	str	r3, [sp, #12]
 8006af0:	88fb      	ldrh	r3, [r7, #6]
 8006af2:	9302      	str	r3, [sp, #8]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	2301      	movs	r3, #1
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	2302      	movs	r3, #2
 8006afe:	2201      	movs	r2, #1
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fa74 	bl	8006fee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af04      	add	r7, sp, #16
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	4608      	mov	r0, r1
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	4603      	mov	r3, r0
 8006b20:	70fb      	strb	r3, [r7, #3]
 8006b22:	460b      	mov	r3, r1
 8006b24:	70bb      	strb	r3, [r7, #2]
 8006b26:	4613      	mov	r3, r2
 8006b28:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006b2a:	7878      	ldrb	r0, [r7, #1]
 8006b2c:	78ba      	ldrb	r2, [r7, #2]
 8006b2e:	78f9      	ldrb	r1, [r7, #3]
 8006b30:	8b3b      	ldrh	r3, [r7, #24]
 8006b32:	9302      	str	r3, [sp, #8]
 8006b34:	7d3b      	ldrb	r3, [r7, #20]
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	7c3b      	ldrb	r3, [r7, #16]
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fa07 	bl	8006f52 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	460b      	mov	r3, r1
 8006b58:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa26 	bl	8006fb0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	460b      	mov	r3, r1
 8006b78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f836 	bl	8006bec <USBH_GetFreePipe>
 8006b80:	4603      	mov	r3, r0
 8006b82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006b84:	89fb      	ldrh	r3, [r7, #14]
 8006b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00a      	beq.n	8006ba4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8006b8e:	78fa      	ldrb	r2, [r7, #3]
 8006b90:	89fb      	ldrh	r3, [r7, #14]
 8006b92:	f003 030f 	and.w	r3, r3, #15
 8006b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	33e0      	adds	r3, #224	; 0xe0
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006ba4:	89fb      	ldrh	r3, [r7, #14]
 8006ba6:	b2db      	uxtb	r3, r3
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	2b0a      	cmp	r3, #10
 8006bc0:	d80d      	bhi.n	8006bde <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006bc2:	78fb      	ldrb	r3, [r7, #3]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	33e0      	adds	r3, #224	; 0xe0
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	33e0      	adds	r3, #224	; 0xe0
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	73fb      	strb	r3, [r7, #15]
 8006bfc:	e00f      	b.n	8006c1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	33e0      	adds	r3, #224	; 0xe0
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d102      	bne.n	8006c18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	e007      	b.n	8006c28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	73fb      	strb	r3, [r7, #15]
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	2b0a      	cmp	r3, #10
 8006c22:	d9ec      	bls.n	8006bfe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	490e      	ldr	r1, [pc, #56]	; (8006c74 <MX_USB_HOST_Init+0x40>)
 8006c3c:	480e      	ldr	r0, [pc, #56]	; (8006c78 <MX_USB_HOST_Init+0x44>)
 8006c3e:	f7ff fb37 	bl	80062b0 <USBH_Init>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006c48:	f7f9 fed2 	bl	80009f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006c4c:	490b      	ldr	r1, [pc, #44]	; (8006c7c <MX_USB_HOST_Init+0x48>)
 8006c4e:	480a      	ldr	r0, [pc, #40]	; (8006c78 <MX_USB_HOST_Init+0x44>)
 8006c50:	f7ff fbbc 	bl	80063cc <USBH_RegisterClass>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006c5a:	f7f9 fec9 	bl	80009f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006c5e:	4806      	ldr	r0, [pc, #24]	; (8006c78 <MX_USB_HOST_Init+0x44>)
 8006c60:	f7ff fc40 	bl	80064e4 <USBH_Start>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006c6a:	f7f9 fec1 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006c6e:	bf00      	nop
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	08006c81 	.word	0x08006c81
 8006c78:	200001fc 	.word	0x200001fc
 8006c7c:	2000000c 	.word	0x2000000c

08006c80 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d819      	bhi.n	8006cc8 <USBH_UserProcess+0x48>
 8006c94:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <USBH_UserProcess+0x1c>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006cc9 	.word	0x08006cc9
 8006ca0:	08006cb9 	.word	0x08006cb9
 8006ca4:	08006cc9 	.word	0x08006cc9
 8006ca8:	08006cc1 	.word	0x08006cc1
 8006cac:	08006cb1 	.word	0x08006cb1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006cb0:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <USBH_UserProcess+0x58>)
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	701a      	strb	r2, [r3, #0]
  break;
 8006cb6:	e008      	b.n	8006cca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006cb8:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <USBH_UserProcess+0x58>)
 8006cba:	2202      	movs	r2, #2
 8006cbc:	701a      	strb	r2, [r3, #0]
  break;
 8006cbe:	e004      	b.n	8006cca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006cc0:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <USBH_UserProcess+0x58>)
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	701a      	strb	r2, [r3, #0]
  break;
 8006cc6:	e000      	b.n	8006cca <USBH_UserProcess+0x4a>

  default:
  break;
 8006cc8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	200000b0 	.word	0x200000b0

08006cdc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	; 0x28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ce4:	f107 0314 	add.w	r3, r7, #20
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	605a      	str	r2, [r3, #4]
 8006cee:	609a      	str	r2, [r3, #8]
 8006cf0:	60da      	str	r2, [r3, #12]
 8006cf2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cfc:	d147      	bne.n	8006d8e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cfe:	2300      	movs	r3, #0
 8006d00:	613b      	str	r3, [r7, #16]
 8006d02:	4b25      	ldr	r3, [pc, #148]	; (8006d98 <HAL_HCD_MspInit+0xbc>)
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	4a24      	ldr	r2, [pc, #144]	; (8006d98 <HAL_HCD_MspInit+0xbc>)
 8006d08:	f043 0301 	orr.w	r3, r3, #1
 8006d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d0e:	4b22      	ldr	r3, [pc, #136]	; (8006d98 <HAL_HCD_MspInit+0xbc>)
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d20:	2300      	movs	r3, #0
 8006d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006d28:	f107 0314 	add.w	r3, r7, #20
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	481b      	ldr	r0, [pc, #108]	; (8006d9c <HAL_HCD_MspInit+0xc0>)
 8006d30:	f7fa f9f2 	bl	8001118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006d34:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d42:	2300      	movs	r3, #0
 8006d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d46:	230a      	movs	r3, #10
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d4a:	f107 0314 	add.w	r3, r7, #20
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4812      	ldr	r0, [pc, #72]	; (8006d9c <HAL_HCD_MspInit+0xc0>)
 8006d52:	f7fa f9e1 	bl	8001118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d56:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <HAL_HCD_MspInit+0xbc>)
 8006d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5a:	4a0f      	ldr	r2, [pc, #60]	; (8006d98 <HAL_HCD_MspInit+0xbc>)
 8006d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d60:	6353      	str	r3, [r2, #52]	; 0x34
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <HAL_HCD_MspInit+0xbc>)
 8006d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6a:	4a0b      	ldr	r2, [pc, #44]	; (8006d98 <HAL_HCD_MspInit+0xbc>)
 8006d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d70:	6453      	str	r3, [r2, #68]	; 0x44
 8006d72:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <HAL_HCD_MspInit+0xbc>)
 8006d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2100      	movs	r1, #0
 8006d82:	2043      	movs	r0, #67	; 0x43
 8006d84:	f7fa f991 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d88:	2043      	movs	r0, #67	; 0x43
 8006d8a:	f7fa f9aa 	bl	80010e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d8e:	bf00      	nop
 8006d90:	3728      	adds	r7, #40	; 0x28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	40023800 	.word	0x40023800
 8006d9c:	40020000 	.word	0x40020000

08006da0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff fbb7 	bl	8006522 <USBH_LL_IncTimer>
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff fbef 	bl	80065ae <USBH_LL_Connect>
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff fbf8 	bl	80065dc <USBH_LL_Disconnect>
}
 8006dec:	bf00      	nop
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
 8006e00:	4613      	mov	r3, r2
 8006e02:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff fba9 	bl	8006576 <USBH_LL_PortEnabled>
}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff fba9 	bl	8006592 <USBH_LL_PortDisabled>
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d12a      	bne.n	8006eb0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006e5a:	4a18      	ldr	r2, [pc, #96]	; (8006ebc <USBH_LL_Init+0x74>)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a15      	ldr	r2, [pc, #84]	; (8006ebc <USBH_LL_Init+0x74>)
 8006e66:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006e6a:	4b14      	ldr	r3, [pc, #80]	; (8006ebc <USBH_LL_Init+0x74>)
 8006e6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006e70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006e72:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <USBH_LL_Init+0x74>)
 8006e74:	2208      	movs	r2, #8
 8006e76:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006e78:	4b10      	ldr	r3, [pc, #64]	; (8006ebc <USBH_LL_Init+0x74>)
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006e7e:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <USBH_LL_Init+0x74>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006e84:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <USBH_LL_Init+0x74>)
 8006e86:	2202      	movs	r2, #2
 8006e88:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006e8a:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <USBH_LL_Init+0x74>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006e90:	480a      	ldr	r0, [pc, #40]	; (8006ebc <USBH_LL_Init+0x74>)
 8006e92:	f7fa fb10 	bl	80014b6 <HAL_HCD_Init>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006e9c:	f7f9 fda8 	bl	80009f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006ea0:	4806      	ldr	r0, [pc, #24]	; (8006ebc <USBH_LL_Init+0x74>)
 8006ea2:	f7fa fedf 	bl	8001c64 <HAL_HCD_GetCurrentFrame>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff fb2a 	bl	8006504 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	200005d4 	.word	0x200005d4

08006ec0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fa fe5c 	bl	8001b94 <HAL_HCD_Start>
 8006edc:	4603      	mov	r3, r0
 8006ede:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 f90e 	bl	8007104 <USBH_Get_USB_Status>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fa fe64 	bl	8001bda <HAL_HCD_Stop>
 8006f12:	4603      	mov	r3, r0
 8006f14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 f8f3 	bl	8007104 <USBH_Get_USB_Status>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	4611      	mov	r1, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fa fe7a 	bl	8001c3c <HAL_HCD_HC_GetXferCount>
 8006f48:	4603      	mov	r3, r0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006f52:	b590      	push	{r4, r7, lr}
 8006f54:	b089      	sub	sp, #36	; 0x24
 8006f56:	af04      	add	r7, sp, #16
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	4608      	mov	r0, r1
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	461a      	mov	r2, r3
 8006f60:	4603      	mov	r3, r0
 8006f62:	70fb      	strb	r3, [r7, #3]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70bb      	strb	r3, [r7, #2]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006f7a:	787c      	ldrb	r4, [r7, #1]
 8006f7c:	78ba      	ldrb	r2, [r7, #2]
 8006f7e:	78f9      	ldrb	r1, [r7, #3]
 8006f80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f82:	9302      	str	r3, [sp, #8]
 8006f84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	4623      	mov	r3, r4
 8006f92:	f7fa faf2 	bl	800157a <HAL_HCD_HC_Init>
 8006f96:	4603      	mov	r3, r0
 8006f98:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 f8b1 	bl	8007104 <USBH_Get_USB_Status>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd90      	pop	{r4, r7, pc}

08006fb0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fa fb62 	bl	8001698 <HAL_HCD_HC_Halt>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f892 	bl	8007104 <USBH_Get_USB_Status>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006fee:	b590      	push	{r4, r7, lr}
 8006ff0:	b089      	sub	sp, #36	; 0x24
 8006ff2:	af04      	add	r7, sp, #16
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	70fb      	strb	r3, [r7, #3]
 8007000:	460b      	mov	r3, r1
 8007002:	70bb      	strb	r3, [r7, #2]
 8007004:	4613      	mov	r3, r2
 8007006:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007016:	787c      	ldrb	r4, [r7, #1]
 8007018:	78ba      	ldrb	r2, [r7, #2]
 800701a:	78f9      	ldrb	r1, [r7, #3]
 800701c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007020:	9303      	str	r3, [sp, #12]
 8007022:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007024:	9302      	str	r3, [sp, #8]
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	4623      	mov	r3, r4
 8007032:	f7fa fb55 	bl	80016e0 <HAL_HCD_HC_SubmitRequest>
 8007036:	4603      	mov	r3, r0
 8007038:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800703a:	7bfb      	ldrb	r3, [r7, #15]
 800703c:	4618      	mov	r0, r3
 800703e:	f000 f861 	bl	8007104 <USBH_Get_USB_Status>
 8007042:	4603      	mov	r3, r0
 8007044:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007046:	7bbb      	ldrb	r3, [r7, #14]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	bd90      	pop	{r4, r7, pc}

08007050 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	460b      	mov	r3, r1
 800705a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007062:	78fa      	ldrb	r2, [r7, #3]
 8007064:	4611      	mov	r1, r2
 8007066:	4618      	mov	r0, r3
 8007068:	f7fa fdd4 	bl	8001c14 <HAL_HCD_HC_GetURBState>
 800706c:	4603      	mov	r3, r0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	460b      	mov	r3, r1
 8007080:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007088:	2b01      	cmp	r3, #1
 800708a:	d103      	bne.n	8007094 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 f864 	bl	800715c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007094:	20c8      	movs	r0, #200	; 0xc8
 8007096:	f7f9 ff09 	bl	8000eac <HAL_Delay>
  return USBH_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	70fb      	strb	r3, [r7, #3]
 80070b0:	4613      	mov	r3, r2
 80070b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80070ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80070bc:	78fb      	ldrb	r3, [r7, #3]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	212c      	movs	r1, #44	; 0x2c
 80070c2:	fb01 f303 	mul.w	r3, r1, r3
 80070c6:	4413      	add	r3, r2
 80070c8:	333b      	adds	r3, #59	; 0x3b
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d009      	beq.n	80070e4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	212c      	movs	r1, #44	; 0x2c
 80070d6:	fb01 f303 	mul.w	r3, r1, r3
 80070da:	4413      	add	r3, r2
 80070dc:	3354      	adds	r3, #84	; 0x54
 80070de:	78ba      	ldrb	r2, [r7, #2]
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	e008      	b.n	80070f6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	212c      	movs	r1, #44	; 0x2c
 80070ea:	fb01 f303 	mul.w	r3, r1, r3
 80070ee:	4413      	add	r3, r2
 80070f0:	3355      	adds	r3, #85	; 0x55
 80070f2:	78ba      	ldrb	r2, [r7, #2]
 80070f4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	2b03      	cmp	r3, #3
 8007116:	d817      	bhi.n	8007148 <USBH_Get_USB_Status+0x44>
 8007118:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <USBH_Get_USB_Status+0x1c>)
 800711a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711e:	bf00      	nop
 8007120:	08007131 	.word	0x08007131
 8007124:	08007137 	.word	0x08007137
 8007128:	0800713d 	.word	0x0800713d
 800712c:	08007143 	.word	0x08007143
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]
    break;
 8007134:	e00b      	b.n	800714e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007136:	2302      	movs	r3, #2
 8007138:	73fb      	strb	r3, [r7, #15]
    break;
 800713a:	e008      	b.n	800714e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800713c:	2301      	movs	r3, #1
 800713e:	73fb      	strb	r3, [r7, #15]
    break;
 8007140:	e005      	b.n	800714e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007142:	2302      	movs	r3, #2
 8007144:	73fb      	strb	r3, [r7, #15]
    break;
 8007146:	e002      	b.n	800714e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007148:	2302      	movs	r3, #2
 800714a:	73fb      	strb	r3, [r7, #15]
    break;
 800714c:	bf00      	nop
  }
  return usb_status;
 800714e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800716a:	79fb      	ldrb	r3, [r7, #7]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8007170:	2301      	movs	r3, #1
 8007172:	73fb      	strb	r3, [r7, #15]
 8007174:	e001      	b.n	800717a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	461a      	mov	r2, r3
 800717e:	2101      	movs	r1, #1
 8007180:	4803      	ldr	r0, [pc, #12]	; (8007190 <MX_DriverVbusFS+0x34>)
 8007182:	f7fa f965 	bl	8001450 <HAL_GPIO_WritePin>
}
 8007186:	bf00      	nop
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40020800 	.word	0x40020800

08007194 <__errno>:
 8007194:	4b01      	ldr	r3, [pc, #4]	; (800719c <__errno+0x8>)
 8007196:	6818      	ldr	r0, [r3, #0]
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	2000002c 	.word	0x2000002c

080071a0 <__libc_init_array>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	4d0d      	ldr	r5, [pc, #52]	; (80071d8 <__libc_init_array+0x38>)
 80071a4:	4c0d      	ldr	r4, [pc, #52]	; (80071dc <__libc_init_array+0x3c>)
 80071a6:	1b64      	subs	r4, r4, r5
 80071a8:	10a4      	asrs	r4, r4, #2
 80071aa:	2600      	movs	r6, #0
 80071ac:	42a6      	cmp	r6, r4
 80071ae:	d109      	bne.n	80071c4 <__libc_init_array+0x24>
 80071b0:	4d0b      	ldr	r5, [pc, #44]	; (80071e0 <__libc_init_array+0x40>)
 80071b2:	4c0c      	ldr	r4, [pc, #48]	; (80071e4 <__libc_init_array+0x44>)
 80071b4:	f000 f8f8 	bl	80073a8 <_init>
 80071b8:	1b64      	subs	r4, r4, r5
 80071ba:	10a4      	asrs	r4, r4, #2
 80071bc:	2600      	movs	r6, #0
 80071be:	42a6      	cmp	r6, r4
 80071c0:	d105      	bne.n	80071ce <__libc_init_array+0x2e>
 80071c2:	bd70      	pop	{r4, r5, r6, pc}
 80071c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c8:	4798      	blx	r3
 80071ca:	3601      	adds	r6, #1
 80071cc:	e7ee      	b.n	80071ac <__libc_init_array+0xc>
 80071ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d2:	4798      	blx	r3
 80071d4:	3601      	adds	r6, #1
 80071d6:	e7f2      	b.n	80071be <__libc_init_array+0x1e>
 80071d8:	080073e4 	.word	0x080073e4
 80071dc:	080073e4 	.word	0x080073e4
 80071e0:	080073e4 	.word	0x080073e4
 80071e4:	080073e8 	.word	0x080073e8

080071e8 <malloc>:
 80071e8:	4b02      	ldr	r3, [pc, #8]	; (80071f4 <malloc+0xc>)
 80071ea:	4601      	mov	r1, r0
 80071ec:	6818      	ldr	r0, [r3, #0]
 80071ee:	f000 b863 	b.w	80072b8 <_malloc_r>
 80071f2:	bf00      	nop
 80071f4:	2000002c 	.word	0x2000002c

080071f8 <free>:
 80071f8:	4b02      	ldr	r3, [pc, #8]	; (8007204 <free+0xc>)
 80071fa:	4601      	mov	r1, r0
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	f000 b80b 	b.w	8007218 <_free_r>
 8007202:	bf00      	nop
 8007204:	2000002c 	.word	0x2000002c

08007208 <memset>:
 8007208:	4402      	add	r2, r0
 800720a:	4603      	mov	r3, r0
 800720c:	4293      	cmp	r3, r2
 800720e:	d100      	bne.n	8007212 <memset+0xa>
 8007210:	4770      	bx	lr
 8007212:	f803 1b01 	strb.w	r1, [r3], #1
 8007216:	e7f9      	b.n	800720c <memset+0x4>

08007218 <_free_r>:
 8007218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800721a:	2900      	cmp	r1, #0
 800721c:	d048      	beq.n	80072b0 <_free_r+0x98>
 800721e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007222:	9001      	str	r0, [sp, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f1a1 0404 	sub.w	r4, r1, #4
 800722a:	bfb8      	it	lt
 800722c:	18e4      	addlt	r4, r4, r3
 800722e:	f000 f8ad 	bl	800738c <__malloc_lock>
 8007232:	4a20      	ldr	r2, [pc, #128]	; (80072b4 <_free_r+0x9c>)
 8007234:	9801      	ldr	r0, [sp, #4]
 8007236:	6813      	ldr	r3, [r2, #0]
 8007238:	4615      	mov	r5, r2
 800723a:	b933      	cbnz	r3, 800724a <_free_r+0x32>
 800723c:	6063      	str	r3, [r4, #4]
 800723e:	6014      	str	r4, [r2, #0]
 8007240:	b003      	add	sp, #12
 8007242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007246:	f000 b8a7 	b.w	8007398 <__malloc_unlock>
 800724a:	42a3      	cmp	r3, r4
 800724c:	d90b      	bls.n	8007266 <_free_r+0x4e>
 800724e:	6821      	ldr	r1, [r4, #0]
 8007250:	1862      	adds	r2, r4, r1
 8007252:	4293      	cmp	r3, r2
 8007254:	bf04      	itt	eq
 8007256:	681a      	ldreq	r2, [r3, #0]
 8007258:	685b      	ldreq	r3, [r3, #4]
 800725a:	6063      	str	r3, [r4, #4]
 800725c:	bf04      	itt	eq
 800725e:	1852      	addeq	r2, r2, r1
 8007260:	6022      	streq	r2, [r4, #0]
 8007262:	602c      	str	r4, [r5, #0]
 8007264:	e7ec      	b.n	8007240 <_free_r+0x28>
 8007266:	461a      	mov	r2, r3
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	b10b      	cbz	r3, 8007270 <_free_r+0x58>
 800726c:	42a3      	cmp	r3, r4
 800726e:	d9fa      	bls.n	8007266 <_free_r+0x4e>
 8007270:	6811      	ldr	r1, [r2, #0]
 8007272:	1855      	adds	r5, r2, r1
 8007274:	42a5      	cmp	r5, r4
 8007276:	d10b      	bne.n	8007290 <_free_r+0x78>
 8007278:	6824      	ldr	r4, [r4, #0]
 800727a:	4421      	add	r1, r4
 800727c:	1854      	adds	r4, r2, r1
 800727e:	42a3      	cmp	r3, r4
 8007280:	6011      	str	r1, [r2, #0]
 8007282:	d1dd      	bne.n	8007240 <_free_r+0x28>
 8007284:	681c      	ldr	r4, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	6053      	str	r3, [r2, #4]
 800728a:	4421      	add	r1, r4
 800728c:	6011      	str	r1, [r2, #0]
 800728e:	e7d7      	b.n	8007240 <_free_r+0x28>
 8007290:	d902      	bls.n	8007298 <_free_r+0x80>
 8007292:	230c      	movs	r3, #12
 8007294:	6003      	str	r3, [r0, #0]
 8007296:	e7d3      	b.n	8007240 <_free_r+0x28>
 8007298:	6825      	ldr	r5, [r4, #0]
 800729a:	1961      	adds	r1, r4, r5
 800729c:	428b      	cmp	r3, r1
 800729e:	bf04      	itt	eq
 80072a0:	6819      	ldreq	r1, [r3, #0]
 80072a2:	685b      	ldreq	r3, [r3, #4]
 80072a4:	6063      	str	r3, [r4, #4]
 80072a6:	bf04      	itt	eq
 80072a8:	1949      	addeq	r1, r1, r5
 80072aa:	6021      	streq	r1, [r4, #0]
 80072ac:	6054      	str	r4, [r2, #4]
 80072ae:	e7c7      	b.n	8007240 <_free_r+0x28>
 80072b0:	b003      	add	sp, #12
 80072b2:	bd30      	pop	{r4, r5, pc}
 80072b4:	200000b4 	.word	0x200000b4

080072b8 <_malloc_r>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	1ccd      	adds	r5, r1, #3
 80072bc:	f025 0503 	bic.w	r5, r5, #3
 80072c0:	3508      	adds	r5, #8
 80072c2:	2d0c      	cmp	r5, #12
 80072c4:	bf38      	it	cc
 80072c6:	250c      	movcc	r5, #12
 80072c8:	2d00      	cmp	r5, #0
 80072ca:	4606      	mov	r6, r0
 80072cc:	db01      	blt.n	80072d2 <_malloc_r+0x1a>
 80072ce:	42a9      	cmp	r1, r5
 80072d0:	d903      	bls.n	80072da <_malloc_r+0x22>
 80072d2:	230c      	movs	r3, #12
 80072d4:	6033      	str	r3, [r6, #0]
 80072d6:	2000      	movs	r0, #0
 80072d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072da:	f000 f857 	bl	800738c <__malloc_lock>
 80072de:	4921      	ldr	r1, [pc, #132]	; (8007364 <_malloc_r+0xac>)
 80072e0:	680a      	ldr	r2, [r1, #0]
 80072e2:	4614      	mov	r4, r2
 80072e4:	b99c      	cbnz	r4, 800730e <_malloc_r+0x56>
 80072e6:	4f20      	ldr	r7, [pc, #128]	; (8007368 <_malloc_r+0xb0>)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	b923      	cbnz	r3, 80072f6 <_malloc_r+0x3e>
 80072ec:	4621      	mov	r1, r4
 80072ee:	4630      	mov	r0, r6
 80072f0:	f000 f83c 	bl	800736c <_sbrk_r>
 80072f4:	6038      	str	r0, [r7, #0]
 80072f6:	4629      	mov	r1, r5
 80072f8:	4630      	mov	r0, r6
 80072fa:	f000 f837 	bl	800736c <_sbrk_r>
 80072fe:	1c43      	adds	r3, r0, #1
 8007300:	d123      	bne.n	800734a <_malloc_r+0x92>
 8007302:	230c      	movs	r3, #12
 8007304:	6033      	str	r3, [r6, #0]
 8007306:	4630      	mov	r0, r6
 8007308:	f000 f846 	bl	8007398 <__malloc_unlock>
 800730c:	e7e3      	b.n	80072d6 <_malloc_r+0x1e>
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	1b5b      	subs	r3, r3, r5
 8007312:	d417      	bmi.n	8007344 <_malloc_r+0x8c>
 8007314:	2b0b      	cmp	r3, #11
 8007316:	d903      	bls.n	8007320 <_malloc_r+0x68>
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	441c      	add	r4, r3
 800731c:	6025      	str	r5, [r4, #0]
 800731e:	e004      	b.n	800732a <_malloc_r+0x72>
 8007320:	6863      	ldr	r3, [r4, #4]
 8007322:	42a2      	cmp	r2, r4
 8007324:	bf0c      	ite	eq
 8007326:	600b      	streq	r3, [r1, #0]
 8007328:	6053      	strne	r3, [r2, #4]
 800732a:	4630      	mov	r0, r6
 800732c:	f000 f834 	bl	8007398 <__malloc_unlock>
 8007330:	f104 000b 	add.w	r0, r4, #11
 8007334:	1d23      	adds	r3, r4, #4
 8007336:	f020 0007 	bic.w	r0, r0, #7
 800733a:	1ac2      	subs	r2, r0, r3
 800733c:	d0cc      	beq.n	80072d8 <_malloc_r+0x20>
 800733e:	1a1b      	subs	r3, r3, r0
 8007340:	50a3      	str	r3, [r4, r2]
 8007342:	e7c9      	b.n	80072d8 <_malloc_r+0x20>
 8007344:	4622      	mov	r2, r4
 8007346:	6864      	ldr	r4, [r4, #4]
 8007348:	e7cc      	b.n	80072e4 <_malloc_r+0x2c>
 800734a:	1cc4      	adds	r4, r0, #3
 800734c:	f024 0403 	bic.w	r4, r4, #3
 8007350:	42a0      	cmp	r0, r4
 8007352:	d0e3      	beq.n	800731c <_malloc_r+0x64>
 8007354:	1a21      	subs	r1, r4, r0
 8007356:	4630      	mov	r0, r6
 8007358:	f000 f808 	bl	800736c <_sbrk_r>
 800735c:	3001      	adds	r0, #1
 800735e:	d1dd      	bne.n	800731c <_malloc_r+0x64>
 8007360:	e7cf      	b.n	8007302 <_malloc_r+0x4a>
 8007362:	bf00      	nop
 8007364:	200000b4 	.word	0x200000b4
 8007368:	200000b8 	.word	0x200000b8

0800736c <_sbrk_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d06      	ldr	r5, [pc, #24]	; (8007388 <_sbrk_r+0x1c>)
 8007370:	2300      	movs	r3, #0
 8007372:	4604      	mov	r4, r0
 8007374:	4608      	mov	r0, r1
 8007376:	602b      	str	r3, [r5, #0]
 8007378:	f7f9 fcb4 	bl	8000ce4 <_sbrk>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_sbrk_r+0x1a>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	b103      	cbz	r3, 8007386 <_sbrk_r+0x1a>
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	200008d8 	.word	0x200008d8

0800738c <__malloc_lock>:
 800738c:	4801      	ldr	r0, [pc, #4]	; (8007394 <__malloc_lock+0x8>)
 800738e:	f000 b809 	b.w	80073a4 <__retarget_lock_acquire_recursive>
 8007392:	bf00      	nop
 8007394:	200008e0 	.word	0x200008e0

08007398 <__malloc_unlock>:
 8007398:	4801      	ldr	r0, [pc, #4]	; (80073a0 <__malloc_unlock+0x8>)
 800739a:	f000 b804 	b.w	80073a6 <__retarget_lock_release_recursive>
 800739e:	bf00      	nop
 80073a0:	200008e0 	.word	0x200008e0

080073a4 <__retarget_lock_acquire_recursive>:
 80073a4:	4770      	bx	lr

080073a6 <__retarget_lock_release_recursive>:
 80073a6:	4770      	bx	lr

080073a8 <_init>:
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	bf00      	nop
 80073ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ae:	bc08      	pop	{r3}
 80073b0:	469e      	mov	lr, r3
 80073b2:	4770      	bx	lr

080073b4 <_fini>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	bf00      	nop
 80073b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ba:	bc08      	pop	{r3}
 80073bc:	469e      	mov	lr, r3
 80073be:	4770      	bx	lr
