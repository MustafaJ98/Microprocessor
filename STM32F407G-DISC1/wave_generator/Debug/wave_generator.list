
wave_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006188  08006188  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006190  08006190  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000784  20000090  08006228  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  08006228  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a87  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003345  00000000  00000000  00036b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00039e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  0003ac98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fc6  00000000  00000000  0003b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012942  00000000  00000000  0005e936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8d3f  00000000  00000000  00071278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139fb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba4  00000000  00000000  0013a00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080060fc 	.word	0x080060fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080060fc 	.word	0x080060fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b09a      	sub	sp, #104	; 0x68
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fbb3 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f867 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f931 	bl	8000734 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f901 	bl	80006d8 <MX_I2C1_Init>
  MX_USB_HOST_Init();
 80004d6:	f005 fa57 	bl	8005988 <MX_USB_HOST_Init>
  MX_DAC_Init();
 80004da:	f000 f8c9 	bl	8000670 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  	uint32_t DAC_OUT[6] = {0, 1400, 2800, 4094, 2800, 1400};
 80004de:	4b2b      	ldr	r3, [pc, #172]	; (800058c <main+0xcc>)
 80004e0:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80004e4:	461d      	mov	r5, r3
 80004e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004ee:	e884 0003 	stmia.w	r4, {r0, r1}
    uint32_t Triangle[16] = {0, 500, 1000,1500, 2000,2500, 3000,3500, 4000,3500,3000,2500,2000,1500,1000,500};
 80004f2:	4b27      	ldr	r3, [pc, #156]	; (8000590 <main+0xd0>)
 80004f4:	1d3c      	adds	r4, r7, #4
 80004f6:	461d      	mov	r5, r3
 80004f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000504:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (uint8_t i = 0; i < 20; i++)
         {
          sine_wave[i] = 4095*(uint32_t)arm_sinf32(time_rad[i]);
         }*/

    uint8_t i=0, j = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000512:	2300      	movs	r3, #0
 8000514:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    uint32_t dac_out,trig_out;
    HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8000518:	2100      	movs	r1, #0
 800051a:	481e      	ldr	r0, [pc, #120]	; (8000594 <main+0xd4>)
 800051c:	f000 fd51 	bl	8000fc2 <HAL_DAC_Start>
    HAL_DAC_Start(&hdac, DAC1_CHANNEL_2);
 8000520:	2110      	movs	r1, #16
 8000522:	481c      	ldr	r0, [pc, #112]	; (8000594 <main+0xd4>)
 8000524:	f000 fd4d 	bl	8000fc2 <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
	  dac_out = DAC_OUT[i++];
 8000528:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800052c:	1c5a      	adds	r2, r3, #1
 800052e:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000538:	4413      	add	r3, r2
 800053a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800053e:	663b      	str	r3, [r7, #96]	; 0x60
	  trig_out = Triangle[j++];
 8000540:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000544:	1c5a      	adds	r2, r3, #1
 8000546:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000550:	4413      	add	r3, r2
 8000552:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8000556:	65fb      	str	r3, [r7, #92]	; 0x5c
	  DAC->DHR12R1 = dac_out;
 8000558:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <main+0xd8>)
 800055a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800055c:	6093      	str	r3, [r2, #8]
	  DAC-> DHR12R2 = trig_out;
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <main+0xd8>)
 8000560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000562:	6153      	str	r3, [r2, #20]
	 	      	if(i == 6) { i = 0; }
 8000564:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000568:	2b06      	cmp	r3, #6
 800056a:	d102      	bne.n	8000572 <main+0xb2>
 800056c:	2300      	movs	r3, #0
 800056e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	 	      	if(j == 16) { j = 0; }
 8000572:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000576:	2b10      	cmp	r3, #16
 8000578:	d102      	bne.n	8000580 <main+0xc0>
 800057a:	2300      	movs	r3, #0
 800057c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	 HAL_Delay(500);
 8000580:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000584:	f000 fbc6 	bl	8000d14 <HAL_Delay>
	  dac_out = DAC_OUT[i++];
 8000588:	e7ce      	b.n	8000528 <main+0x68>
 800058a:	bf00      	nop
 800058c:	08006114 	.word	0x08006114
 8000590:	0800612c 	.word	0x0800612c
 8000594:	20000110 	.word	0x20000110
 8000598:	40007400 	.word	0x40007400

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f005 fcd6 	bl	8005f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a27      	ldr	r2, [pc, #156]	; (8000668 <SystemClock_Config+0xcc>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a21      	ldr	r2, [pc, #132]	; (800066c <SystemClock_Config+0xd0>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000610:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000614:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061a:	2307      	movs	r3, #7
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fdb0 	bl	8003188 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062e:	f000 f99f 	bl	8000970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2105      	movs	r1, #5
 8000650:	4618      	mov	r0, r3
 8000652:	f003 f811 	bl	8003678 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800065c:	f000 f988 	bl	8000970 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	; 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000676:	463b      	mov	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_DAC_Init+0x60>)
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <MX_DAC_Init+0x64>)
 8000682:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <MX_DAC_Init+0x60>)
 8000686:	f000 fc7a 	bl	8000f7e <HAL_DAC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000690:	f000 f96e 	bl	8000970 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	4619      	mov	r1, r3
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MX_DAC_Init+0x60>)
 80006a4:	f000 fcdf 	bl	8001066 <HAL_DAC_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006ae:	f000 f95f 	bl	8000970 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	2210      	movs	r2, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_DAC_Init+0x60>)
 80006ba:	f000 fcd4 	bl	8001066 <HAL_DAC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80006c4:	f000 f954 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000110 	.word	0x20000110
 80006d4:	40007400 	.word	0x40007400

080006d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C1_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C1_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C1_Init+0x50>)
 8000716:	f002 fbf3 	bl	8002f00 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 f926 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000bc 	.word	0x200000bc
 800072c:	40005400 	.word	0x40005400
 8000730:	000186a0 	.word	0x000186a0

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
 800074e:	4b81      	ldr	r3, [pc, #516]	; (8000954 <MX_GPIO_Init+0x220>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a80      	ldr	r2, [pc, #512]	; (8000954 <MX_GPIO_Init+0x220>)
 8000754:	f043 0310 	orr.w	r3, r3, #16
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b7e      	ldr	r3, [pc, #504]	; (8000954 <MX_GPIO_Init+0x220>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0310 	and.w	r3, r3, #16
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	4b7a      	ldr	r3, [pc, #488]	; (8000954 <MX_GPIO_Init+0x220>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a79      	ldr	r2, [pc, #484]	; (8000954 <MX_GPIO_Init+0x220>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b77      	ldr	r3, [pc, #476]	; (8000954 <MX_GPIO_Init+0x220>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b73      	ldr	r3, [pc, #460]	; (8000954 <MX_GPIO_Init+0x220>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a72      	ldr	r2, [pc, #456]	; (8000954 <MX_GPIO_Init+0x220>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b70      	ldr	r3, [pc, #448]	; (8000954 <MX_GPIO_Init+0x220>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b6c      	ldr	r3, [pc, #432]	; (8000954 <MX_GPIO_Init+0x220>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a6b      	ldr	r2, [pc, #428]	; (8000954 <MX_GPIO_Init+0x220>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b69      	ldr	r3, [pc, #420]	; (8000954 <MX_GPIO_Init+0x220>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b65      	ldr	r3, [pc, #404]	; (8000954 <MX_GPIO_Init+0x220>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a64      	ldr	r2, [pc, #400]	; (8000954 <MX_GPIO_Init+0x220>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b62      	ldr	r3, [pc, #392]	; (8000954 <MX_GPIO_Init+0x220>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b5e      	ldr	r3, [pc, #376]	; (8000954 <MX_GPIO_Init+0x220>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a5d      	ldr	r2, [pc, #372]	; (8000954 <MX_GPIO_Init+0x220>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b5b      	ldr	r3, [pc, #364]	; (8000954 <MX_GPIO_Init+0x220>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	4858      	ldr	r0, [pc, #352]	; (8000958 <MX_GPIO_Init+0x224>)
 80007f8:	f000 fe20 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2101      	movs	r1, #1
 8000800:	4856      	ldr	r0, [pc, #344]	; (800095c <MX_GPIO_Init+0x228>)
 8000802:	f000 fe1b 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000806:	2200      	movs	r2, #0
 8000808:	f24f 0110 	movw	r1, #61456	; 0xf010
 800080c:	4854      	ldr	r0, [pc, #336]	; (8000960 <MX_GPIO_Init+0x22c>)
 800080e:	f000 fe15 	bl	800143c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000812:	2308      	movs	r3, #8
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	484b      	ldr	r0, [pc, #300]	; (8000958 <MX_GPIO_Init+0x224>)
 800082a:	f000 fc6b 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800082e:	2301      	movs	r3, #1
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4845      	ldr	r0, [pc, #276]	; (800095c <MX_GPIO_Init+0x228>)
 8000846:	f000 fc5d 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800085a:	2305      	movs	r3, #5
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	483d      	ldr	r0, [pc, #244]	; (800095c <MX_GPIO_Init+0x228>)
 8000866:	f000 fc4d 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086a:	2301      	movs	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800086e:	4b3d      	ldr	r3, [pc, #244]	; (8000964 <MX_GPIO_Init+0x230>)
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	483a      	ldr	r0, [pc, #232]	; (8000968 <MX_GPIO_Init+0x234>)
 800087e:	f000 fc41 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000882:	23c0      	movs	r3, #192	; 0xc0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4832      	ldr	r0, [pc, #200]	; (8000968 <MX_GPIO_Init+0x234>)
 800089e:	f000 fc31 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a2:	2304      	movs	r3, #4
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	482d      	ldr	r0, [pc, #180]	; (800096c <MX_GPIO_Init+0x238>)
 80008b6:	f000 fc25 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008cc:	2305      	movs	r3, #5
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4825      	ldr	r0, [pc, #148]	; (800096c <MX_GPIO_Init+0x238>)
 80008d8:	f000 fc14 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008dc:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	481a      	ldr	r0, [pc, #104]	; (8000960 <MX_GPIO_Init+0x22c>)
 80008f6:	f000 fc05 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008fa:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800090c:	2306      	movs	r3, #6
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4811      	ldr	r0, [pc, #68]	; (800095c <MX_GPIO_Init+0x228>)
 8000918:	f000 fbf4 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800091c:	2320      	movs	r3, #32
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_GPIO_Init+0x22c>)
 8000930:	f000 fbe8 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_GPIO_Init+0x230>)
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_GPIO_Init+0x224>)
 8000948:	f000 fbdc 	bl	8001104 <HAL_GPIO_Init>

}
 800094c:	bf00      	nop
 800094e:	3730      	adds	r7, #48	; 0x30
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40021000 	.word	0x40021000
 800095c:	40020800 	.word	0x40020800
 8000960:	40020c00 	.word	0x40020c00
 8000964:	10120000 	.word	0x10120000
 8000968:	40020000 	.word	0x40020000
 800096c:	40020400 	.word	0x40020400

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>
	...

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <HAL_MspInit+0x4c>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000990:	6453      	str	r3, [r2, #68]	; 0x44
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ba:	2007      	movs	r0, #7
 80009bc:	f000 fa9e 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800

080009cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <HAL_DAC_MspInit+0x7c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d127      	bne.n	8000a3e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <HAL_DAC_MspInit+0x80>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <HAL_DAC_MspInit+0x80>)
 80009f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <HAL_DAC_MspInit+0x80>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_DAC_MspInit+0x80>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_DAC_MspInit+0x80>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <HAL_DAC_MspInit+0x80>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a26:	2330      	movs	r3, #48	; 0x30
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <HAL_DAC_MspInit+0x84>)
 8000a3a:	f000 fb63 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40007400 	.word	0x40007400
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020000 	.word	0x40020000

08000a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <HAL_I2C_MspInit+0x84>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12c      	bne.n	8000ad0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_I2C_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <HAL_I2C_MspInit+0x88>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_I2C_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a98:	2312      	movs	r3, #18
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <HAL_I2C_MspInit+0x8c>)
 8000ab0:	f000 fb28 	bl	8001104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_I2C_MspInit+0x88>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_I2C_MspInit+0x88>)
 8000abe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_I2C_MspInit+0x88>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b30:	f000 f8d0 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <OTG_FS_IRQHandler+0x10>)
 8000b3e:	f000 ff01 	bl	8001944 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000500 	.word	0x20000500

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f005 f9b4 	bl	8005ee8 <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20020000 	.word	0x20020000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	200000ac 	.word	0x200000ac
 8000bb4:	20000818 	.word	0x20000818

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be2:	490e      	ldr	r1, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf8:	4c0b      	ldr	r4, [pc, #44]	; (8000c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c06:	f7ff ffd7 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f005 f973 	bl	8005ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fc57 	bl	80004c0 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c20:	08006198 	.word	0x08006198
  ldr r2, =_sbss
 8000c24:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000c28:	20000814 	.word	0x20000814

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f94f 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fe8a 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f967 	bl	8000f66 <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 f92f 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000124 	.word	0x20000124

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000124 	.word	0x20000124

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_Delay+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff29 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff3e 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff8e 	bl	8000e50 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5d 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff31 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa2 	bl	8000eb8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e014      	b.n	8000fba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d105      	bne.n	8000fa6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff fd13 	bl	80009cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	795b      	ldrb	r3, [r3, #5]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <HAL_DAC_Start+0x16>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e040      	b.n	800105a <HAL_DAC_Start+0x98>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6819      	ldr	r1, [r3, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	f003 0310 	and.w	r3, r3, #16
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10f      	bne.n	8001022 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800100c:	2b3c      	cmp	r3, #60	; 0x3c
 800100e:	d11d      	bne.n	800104c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	e014      	b.n	800104c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	213c      	movs	r1, #60	; 0x3c
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	429a      	cmp	r2, r3
 800103a:	d107      	bne.n	800104c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0202 	orr.w	r2, r2, #2
 800104a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001066:	b480      	push	{r7}
 8001068:	b087      	sub	sp, #28
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	795b      	ldrb	r3, [r3, #5]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_DAC_ConfigChannel+0x18>
 800107a:	2302      	movs	r3, #2
 800107c:	e03c      	b.n	80010f8 <HAL_DAC_ConfigChannel+0x92>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2202      	movs	r2, #2
 8001088:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	f640 72fe 	movw	r2, #4094	; 0xffe
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0310 	and.w	r3, r3, #16
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6819      	ldr	r1, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	22c0      	movs	r2, #192	; 0xc0
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43da      	mvns	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	400a      	ands	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2201      	movs	r2, #1
 80010ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	e16b      	b.n	80013f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 815a 	bne.w	80013f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d005      	beq.n	8001156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	2b02      	cmp	r3, #2
 8001154:	d130      	bne.n	80011b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 0201 	and.w	r2, r3, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d017      	beq.n	80011f4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80b4 	beq.w	80013f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b60      	ldr	r3, [pc, #384]	; (8001410 <HAL_GPIO_Init+0x30c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a5f      	ldr	r2, [pc, #380]	; (8001410 <HAL_GPIO_Init+0x30c>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <HAL_GPIO_Init+0x30c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a6:	4a5b      	ldr	r2, [pc, #364]	; (8001414 <HAL_GPIO_Init+0x310>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a52      	ldr	r2, [pc, #328]	; (8001418 <HAL_GPIO_Init+0x314>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d02b      	beq.n	800132a <HAL_GPIO_Init+0x226>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a51      	ldr	r2, [pc, #324]	; (800141c <HAL_GPIO_Init+0x318>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d025      	beq.n	8001326 <HAL_GPIO_Init+0x222>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a50      	ldr	r2, [pc, #320]	; (8001420 <HAL_GPIO_Init+0x31c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01f      	beq.n	8001322 <HAL_GPIO_Init+0x21e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4f      	ldr	r2, [pc, #316]	; (8001424 <HAL_GPIO_Init+0x320>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x21a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4e      	ldr	r2, [pc, #312]	; (8001428 <HAL_GPIO_Init+0x324>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x216>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4d      	ldr	r2, [pc, #308]	; (800142c <HAL_GPIO_Init+0x328>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x212>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_GPIO_Init+0x32c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x20e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4b      	ldr	r2, [pc, #300]	; (8001434 <HAL_GPIO_Init+0x330>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x20a>
 800130a:	2307      	movs	r3, #7
 800130c:	e00e      	b.n	800132c <HAL_GPIO_Init+0x228>
 800130e:	2308      	movs	r3, #8
 8001310:	e00c      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001312:	2306      	movs	r3, #6
 8001314:	e00a      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001316:	2305      	movs	r3, #5
 8001318:	e008      	b.n	800132c <HAL_GPIO_Init+0x228>
 800131a:	2304      	movs	r3, #4
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x228>
 800131e:	2303      	movs	r3, #3
 8001320:	e004      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001322:	2302      	movs	r3, #2
 8001324:	e002      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x228>
 800132a:	2300      	movs	r3, #0
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	f002 0203 	and.w	r2, r2, #3
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	4093      	lsls	r3, r2
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800133c:	4935      	ldr	r1, [pc, #212]	; (8001414 <HAL_GPIO_Init+0x310>)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134a:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <HAL_GPIO_Init+0x334>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136e:	4a32      	ldr	r2, [pc, #200]	; (8001438 <HAL_GPIO_Init+0x334>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001374:	4b30      	ldr	r3, [pc, #192]	; (8001438 <HAL_GPIO_Init+0x334>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001398:	4a27      	ldr	r2, [pc, #156]	; (8001438 <HAL_GPIO_Init+0x334>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_GPIO_Init+0x334>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c2:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_GPIO_Init+0x334>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_GPIO_Init+0x334>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <HAL_GPIO_Init+0x334>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3301      	adds	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	f67f ae90 	bls.w	8001120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40013800 	.word	0x40013800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	40020800 	.word	0x40020800
 8001424:	40020c00 	.word	0x40020c00
 8001428:	40021000 	.word	0x40021000
 800142c:	40021400 	.word	0x40021400
 8001430:	40021800 	.word	0x40021800
 8001434:	40021c00 	.word	0x40021c00
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001458:	e003      	b.n	8001462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800146e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001470:	b08f      	sub	sp, #60	; 0x3c
 8001472:	af0a      	add	r7, sp, #40	; 0x28
 8001474:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e054      	b.n	800152a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d106      	bne.n	80014a0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f004 fac8 	bl	8005a30 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2203      	movs	r2, #3
 80014a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 fb34 	bl	8003b2c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	687e      	ldr	r6, [r7, #4]
 80014cc:	466d      	mov	r5, sp
 80014ce:	f106 0410 	add.w	r4, r6, #16
 80014d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014de:	e885 0003 	stmia.w	r5, {r0, r1}
 80014e2:	1d33      	adds	r3, r6, #4
 80014e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e6:	6838      	ldr	r0, [r7, #0]
 80014e8:	f002 faae 	bl	8003a48 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2101      	movs	r1, #1
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fb2b 	bl	8003b4e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	687e      	ldr	r6, [r7, #4]
 8001500:	466d      	mov	r5, sp
 8001502:	f106 0410 	add.w	r4, r6, #16
 8001506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001512:	e885 0003 	stmia.w	r5, {r0, r1}
 8001516:	1d33      	adds	r3, r6, #4
 8001518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800151a:	6838      	ldr	r0, [r7, #0]
 800151c:	f002 fc3e 	bl	8003d9c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001532 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001532:	b590      	push	{r4, r7, lr}
 8001534:	b089      	sub	sp, #36	; 0x24
 8001536:	af04      	add	r7, sp, #16
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	4608      	mov	r0, r1
 800153c:	4611      	mov	r1, r2
 800153e:	461a      	mov	r2, r3
 8001540:	4603      	mov	r3, r0
 8001542:	70fb      	strb	r3, [r7, #3]
 8001544:	460b      	mov	r3, r1
 8001546:	70bb      	strb	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_HCD_HC_Init+0x28>
 8001556:	2302      	movs	r3, #2
 8001558:	e076      	b.n	8001648 <HAL_HCD_HC_Init+0x116>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	212c      	movs	r1, #44	; 0x2c
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	333d      	adds	r3, #61	; 0x3d
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	212c      	movs	r1, #44	; 0x2c
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	3338      	adds	r3, #56	; 0x38
 8001582:	787a      	ldrb	r2, [r7, #1]
 8001584:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	212c      	movs	r1, #44	; 0x2c
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	4413      	add	r3, r2
 8001592:	3340      	adds	r3, #64	; 0x40
 8001594:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001596:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	212c      	movs	r1, #44	; 0x2c
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	3339      	adds	r3, #57	; 0x39
 80015a6:	78fa      	ldrb	r2, [r7, #3]
 80015a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	212c      	movs	r1, #44	; 0x2c
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	333f      	adds	r3, #63	; 0x3f
 80015b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	78ba      	ldrb	r2, [r7, #2]
 80015c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015c6:	b2d0      	uxtb	r0, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	212c      	movs	r1, #44	; 0x2c
 80015cc:	fb01 f303 	mul.w	r3, r1, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	333a      	adds	r3, #58	; 0x3a
 80015d4:	4602      	mov	r2, r0
 80015d6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da09      	bge.n	80015f4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	212c      	movs	r1, #44	; 0x2c
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	333b      	adds	r3, #59	; 0x3b
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	e008      	b.n	8001606 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	212c      	movs	r1, #44	; 0x2c
 80015fa:	fb01 f303 	mul.w	r3, r1, r3
 80015fe:	4413      	add	r3, r2
 8001600:	333b      	adds	r3, #59	; 0x3b
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	212c      	movs	r1, #44	; 0x2c
 800160c:	fb01 f303 	mul.w	r3, r1, r3
 8001610:	4413      	add	r3, r2
 8001612:	333c      	adds	r3, #60	; 0x3c
 8001614:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001618:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	787c      	ldrb	r4, [r7, #1]
 8001620:	78ba      	ldrb	r2, [r7, #2]
 8001622:	78f9      	ldrb	r1, [r7, #3]
 8001624:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	4623      	mov	r3, r4
 8001636:	f002 fd09 	bl	800404c <USB_HC_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	bd90      	pop	{r4, r7, pc}

08001650 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_HCD_HC_Halt+0x1e>
 800166a:	2302      	movs	r3, #2
 800166c:	e00f      	b.n	800168e <HAL_HCD_HC_Halt+0x3e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f002 ff45 	bl	800450e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	4608      	mov	r0, r1
 80016a2:	4611      	mov	r1, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	70fb      	strb	r3, [r7, #3]
 80016aa:	460b      	mov	r3, r1
 80016ac:	70bb      	strb	r3, [r7, #2]
 80016ae:	4613      	mov	r3, r2
 80016b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	212c      	movs	r1, #44	; 0x2c
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	333b      	adds	r3, #59	; 0x3b
 80016c0:	78ba      	ldrb	r2, [r7, #2]
 80016c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	212c      	movs	r1, #44	; 0x2c
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	333f      	adds	r3, #63	; 0x3f
 80016d2:	787a      	ldrb	r2, [r7, #1]
 80016d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016d6:	7c3b      	ldrb	r3, [r7, #16]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d112      	bne.n	8001702 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	212c      	movs	r1, #44	; 0x2c
 80016e2:	fb01 f303 	mul.w	r3, r1, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	3342      	adds	r3, #66	; 0x42
 80016ea:	2203      	movs	r2, #3
 80016ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	333d      	adds	r3, #61	; 0x3d
 80016fc:	7f3a      	ldrb	r2, [r7, #28]
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	e008      	b.n	8001714 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	212c      	movs	r1, #44	; 0x2c
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	4413      	add	r3, r2
 800170e:	3342      	adds	r3, #66	; 0x42
 8001710:	2202      	movs	r2, #2
 8001712:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	2b03      	cmp	r3, #3
 8001718:	f200 80c6 	bhi.w	80018a8 <HAL_HCD_HC_SubmitRequest+0x210>
 800171c:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001735 	.word	0x08001735
 8001728:	08001895 	.word	0x08001895
 800172c:	08001799 	.word	0x08001799
 8001730:	08001817 	.word	0x08001817
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001734:	7c3b      	ldrb	r3, [r7, #16]
 8001736:	2b01      	cmp	r3, #1
 8001738:	f040 80b8 	bne.w	80018ac <HAL_HCD_HC_SubmitRequest+0x214>
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f040 80b4 	bne.w	80018ac <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001744:	8b3b      	ldrh	r3, [r7, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d108      	bne.n	800175c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3355      	adds	r3, #85	; 0x55
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	212c      	movs	r1, #44	; 0x2c
 8001762:	fb01 f303 	mul.w	r3, r1, r3
 8001766:	4413      	add	r3, r2
 8001768:	3355      	adds	r3, #85	; 0x55
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d109      	bne.n	8001784 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	212c      	movs	r1, #44	; 0x2c
 8001776:	fb01 f303 	mul.w	r3, r1, r3
 800177a:	4413      	add	r3, r2
 800177c:	3342      	adds	r3, #66	; 0x42
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001782:	e093      	b.n	80018ac <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	212c      	movs	r1, #44	; 0x2c
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	4413      	add	r3, r2
 8001790:	3342      	adds	r3, #66	; 0x42
 8001792:	2202      	movs	r2, #2
 8001794:	701a      	strb	r2, [r3, #0]
      break;
 8001796:	e089      	b.n	80018ac <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001798:	78bb      	ldrb	r3, [r7, #2]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d11d      	bne.n	80017da <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	212c      	movs	r1, #44	; 0x2c
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	3355      	adds	r3, #85	; 0x55
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	212c      	movs	r1, #44	; 0x2c
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	3342      	adds	r3, #66	; 0x42
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017c4:	e073      	b.n	80018ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	212c      	movs	r1, #44	; 0x2c
 80017cc:	fb01 f303 	mul.w	r3, r1, r3
 80017d0:	4413      	add	r3, r2
 80017d2:	3342      	adds	r3, #66	; 0x42
 80017d4:	2202      	movs	r2, #2
 80017d6:	701a      	strb	r2, [r3, #0]
      break;
 80017d8:	e069      	b.n	80018ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	212c      	movs	r1, #44	; 0x2c
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	3354      	adds	r3, #84	; 0x54
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	212c      	movs	r1, #44	; 0x2c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	3342      	adds	r3, #66	; 0x42
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
      break;
 8001800:	e055      	b.n	80018ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	212c      	movs	r1, #44	; 0x2c
 8001808:	fb01 f303 	mul.w	r3, r1, r3
 800180c:	4413      	add	r3, r2
 800180e:	3342      	adds	r3, #66	; 0x42
 8001810:	2202      	movs	r2, #2
 8001812:	701a      	strb	r2, [r3, #0]
      break;
 8001814:	e04b      	b.n	80018ae <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001816:	78bb      	ldrb	r3, [r7, #2]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d11d      	bne.n	8001858 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	212c      	movs	r1, #44	; 0x2c
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	3355      	adds	r3, #85	; 0x55
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d109      	bne.n	8001844 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3342      	adds	r3, #66	; 0x42
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001842:	e034      	b.n	80018ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	212c      	movs	r1, #44	; 0x2c
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	4413      	add	r3, r2
 8001850:	3342      	adds	r3, #66	; 0x42
 8001852:	2202      	movs	r2, #2
 8001854:	701a      	strb	r2, [r3, #0]
      break;
 8001856:	e02a      	b.n	80018ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	212c      	movs	r1, #44	; 0x2c
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	3354      	adds	r3, #84	; 0x54
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	212c      	movs	r1, #44	; 0x2c
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	3342      	adds	r3, #66	; 0x42
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
      break;
 800187e:	e016      	b.n	80018ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	212c      	movs	r1, #44	; 0x2c
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	3342      	adds	r3, #66	; 0x42
 800188e:	2202      	movs	r2, #2
 8001890:	701a      	strb	r2, [r3, #0]
      break;
 8001892:	e00c      	b.n	80018ae <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	212c      	movs	r1, #44	; 0x2c
 800189a:	fb01 f303 	mul.w	r3, r1, r3
 800189e:	4413      	add	r3, r2
 80018a0:	3342      	adds	r3, #66	; 0x42
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
      break;
 80018a6:	e002      	b.n	80018ae <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80018a8:	bf00      	nop
 80018aa:	e000      	b.n	80018ae <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80018ac:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	212c      	movs	r1, #44	; 0x2c
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	3344      	adds	r3, #68	; 0x44
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	8b3a      	ldrh	r2, [r7, #24]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	202c      	movs	r0, #44	; 0x2c
 80018c8:	fb00 f303 	mul.w	r3, r0, r3
 80018cc:	440b      	add	r3, r1
 80018ce:	334c      	adds	r3, #76	; 0x4c
 80018d0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	212c      	movs	r1, #44	; 0x2c
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	3360      	adds	r3, #96	; 0x60
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	212c      	movs	r1, #44	; 0x2c
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	3350      	adds	r3, #80	; 0x50
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	212c      	movs	r1, #44	; 0x2c
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	4413      	add	r3, r2
 8001902:	3339      	adds	r3, #57	; 0x39
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	212c      	movs	r1, #44	; 0x2c
 800190e:	fb01 f303 	mul.w	r3, r1, r3
 8001912:	4413      	add	r3, r2
 8001914:	3361      	adds	r3, #97	; 0x61
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	222c      	movs	r2, #44	; 0x2c
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	3338      	adds	r3, #56	; 0x38
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	18d1      	adds	r1, r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	f002 fc98 	bl	8004268 <USB_HC_StartXfer>
 8001938:	4603      	mov	r3, r0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop

08001944 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f002 f9db 	bl	8003d16 <USB_GetMode>
 8001960:	4603      	mov	r3, r0
 8001962:	2b01      	cmp	r3, #1
 8001964:	f040 80ef 	bne.w	8001b46 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f002 f9bf 	bl	8003cf0 <USB_ReadInterrupts>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80e5 	beq.w	8001b44 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f002 f9b6 	bl	8003cf0 <USB_ReadInterrupts>
 8001984:	4603      	mov	r3, r0
 8001986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800198e:	d104      	bne.n	800199a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001998:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 f9a6 	bl	8003cf0 <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ae:	d104      	bne.n	80019ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 f996 	bl	8003cf0 <USB_ReadInterrupts>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019ce:	d104      	bne.n	80019da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 f986 	bl	8003cf0 <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d103      	bne.n	80019f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2202      	movs	r2, #2
 80019f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 f978 	bl	8003cf0 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a0a:	d115      	bne.n	8001a38 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a14:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d108      	bne.n	8001a38 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f004 f880 	bl	8005b2c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fa6e 	bl	8003f14 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 f957 	bl	8003cf0 <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4c:	d102      	bne.n	8001a54 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f001 f9e3 	bl	8002e1a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 f949 	bl	8003cf0 <USB_ReadInterrupts>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d106      	bne.n	8001a76 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f004 f843 	bl	8005af4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2208      	movs	r2, #8
 8001a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 f938 	bl	8003cf0 <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d101      	bne.n	8001a8e <HAL_HCD_IRQHandler+0x14a>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_HCD_IRQHandler+0x14c>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d012      	beq.n	8001aba <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699a      	ldr	r2, [r3, #24]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0210 	bic.w	r2, r2, #16
 8001aa2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f001 f8e6 	bl	8002c76 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	699a      	ldr	r2, [r3, #24]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0210 	orr.w	r2, r2, #16
 8001ab8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 f916 	bl	8003cf0 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ace:	d13a      	bne.n	8001b46 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fd09 	bl	80044ec <USB_HC_ReadInterrupt>
 8001ada:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	e025      	b.n	8001b2e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d018      	beq.n	8001b28 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4413      	add	r3, r2
 8001afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b0c:	d106      	bne.n	8001b1c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f88f 	bl	8001c38 <HCD_HC_IN_IRQHandler>
 8001b1a:	e005      	b.n	8001b28 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	4619      	mov	r1, r3
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fcaa 	bl	800247c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d3d4      	bcc.n	8001ae2 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b40:	615a      	str	r2, [r3, #20]
 8001b42:	e000      	b.n	8001b46 <HAL_HCD_IRQHandler+0x202>
      return;
 8001b44:	bf00      	nop
    }
  }
}
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_HCD_Start+0x16>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e013      	b.n	8001b8a <HAL_HCD_Start+0x3e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f001 ffcb 	bl	8003b0a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fa04 	bl	8003f88 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_HCD_Stop+0x16>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e00d      	b.n	8001bc4 <HAL_HCD_Stop+0x32>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fe03 	bl	80047c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	212c      	movs	r1, #44	; 0x2c
 8001bde:	fb01 f303 	mul.w	r3, r1, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	3360      	adds	r3, #96	; 0x60
 8001be6:	781b      	ldrb	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	212c      	movs	r1, #44	; 0x2c
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3350      	adds	r3, #80	; 0x50
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f002 f9fd 	bl	8004028 <USB_GetCurrentFrame>
 8001c2e:	4603      	mov	r3, r0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d119      	bne.n	8001c9c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c74:	461a      	mov	r2, r3
 8001c76:	2304      	movs	r3, #4
 8001c78:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	0151      	lsls	r1, r2, #5
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	440a      	add	r2, r1
 8001c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	60d3      	str	r3, [r2, #12]
 8001c9a:	e101      	b.n	8001ea0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cb2:	d12b      	bne.n	8001d0c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3361      	adds	r3, #97	; 0x61
 8001cd6:	2207      	movs	r2, #7
 8001cd8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	0151      	lsls	r1, r2, #5
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	440a      	add	r2, r1
 8001cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f002 fc02 	bl	800450e <USB_HC_Halt>
 8001d0a:	e0c9      	b.n	8001ea0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b20      	cmp	r3, #32
 8001d20:	d109      	bne.n	8001d36 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2320      	movs	r3, #32
 8001d32:	6093      	str	r3, [r2, #8]
 8001d34:	e0b4      	b.n	8001ea0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d133      	bne.n	8001db4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	0151      	lsls	r1, r2, #5
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	440a      	add	r2, r1
 8001d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	212c      	movs	r1, #44	; 0x2c
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	3361      	adds	r3, #97	; 0x61
 8001d7a:	2205      	movs	r2, #5
 8001d7c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	015a      	lsls	r2, r3, #5
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2308      	movs	r3, #8
 8001da0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f002 fbae 	bl	800450e <USB_HC_Halt>
 8001db2:	e075      	b.n	8001ea0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dca:	d134      	bne.n	8001e36 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	0151      	lsls	r1, r2, #5
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	440a      	add	r2, r1
 8001de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	212c      	movs	r1, #44	; 0x2c
 8001df2:	fb01 f303 	mul.w	r3, r1, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	3361      	adds	r3, #97	; 0x61
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2310      	movs	r3, #16
 8001e0e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e22:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f002 fb6d 	bl	800450e <USB_HC_Halt>
 8001e34:	e034      	b.n	8001ea0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	2b80      	cmp	r3, #128	; 0x80
 8001e4a:	d129      	bne.n	8001ea0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	0151      	lsls	r1, r2, #5
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	440a      	add	r2, r1
 8001e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	212c      	movs	r1, #44	; 0x2c
 8001e72:	fb01 f303 	mul.w	r3, r1, r3
 8001e76:	4413      	add	r3, r2
 8001e78:	3361      	adds	r3, #97	; 0x61
 8001e7a:	2206      	movs	r2, #6
 8001e7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f002 fb40 	bl	800450e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb6:	d122      	bne.n	8001efe <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	0151      	lsls	r1, r2, #5
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	440a      	add	r2, r1
 8001ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed2:	f043 0302 	orr.w	r3, r3, #2
 8001ed6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 fb13 	bl	800450e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001efa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001efc:	e2ba      	b.n	8002474 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	f040 811b 	bne.w	800214c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d019      	beq.n	8001f52 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	3348      	adds	r3, #72	; 0x48
 8001f2c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	0159      	lsls	r1, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	440b      	add	r3, r1
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f40:	1ad2      	subs	r2, r2, r3
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	202c      	movs	r0, #44	; 0x2c
 8001f48:	fb00 f303 	mul.w	r3, r0, r3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3350      	adds	r3, #80	; 0x50
 8001f50:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3361      	adds	r3, #97	; 0x61
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	212c      	movs	r1, #44	; 0x2c
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	335c      	adds	r3, #92	; 0x5c
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	461a      	mov	r2, r3
 8001f84:	2301      	movs	r3, #1
 8001f86:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	333f      	adds	r3, #63	; 0x3f
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d009      	beq.n	8001fb0 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	212c      	movs	r1, #44	; 0x2c
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	333f      	adds	r3, #63	; 0x3f
 8001faa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d121      	bne.n	8001ff4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	0151      	lsls	r1, r2, #5
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	440a      	add	r2, r1
 8001fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f002 fa97 	bl	800450e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fec:	461a      	mov	r2, r3
 8001fee:	2310      	movs	r3, #16
 8001ff0:	6093      	str	r3, [r2, #8]
 8001ff2:	e066      	b.n	80020c2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	333f      	adds	r3, #63	; 0x3f
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d127      	bne.n	8002058 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	0151      	lsls	r1, r2, #5
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	440a      	add	r2, r1
 800201e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002022:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002026:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	3360      	adds	r3, #96	; 0x60
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	b2d9      	uxtb	r1, r3
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	202c      	movs	r0, #44	; 0x2c
 8002044:	fb00 f303 	mul.w	r3, r0, r3
 8002048:	4413      	add	r3, r2
 800204a:	3360      	adds	r3, #96	; 0x60
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f003 fd79 	bl	8005b48 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002056:	e034      	b.n	80020c2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	212c      	movs	r1, #44	; 0x2c
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	333f      	adds	r3, #63	; 0x3f
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d12a      	bne.n	80020c2 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3360      	adds	r3, #96	; 0x60
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	3354      	adds	r3, #84	; 0x54
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2d8      	uxtb	r0, r3
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3354      	adds	r3, #84	; 0x54
 80020a2:	4602      	mov	r2, r0
 80020a4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	b2d9      	uxtb	r1, r3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	202c      	movs	r0, #44	; 0x2c
 80020b0:	fb00 f303 	mul.w	r3, r0, r3
 80020b4:	4413      	add	r3, r2
 80020b6:	3360      	adds	r3, #96	; 0x60
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f003 fd43 	bl	8005b48 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d12b      	bne.n	8002122 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	3348      	adds	r3, #72	; 0x48
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	202c      	movs	r0, #44	; 0x2c
 80020e0:	fb00 f202 	mul.w	r2, r0, r2
 80020e4:	440a      	add	r2, r1
 80020e6:	3240      	adds	r2, #64	; 0x40
 80020e8:	8812      	ldrh	r2, [r2, #0]
 80020ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 81be 	beq.w	8002474 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	212c      	movs	r1, #44	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	3354      	adds	r3, #84	; 0x54
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	f083 0301 	eor.w	r3, r3, #1
 800210c:	b2d8      	uxtb	r0, r3
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	212c      	movs	r1, #44	; 0x2c
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	4413      	add	r3, r2
 800211a:	3354      	adds	r3, #84	; 0x54
 800211c:	4602      	mov	r2, r0
 800211e:	701a      	strb	r2, [r3, #0]
}
 8002120:	e1a8      	b.n	8002474 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3354      	adds	r3, #84	; 0x54
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f083 0301 	eor.w	r3, r3, #1
 8002136:	b2d8      	uxtb	r0, r3
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	3354      	adds	r3, #84	; 0x54
 8002146:	4602      	mov	r2, r0
 8002148:	701a      	strb	r2, [r3, #0]
}
 800214a:	e193      	b.n	8002474 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b02      	cmp	r3, #2
 8002160:	f040 8106 	bne.w	8002370 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	0151      	lsls	r1, r2, #5
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	440a      	add	r2, r1
 800217a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800217e:	f023 0302 	bic.w	r3, r3, #2
 8002182:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3361      	adds	r3, #97	; 0x61
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d109      	bne.n	80021ac <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3360      	adds	r3, #96	; 0x60
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
 80021aa:	e0c9      	b.n	8002340 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	212c      	movs	r1, #44	; 0x2c
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	3361      	adds	r3, #97	; 0x61
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b05      	cmp	r3, #5
 80021be:	d109      	bne.n	80021d4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	212c      	movs	r1, #44	; 0x2c
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	3360      	adds	r3, #96	; 0x60
 80021ce:	2205      	movs	r2, #5
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	e0b5      	b.n	8002340 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3361      	adds	r3, #97	; 0x61
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b06      	cmp	r3, #6
 80021e6:	d009      	beq.n	80021fc <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3361      	adds	r3, #97	; 0x61
 80021f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d150      	bne.n	800229e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	335c      	adds	r3, #92	; 0x5c
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	202c      	movs	r0, #44	; 0x2c
 8002214:	fb00 f303 	mul.w	r3, r0, r3
 8002218:	440b      	add	r3, r1
 800221a:	335c      	adds	r3, #92	; 0x5c
 800221c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	335c      	adds	r3, #92	; 0x5c
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d912      	bls.n	8002258 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	335c      	adds	r3, #92	; 0x5c
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3360      	adds	r3, #96	; 0x60
 8002252:	2204      	movs	r2, #4
 8002254:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002256:	e073      	b.n	8002340 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	3360      	adds	r3, #96	; 0x60
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002280:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002288:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002296:	461a      	mov	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800229c:	e050      	b.n	8002340 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3361      	adds	r3, #97	; 0x61
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d122      	bne.n	80022f8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3360      	adds	r3, #96	; 0x60
 80022c0:	2202      	movs	r2, #2
 80022c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	461a      	mov	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e023      	b.n	8002340 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	212c      	movs	r1, #44	; 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	3361      	adds	r3, #97	; 0x61
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b07      	cmp	r3, #7
 800230a:	d119      	bne.n	8002340 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	335c      	adds	r3, #92	; 0x5c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	202c      	movs	r0, #44	; 0x2c
 8002324:	fb00 f303 	mul.w	r3, r0, r3
 8002328:	440b      	add	r3, r1
 800232a:	335c      	adds	r3, #92	; 0x5c
 800232c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3360      	adds	r3, #96	; 0x60
 800233c:	2204      	movs	r2, #4
 800233e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234c:	461a      	mov	r2, r3
 800234e:	2302      	movs	r3, #2
 8002350:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	b2d9      	uxtb	r1, r3
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	202c      	movs	r0, #44	; 0x2c
 800235c:	fb00 f303 	mul.w	r3, r0, r3
 8002360:	4413      	add	r3, r2
 8002362:	3360      	adds	r3, #96	; 0x60
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f003 fbed 	bl	8005b48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800236e:	e081      	b.n	8002474 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4413      	add	r3, r2
 8002378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b10      	cmp	r3, #16
 8002384:	d176      	bne.n	8002474 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	333f      	adds	r3, #63	; 0x3f
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d121      	bne.n	80023de <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	335c      	adds	r3, #92	; 0x5c
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	0151      	lsls	r1, r2, #5
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	440a      	add	r2, r1
 80023c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c6:	f043 0302 	orr.w	r3, r3, #2
 80023ca:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 f899 	bl	800450e <USB_HC_Halt>
 80023dc:	e041      	b.n	8002462 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	333f      	adds	r3, #63	; 0x3f
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	333f      	adds	r3, #63	; 0x3f
 8002400:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002402:	2b02      	cmp	r3, #2
 8002404:	d12d      	bne.n	8002462 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	335c      	adds	r3, #92	; 0x5c
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d120      	bne.n	8002462 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3361      	adds	r3, #97	; 0x61
 800242e:	2203      	movs	r2, #3
 8002430:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	0151      	lsls	r1, r2, #5
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	440a      	add	r2, r1
 8002448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f002 f856 	bl	800450e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	461a      	mov	r2, r3
 8002470:	2310      	movs	r3, #16
 8002472:	6093      	str	r3, [r2, #8]
}
 8002474:	bf00      	nop
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d119      	bne.n	80024e0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	461a      	mov	r2, r3
 80024ba:	2304      	movs	r3, #4
 80024bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	0151      	lsls	r1, r2, #5
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	440a      	add	r2, r1
 80024d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80024de:	e3c6      	b.n	8002c6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d13e      	bne.n	8002574 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002502:	461a      	mov	r2, r3
 8002504:	2320      	movs	r3, #32
 8002506:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	333d      	adds	r3, #61	; 0x3d
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	f040 83a8 	bne.w	8002c6e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	333d      	adds	r3, #61	; 0x3d
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3360      	adds	r3, #96	; 0x60
 800253e:	2202      	movs	r2, #2
 8002540:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	0151      	lsls	r1, r2, #5
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	440a      	add	r2, r1
 8002558:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f001 ffce 	bl	800450e <USB_HC_Halt>
}
 8002572:	e37c      	b.n	8002c6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800258a:	d122      	bne.n	80025d2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	0151      	lsls	r1, r2, #5
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	440a      	add	r2, r1
 80025a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f001 ffa9 	bl	800450e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	461a      	mov	r2, r3
 80025ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ce:	6093      	str	r3, [r2, #8]
}
 80025d0:	e34d      	b.n	8002c6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d150      	bne.n	800268a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	212c      	movs	r1, #44	; 0x2c
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	335c      	adds	r3, #92	; 0x5c
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	d111      	bne.n	8002634 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	333d      	adds	r3, #61	; 0x3d
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262e:	461a      	mov	r2, r3
 8002630:	2340      	movs	r3, #64	; 0x40
 8002632:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	0151      	lsls	r1, r2, #5
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	440a      	add	r2, r1
 800264a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800264e:	f043 0302 	orr.w	r3, r3, #2
 8002652:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f001 ff55 	bl	800450e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	461a      	mov	r2, r3
 8002672:	2301      	movs	r3, #1
 8002674:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	3361      	adds	r3, #97	; 0x61
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
}
 8002688:	e2f1      	b.n	8002c6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d13c      	bne.n	800271a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	3361      	adds	r3, #97	; 0x61
 80026ae:	2204      	movs	r2, #4
 80026b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	333d      	adds	r3, #61	; 0x3d
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	335c      	adds	r3, #92	; 0x5c
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	0151      	lsls	r1, r2, #5
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	440a      	add	r2, r1
 80026ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f001 ff04 	bl	800450e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	461a      	mov	r2, r3
 8002714:	2340      	movs	r3, #64	; 0x40
 8002716:	6093      	str	r3, [r2, #8]
}
 8002718:	e2a9      	b.n	8002c6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b08      	cmp	r3, #8
 800272e:	d12a      	bne.n	8002786 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273c:	461a      	mov	r2, r3
 800273e:	2308      	movs	r3, #8
 8002740:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	0151      	lsls	r1, r2, #5
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	440a      	add	r2, r1
 8002758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f001 fece 	bl	800450e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	3361      	adds	r3, #97	; 0x61
 8002780:	2205      	movs	r2, #5
 8002782:	701a      	strb	r2, [r3, #0]
}
 8002784:	e273      	b.n	8002c6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b10      	cmp	r3, #16
 800279a:	d150      	bne.n	800283e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	335c      	adds	r3, #92	; 0x5c
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	3361      	adds	r3, #97	; 0x61
 80027bc:	2203      	movs	r2, #3
 80027be:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	333d      	adds	r3, #61	; 0x3d
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d112      	bne.n	80027fa <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	333c      	adds	r3, #60	; 0x3c
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d108      	bne.n	80027fa <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	333d      	adds	r3, #61	; 0x3d
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	0151      	lsls	r1, r2, #5
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	440a      	add	r2, r1
 8002810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f001 fe72 	bl	800450e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4413      	add	r3, r2
 8002832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002836:	461a      	mov	r2, r3
 8002838:	2310      	movs	r3, #16
 800283a:	6093      	str	r3, [r2, #8]
}
 800283c:	e217      	b.n	8002c6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d174      	bne.n	800293e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d121      	bne.n	80028a0 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	3361      	adds	r3, #97	; 0x61
 800286a:	2206      	movs	r2, #6
 800286c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	4413      	add	r3, r2
 8002876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	0151      	lsls	r1, r2, #5
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	440a      	add	r2, r1
 8002884:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f001 fe38 	bl	800450e <USB_HC_Halt>
 800289e:	e044      	b.n	800292a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	335c      	adds	r3, #92	; 0x5c
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	202c      	movs	r0, #44	; 0x2c
 80028b8:	fb00 f303 	mul.w	r3, r0, r3
 80028bc:	440b      	add	r3, r1
 80028be:	335c      	adds	r3, #92	; 0x5c
 80028c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	335c      	adds	r3, #92	; 0x5c
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d920      	bls.n	8002918 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	335c      	adds	r3, #92	; 0x5c
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3360      	adds	r3, #96	; 0x60
 80028f6:	2204      	movs	r2, #4
 80028f8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	b2d9      	uxtb	r1, r3
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	202c      	movs	r0, #44	; 0x2c
 8002904:	fb00 f303 	mul.w	r3, r0, r3
 8002908:	4413      	add	r3, r2
 800290a:	3360      	adds	r3, #96	; 0x60
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f003 f919 	bl	8005b48 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002916:	e008      	b.n	800292a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3360      	adds	r3, #96	; 0x60
 8002926:	2202      	movs	r2, #2
 8002928:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002936:	461a      	mov	r2, r3
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	6093      	str	r3, [r2, #8]
}
 800293c:	e197      	b.n	8002c6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002954:	d134      	bne.n	80029c0 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	0151      	lsls	r1, r2, #5
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	440a      	add	r2, r1
 800296c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f001 fdc4 	bl	800450e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	461a      	mov	r2, r3
 8002994:	2310      	movs	r3, #16
 8002996:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	461a      	mov	r2, r3
 80029a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3361      	adds	r3, #97	; 0x61
 80029ba:	2208      	movs	r2, #8
 80029bc:	701a      	strb	r2, [r3, #0]
}
 80029be:	e156      	b.n	8002c6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	f040 814b 	bne.w	8002c6e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	0151      	lsls	r1, r2, #5
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	440a      	add	r2, r1
 80029ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f2:	f023 0302 	bic.w	r3, r3, #2
 80029f6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3361      	adds	r3, #97	; 0x61
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d179      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3360      	adds	r3, #96	; 0x60
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	333f      	adds	r3, #63	; 0x3f
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d00a      	beq.n	8002a48 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	333f      	adds	r3, #63	; 0x3f
 8002a40:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	f040 80fc 	bne.w	8002c40 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d142      	bne.n	8002ad6 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	334c      	adds	r3, #76	; 0x4c
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80ed 	beq.w	8002c40 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	334c      	adds	r3, #76	; 0x4c
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	202c      	movs	r0, #44	; 0x2c
 8002a7c:	fb00 f202 	mul.w	r2, r0, r2
 8002a80:	440a      	add	r2, r1
 8002a82:	3240      	adds	r2, #64	; 0x40
 8002a84:	8812      	ldrh	r2, [r2, #0]
 8002a86:	4413      	add	r3, r2
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	202c      	movs	r0, #44	; 0x2c
 8002a90:	fb00 f202 	mul.w	r2, r0, r2
 8002a94:	440a      	add	r2, r1
 8002a96:	3240      	adds	r2, #64	; 0x40
 8002a98:	8812      	ldrh	r2, [r2, #0]
 8002a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 80ca 	beq.w	8002c40 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3355      	adds	r3, #85	; 0x55
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f083 0301 	eor.w	r3, r3, #1
 8002ac0:	b2d8      	uxtb	r0, r3
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3355      	adds	r3, #85	; 0x55
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e0b4      	b.n	8002c40 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3355      	adds	r3, #85	; 0x55
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	f083 0301 	eor.w	r3, r3, #1
 8002aea:	b2d8      	uxtb	r0, r3
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3355      	adds	r3, #85	; 0x55
 8002afa:	4602      	mov	r2, r0
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e09f      	b.n	8002c40 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3361      	adds	r3, #97	; 0x61
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d109      	bne.n	8002b28 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3360      	adds	r3, #96	; 0x60
 8002b22:	2202      	movs	r2, #2
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e08b      	b.n	8002c40 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3361      	adds	r3, #97	; 0x61
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d109      	bne.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	3360      	adds	r3, #96	; 0x60
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e077      	b.n	8002c40 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3361      	adds	r3, #97	; 0x61
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d109      	bne.n	8002b78 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3360      	adds	r3, #96	; 0x60
 8002b72:	2205      	movs	r2, #5
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	e063      	b.n	8002c40 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3361      	adds	r3, #97	; 0x61
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b06      	cmp	r3, #6
 8002b8a:	d009      	beq.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3361      	adds	r3, #97	; 0x61
 8002b9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d14f      	bne.n	8002c40 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	335c      	adds	r3, #92	; 0x5c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	202c      	movs	r0, #44	; 0x2c
 8002bb8:	fb00 f303 	mul.w	r3, r0, r3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	335c      	adds	r3, #92	; 0x5c
 8002bc0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	335c      	adds	r3, #92	; 0x5c
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d912      	bls.n	8002bfc <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	335c      	adds	r3, #92	; 0x5c
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3360      	adds	r3, #96	; 0x60
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e021      	b.n	8002c40 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3360      	adds	r3, #96	; 0x60
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c24:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c2c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2302      	movs	r3, #2
 8002c50:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	b2d9      	uxtb	r1, r3
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	202c      	movs	r0, #44	; 0x2c
 8002c5c:	fb00 f303 	mul.w	r3, r0, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	3360      	adds	r3, #96	; 0x60
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f002 ff6d 	bl	8005b48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c6e:	bf00      	nop
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b08a      	sub	sp, #40	; 0x28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	0c5b      	lsrs	r3, r3, #17
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002caa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d004      	beq.n	8002cbc <HCD_RXQLVL_IRQHandler+0x46>
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	f000 80a9 	beq.w	8002e0c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002cba:	e0aa      	b.n	8002e12 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80a6 	beq.w	8002e10 <HCD_RXQLVL_IRQHandler+0x19a>
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3344      	adds	r3, #68	; 0x44
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 809b 	beq.w	8002e10 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3350      	adds	r3, #80	; 0x50
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	441a      	add	r2, r3
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	202c      	movs	r0, #44	; 0x2c
 8002cf4:	fb00 f303 	mul.w	r3, r0, r3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	334c      	adds	r3, #76	; 0x4c
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d87a      	bhi.n	8002df8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3344      	adds	r3, #68	; 0x44
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	b292      	uxth	r2, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f000 ffbf 	bl	8003c9e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3344      	adds	r3, #68	; 0x44
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	441a      	add	r2, r3
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	202c      	movs	r0, #44	; 0x2c
 8002d3a:	fb00 f303 	mul.w	r3, r0, r3
 8002d3e:	440b      	add	r3, r1
 8002d40:	3344      	adds	r3, #68	; 0x44
 8002d42:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3350      	adds	r3, #80	; 0x50
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	441a      	add	r2, r3
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	202c      	movs	r0, #44	; 0x2c
 8002d5e:	fb00 f303 	mul.w	r3, r0, r3
 8002d62:	440b      	add	r3, r1
 8002d64:	3350      	adds	r3, #80	; 0x50
 8002d66:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	0cdb      	lsrs	r3, r3, #19
 8002d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d7c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	3340      	adds	r3, #64	; 0x40
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d13c      	bne.n	8002e10 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d039      	beq.n	8002e10 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002db2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dba:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	461a      	mov	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3354      	adds	r3, #84	; 0x54
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	f083 0301 	eor.w	r3, r3, #1
 8002de2:	b2d8      	uxtb	r0, r3
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3354      	adds	r3, #84	; 0x54
 8002df2:	4602      	mov	r2, r0
 8002df4:	701a      	strb	r2, [r3, #0]
      break;
 8002df6:	e00b      	b.n	8002e10 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3360      	adds	r3, #96	; 0x60
 8002e06:	2204      	movs	r2, #4
 8002e08:	701a      	strb	r2, [r3, #0]
      break;
 8002e0a:	e001      	b.n	8002e10 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e0c:	bf00      	nop
 8002e0e:	e000      	b.n	8002e12 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e10:	bf00      	nop
  }
}
 8002e12:	bf00      	nop
 8002e14:	3728      	adds	r7, #40	; 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e46:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d10b      	bne.n	8002e6a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d102      	bne.n	8002e62 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f002 fe57 	bl	8005b10 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d132      	bne.n	8002eda <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f043 0308 	orr.w	r3, r3, #8
 8002e7a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d126      	bne.n	8002ed4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d113      	bne.n	8002eb6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e98:	d106      	bne.n	8002ea8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 f837 	bl	8003f14 <USB_InitFSLSPClkSel>
 8002ea6:	e011      	b.n	8002ecc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2101      	movs	r1, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f001 f830 	bl	8003f14 <USB_InitFSLSPClkSel>
 8002eb4:	e00a      	b.n	8002ecc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d106      	bne.n	8002ecc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002eca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f002 fe49 	bl	8005b64 <HAL_HCD_PortEnabled_Callback>
 8002ed2:	e002      	b.n	8002eda <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f002 fe53 	bl	8005b80 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d103      	bne.n	8002eec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f043 0320 	orr.w	r3, r3, #32
 8002eea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e12b      	b.n	800316a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fd fd94 	bl	8000a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f64:	f000 fd5c 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8002f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a81      	ldr	r2, [pc, #516]	; (8003174 <HAL_I2C_Init+0x274>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d807      	bhi.n	8002f84 <HAL_I2C_Init+0x84>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4a80      	ldr	r2, [pc, #512]	; (8003178 <HAL_I2C_Init+0x278>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	bf94      	ite	ls
 8002f7c:	2301      	movls	r3, #1
 8002f7e:	2300      	movhi	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e006      	b.n	8002f92 <HAL_I2C_Init+0x92>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a7d      	ldr	r2, [pc, #500]	; (800317c <HAL_I2C_Init+0x27c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	bf94      	ite	ls
 8002f8c:	2301      	movls	r3, #1
 8002f8e:	2300      	movhi	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0e7      	b.n	800316a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a78      	ldr	r2, [pc, #480]	; (8003180 <HAL_I2C_Init+0x280>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	0c9b      	lsrs	r3, r3, #18
 8002fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a6a      	ldr	r2, [pc, #424]	; (8003174 <HAL_I2C_Init+0x274>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d802      	bhi.n	8002fd4 <HAL_I2C_Init+0xd4>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	e009      	b.n	8002fe8 <HAL_I2C_Init+0xe8>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	4a69      	ldr	r2, [pc, #420]	; (8003184 <HAL_I2C_Init+0x284>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	099b      	lsrs	r3, r3, #6
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	495c      	ldr	r1, [pc, #368]	; (8003174 <HAL_I2C_Init+0x274>)
 8003004:	428b      	cmp	r3, r1
 8003006:	d819      	bhi.n	800303c <HAL_I2C_Init+0x13c>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1e59      	subs	r1, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fbb1 f3f3 	udiv	r3, r1, r3
 8003016:	1c59      	adds	r1, r3, #1
 8003018:	f640 73fc 	movw	r3, #4092	; 0xffc
 800301c:	400b      	ands	r3, r1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_I2C_Init+0x138>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1e59      	subs	r1, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003030:	3301      	adds	r3, #1
 8003032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003036:	e051      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 8003038:	2304      	movs	r3, #4
 800303a:	e04f      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d111      	bne.n	8003068 <HAL_I2C_Init+0x168>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e58      	subs	r0, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e012      	b.n	800308e <HAL_I2C_Init+0x18e>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e58      	subs	r0, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	0099      	lsls	r1, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Init+0x196>
 8003092:	2301      	movs	r3, #1
 8003094:	e022      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10e      	bne.n	80030bc <HAL_I2C_Init+0x1bc>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1e58      	subs	r0, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	440b      	add	r3, r1
 80030ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ba:	e00f      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e58      	subs	r0, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	0099      	lsls	r1, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d2:	3301      	adds	r3, #1
 80030d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	6809      	ldr	r1, [r1, #0]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800310a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6911      	ldr	r1, [r2, #16]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68d2      	ldr	r2, [r2, #12]
 8003116:	4311      	orrs	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	430b      	orrs	r3, r1
 800311e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	000186a0 	.word	0x000186a0
 8003178:	001e847f 	.word	0x001e847f
 800317c:	003d08ff 	.word	0x003d08ff
 8003180:	431bde83 	.word	0x431bde83
 8003184:	10624dd3 	.word	0x10624dd3

08003188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e264      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d075      	beq.n	8003292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031a6:	4ba3      	ldr	r3, [pc, #652]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d00c      	beq.n	80031cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b2:	4ba0      	ldr	r3, [pc, #640]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d112      	bne.n	80031e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031be:	4b9d      	ldr	r3, [pc, #628]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ca:	d10b      	bne.n	80031e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	4b99      	ldr	r3, [pc, #612]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d05b      	beq.n	8003290 <HAL_RCC_OscConfig+0x108>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d157      	bne.n	8003290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e23f      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d106      	bne.n	80031fc <HAL_RCC_OscConfig+0x74>
 80031ee:	4b91      	ldr	r3, [pc, #580]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a90      	ldr	r2, [pc, #576]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e01d      	b.n	8003238 <HAL_RCC_OscConfig+0xb0>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x98>
 8003206:	4b8b      	ldr	r3, [pc, #556]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a8a      	ldr	r2, [pc, #552]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b88      	ldr	r3, [pc, #544]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a87      	ldr	r2, [pc, #540]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0xb0>
 8003220:	4b84      	ldr	r3, [pc, #528]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a83      	ldr	r2, [pc, #524]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b81      	ldr	r3, [pc, #516]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a80      	ldr	r2, [pc, #512]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fd fd5c 	bl	8000cfc <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003248:	f7fd fd58 	bl	8000cfc <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e204      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b76      	ldr	r3, [pc, #472]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0xc0>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fd fd48 	bl	8000cfc <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003270:	f7fd fd44 	bl	8000cfc <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1f0      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0xe8>
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d063      	beq.n	8003366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800329e:	4b65      	ldr	r3, [pc, #404]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032aa:	4b62      	ldr	r3, [pc, #392]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d11c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b6:	4b5f      	ldr	r3, [pc, #380]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d116      	bne.n	80032f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c2:	4b5c      	ldr	r3, [pc, #368]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_RCC_OscConfig+0x152>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e1c4      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032da:	4b56      	ldr	r3, [pc, #344]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4952      	ldr	r1, [pc, #328]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	e03a      	b.n	8003366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f8:	4b4f      	ldr	r3, [pc, #316]	; (8003438 <HAL_RCC_OscConfig+0x2b0>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fd fcfd 	bl	8000cfc <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003306:	f7fd fcf9 	bl	8000cfc <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e1a5      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	4b46      	ldr	r3, [pc, #280]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	4b43      	ldr	r3, [pc, #268]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4940      	ldr	r1, [pc, #256]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
 8003338:	e015      	b.n	8003366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333a:	4b3f      	ldr	r3, [pc, #252]	; (8003438 <HAL_RCC_OscConfig+0x2b0>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fd fcdc 	bl	8000cfc <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003348:	f7fd fcd8 	bl	8000cfc <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e184      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335a:	4b36      	ldr	r3, [pc, #216]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d030      	beq.n	80033d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d016      	beq.n	80033a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337a:	4b30      	ldr	r3, [pc, #192]	; (800343c <HAL_RCC_OscConfig+0x2b4>)
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fd fcbc 	bl	8000cfc <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003388:	f7fd fcb8 	bl	8000cfc <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e164      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	4b26      	ldr	r3, [pc, #152]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x200>
 80033a6:	e015      	b.n	80033d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a8:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCC_OscConfig+0x2b4>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fd fca5 	bl	8000cfc <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b6:	f7fd fca1 	bl	8000cfc <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e14d      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c8:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f0      	bne.n	80033b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80a0 	beq.w	8003522 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10f      	bne.n	8003412 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a0e      	ldr	r2, [pc, #56]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_OscConfig+0x2b8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d121      	bne.n	8003462 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <HAL_RCC_OscConfig+0x2b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a07      	ldr	r2, [pc, #28]	; (8003440 <HAL_RCC_OscConfig+0x2b8>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342a:	f7fd fc67 	bl	8000cfc <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	e011      	b.n	8003456 <HAL_RCC_OscConfig+0x2ce>
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	42470000 	.word	0x42470000
 800343c:	42470e80 	.word	0x42470e80
 8003440:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003444:	f7fd fc5a 	bl	8000cfc <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e106      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b85      	ldr	r3, [pc, #532]	; (800366c <HAL_RCC_OscConfig+0x4e4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d106      	bne.n	8003478 <HAL_RCC_OscConfig+0x2f0>
 800346a:	4b81      	ldr	r3, [pc, #516]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	4a80      	ldr	r2, [pc, #512]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6713      	str	r3, [r2, #112]	; 0x70
 8003476:	e01c      	b.n	80034b2 <HAL_RCC_OscConfig+0x32a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b05      	cmp	r3, #5
 800347e:	d10c      	bne.n	800349a <HAL_RCC_OscConfig+0x312>
 8003480:	4b7b      	ldr	r3, [pc, #492]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4a7a      	ldr	r2, [pc, #488]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003486:	f043 0304 	orr.w	r3, r3, #4
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
 800348c:	4b78      	ldr	r3, [pc, #480]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4a77      	ldr	r2, [pc, #476]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6713      	str	r3, [r2, #112]	; 0x70
 8003498:	e00b      	b.n	80034b2 <HAL_RCC_OscConfig+0x32a>
 800349a:	4b75      	ldr	r3, [pc, #468]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a74      	ldr	r2, [pc, #464]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
 80034a6:	4b72      	ldr	r3, [pc, #456]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a71      	ldr	r2, [pc, #452]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 80034ac:	f023 0304 	bic.w	r3, r3, #4
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d015      	beq.n	80034e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ba:	f7fd fc1f 	bl	8000cfc <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fd fc1b 	bl	8000cfc <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e0c5      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d8:	4b65      	ldr	r3, [pc, #404]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0ee      	beq.n	80034c2 <HAL_RCC_OscConfig+0x33a>
 80034e4:	e014      	b.n	8003510 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e6:	f7fd fc09 	bl	8000cfc <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fd fc05 	bl	8000cfc <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0af      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003504:	4b5a      	ldr	r3, [pc, #360]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ee      	bne.n	80034ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d105      	bne.n	8003522 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003516:	4b56      	ldr	r3, [pc, #344]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a55      	ldr	r2, [pc, #340]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 809b 	beq.w	8003662 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800352c:	4b50      	ldr	r3, [pc, #320]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b08      	cmp	r3, #8
 8003536:	d05c      	beq.n	80035f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d141      	bne.n	80035c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003540:	4b4c      	ldr	r3, [pc, #304]	; (8003674 <HAL_RCC_OscConfig+0x4ec>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7fd fbd9 	bl	8000cfc <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354e:	f7fd fbd5 	bl	8000cfc <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e081      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003560:	4b43      	ldr	r3, [pc, #268]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f0      	bne.n	800354e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	019b      	lsls	r3, r3, #6
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	085b      	lsrs	r3, r3, #1
 8003584:	3b01      	subs	r3, #1
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	061b      	lsls	r3, r3, #24
 8003590:	4937      	ldr	r1, [pc, #220]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003596:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_RCC_OscConfig+0x4ec>)
 8003598:	2201      	movs	r2, #1
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fd fbae 	bl	8000cfc <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fd fbaa 	bl	8000cfc <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e056      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b6:	4b2e      	ldr	r3, [pc, #184]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x41c>
 80035c2:	e04e      	b.n	8003662 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c4:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <HAL_RCC_OscConfig+0x4ec>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fd fb97 	bl	8000cfc <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fd fb93 	bl	8000cfc <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e03f      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e4:	4b22      	ldr	r3, [pc, #136]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f0      	bne.n	80035d2 <HAL_RCC_OscConfig+0x44a>
 80035f0:	e037      	b.n	8003662 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e032      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d028      	beq.n	800365e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d121      	bne.n	800365e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d11a      	bne.n	800365e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800362e:	4013      	ands	r3, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003634:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003636:	4293      	cmp	r3, r2
 8003638:	d111      	bne.n	800365e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	3b01      	subs	r3, #1
 8003648:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d107      	bne.n	800365e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40007000 	.word	0x40007000
 8003670:	40023800 	.word	0x40023800
 8003674:	42470060 	.word	0x42470060

08003678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0cc      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800368c:	4b68      	ldr	r3, [pc, #416]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d90c      	bls.n	80036b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b65      	ldr	r3, [pc, #404]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b63      	ldr	r3, [pc, #396]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0b8      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d020      	beq.n	8003702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036cc:	4b59      	ldr	r3, [pc, #356]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4a58      	ldr	r2, [pc, #352]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e4:	4b53      	ldr	r3, [pc, #332]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4a52      	ldr	r2, [pc, #328]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f0:	4b50      	ldr	r3, [pc, #320]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	494d      	ldr	r1, [pc, #308]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d044      	beq.n	8003798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b47      	ldr	r3, [pc, #284]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d119      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e07f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d003      	beq.n	8003736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003732:	2b03      	cmp	r3, #3
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003736:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e06f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003746:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e067      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003756:	4b37      	ldr	r3, [pc, #220]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f023 0203 	bic.w	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4934      	ldr	r1, [pc, #208]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003768:	f7fd fac8 	bl	8000cfc <HAL_GetTick>
 800376c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376e:	e00a      	b.n	8003786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003770:	f7fd fac4 	bl	8000cfc <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e04f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	4b2b      	ldr	r3, [pc, #172]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 020c 	and.w	r2, r3, #12
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	429a      	cmp	r2, r3
 8003796:	d1eb      	bne.n	8003770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003798:	4b25      	ldr	r3, [pc, #148]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d20c      	bcs.n	80037c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b22      	ldr	r3, [pc, #136]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e032      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4916      	ldr	r1, [pc, #88]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ea:	4b12      	ldr	r3, [pc, #72]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	490e      	ldr	r1, [pc, #56]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037fe:	f000 f821 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 8003802:	4602      	mov	r2, r0
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	490a      	ldr	r1, [pc, #40]	; (8003838 <HAL_RCC_ClockConfig+0x1c0>)
 8003810:	5ccb      	ldrb	r3, [r1, r3]
 8003812:	fa22 f303 	lsr.w	r3, r2, r3
 8003816:	4a09      	ldr	r2, [pc, #36]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd fa28 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40023c00 	.word	0x40023c00
 8003834:	40023800 	.word	0x40023800
 8003838:	08006170 	.word	0x08006170
 800383c:	20000000 	.word	0x20000000
 8003840:	20000004 	.word	0x20000004

08003844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003844:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	607b      	str	r3, [r7, #4]
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	2300      	movs	r3, #0
 8003856:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800385c:	4b67      	ldr	r3, [pc, #412]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d00d      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x40>
 8003868:	2b08      	cmp	r3, #8
 800386a:	f200 80bd 	bhi.w	80039e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0x34>
 8003872:	2b04      	cmp	r3, #4
 8003874:	d003      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0x3a>
 8003876:	e0b7      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b61      	ldr	r3, [pc, #388]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800387a:	60bb      	str	r3, [r7, #8]
       break;
 800387c:	e0b7      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800387e:	4b61      	ldr	r3, [pc, #388]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003880:	60bb      	str	r3, [r7, #8]
      break;
 8003882:	e0b4      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003884:	4b5d      	ldr	r3, [pc, #372]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800388c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800388e:	4b5b      	ldr	r3, [pc, #364]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d04d      	beq.n	8003936 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389a:	4b58      	ldr	r3, [pc, #352]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	099b      	lsrs	r3, r3, #6
 80038a0:	461a      	mov	r2, r3
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038aa:	f04f 0100 	mov.w	r1, #0
 80038ae:	ea02 0800 	and.w	r8, r2, r0
 80038b2:	ea03 0901 	and.w	r9, r3, r1
 80038b6:	4640      	mov	r0, r8
 80038b8:	4649      	mov	r1, r9
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	014b      	lsls	r3, r1, #5
 80038c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038c8:	0142      	lsls	r2, r0, #5
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	ebb0 0008 	subs.w	r0, r0, r8
 80038d2:	eb61 0109 	sbc.w	r1, r1, r9
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	018b      	lsls	r3, r1, #6
 80038e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038e4:	0182      	lsls	r2, r0, #6
 80038e6:	1a12      	subs	r2, r2, r0
 80038e8:	eb63 0301 	sbc.w	r3, r3, r1
 80038ec:	f04f 0000 	mov.w	r0, #0
 80038f0:	f04f 0100 	mov.w	r1, #0
 80038f4:	00d9      	lsls	r1, r3, #3
 80038f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038fa:	00d0      	lsls	r0, r2, #3
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	eb12 0208 	adds.w	r2, r2, r8
 8003904:	eb43 0309 	adc.w	r3, r3, r9
 8003908:	f04f 0000 	mov.w	r0, #0
 800390c:	f04f 0100 	mov.w	r1, #0
 8003910:	0259      	lsls	r1, r3, #9
 8003912:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003916:	0250      	lsls	r0, r2, #9
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4610      	mov	r0, r2
 800391e:	4619      	mov	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	461a      	mov	r2, r3
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	f7fc fc4e 	bl	80001c8 <__aeabi_uldivmod>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4613      	mov	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	e04a      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003936:	4b31      	ldr	r3, [pc, #196]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	099b      	lsrs	r3, r3, #6
 800393c:	461a      	mov	r2, r3
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003946:	f04f 0100 	mov.w	r1, #0
 800394a:	ea02 0400 	and.w	r4, r2, r0
 800394e:	ea03 0501 	and.w	r5, r3, r1
 8003952:	4620      	mov	r0, r4
 8003954:	4629      	mov	r1, r5
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	014b      	lsls	r3, r1, #5
 8003960:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003964:	0142      	lsls	r2, r0, #5
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	1b00      	subs	r0, r0, r4
 800396c:	eb61 0105 	sbc.w	r1, r1, r5
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	018b      	lsls	r3, r1, #6
 800397a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800397e:	0182      	lsls	r2, r0, #6
 8003980:	1a12      	subs	r2, r2, r0
 8003982:	eb63 0301 	sbc.w	r3, r3, r1
 8003986:	f04f 0000 	mov.w	r0, #0
 800398a:	f04f 0100 	mov.w	r1, #0
 800398e:	00d9      	lsls	r1, r3, #3
 8003990:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003994:	00d0      	lsls	r0, r2, #3
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	1912      	adds	r2, r2, r4
 800399c:	eb45 0303 	adc.w	r3, r5, r3
 80039a0:	f04f 0000 	mov.w	r0, #0
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	0299      	lsls	r1, r3, #10
 80039aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039ae:	0290      	lsls	r0, r2, #10
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	f7fc fc02 	bl	80001c8 <__aeabi_uldivmod>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4613      	mov	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	3301      	adds	r3, #1
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	60bb      	str	r3, [r7, #8]
      break;
 80039e6:	e002      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039ea:	60bb      	str	r3, [r7, #8]
      break;
 80039ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ee:	68bb      	ldr	r3, [r7, #8]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200

08003a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000000 	.word	0x20000000

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a9b      	lsrs	r3, r3, #10
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4903      	ldr	r1, [pc, #12]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	08006180 	.word	0x08006180

08003a48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a48:	b084      	sub	sp, #16
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	f107 001c 	add.w	r0, r7, #28
 8003a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d122      	bne.n	8003aa6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d105      	bne.n	8003a9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f94a 	bl	8003d34 <USB_CoreReset>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	73fb      	strb	r3, [r7, #15]
 8003aa4:	e01a      	b.n	8003adc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f93e 	bl	8003d34 <USB_CoreReset>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
 8003ace:	e005      	b.n	8003adc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d10b      	bne.n	8003afa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f043 0206 	orr.w	r2, r3, #6
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f043 0220 	orr.w	r2, r3, #32
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b06:	b004      	add	sp, #16
 8003b08:	4770      	bx	lr

08003b0a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f043 0201 	orr.w	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 0201 	bic.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d106      	bne.n	8003b7a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	e00b      	b.n	8003b92 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	60da      	str	r2, [r3, #12]
 8003b8c:	e001      	b.n	8003b92 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e003      	b.n	8003b9a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003b92:	2032      	movs	r0, #50	; 0x32
 8003b94:	f7fd f8be 	bl	8000d14 <HAL_Delay>

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	019b      	lsls	r3, r3, #6
 8003bb6:	f043 0220 	orr.w	r2, r3, #32
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <USB_FlushTxFifo+0x48>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e006      	b.n	8003bde <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d0f0      	beq.n	8003bbe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	00030d40 	.word	0x00030d40

08003bf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2210      	movs	r2, #16
 8003c00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a09      	ldr	r2, [pc, #36]	; (8003c30 <USB_FlushRxFifo+0x40>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e006      	b.n	8003c22 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d0f0      	beq.n	8003c02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	00030d40 	.word	0x00030d40

08003c34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b089      	sub	sp, #36	; 0x24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	4611      	mov	r1, r2
 8003c40:	461a      	mov	r2, r3
 8003c42:	460b      	mov	r3, r1
 8003c44:	71fb      	strb	r3, [r7, #7]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003c52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d11a      	bne.n	8003c90 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c5a:	88bb      	ldrh	r3, [r7, #4]
 8003c5c:	3303      	adds	r3, #3
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	e00f      	b.n	8003c88 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	031a      	lsls	r2, r3, #12
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c74:	461a      	mov	r2, r3
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	3301      	adds	r3, #1
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d3eb      	bcc.n	8003c68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3724      	adds	r7, #36	; 0x24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b089      	sub	sp, #36	; 0x24
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	3303      	adds	r3, #3
 8003cb8:	089b      	lsrs	r3, r3, #2
 8003cba:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	e00b      	b.n	8003cda <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	601a      	str	r2, [r3, #0]
    pDest++;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d3ef      	bcc.n	8003cc2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003ce2:	69fb      	ldr	r3, [r7, #28]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3724      	adds	r7, #36	; 0x24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4013      	ands	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003d08:	68fb      	ldr	r3, [r7, #12]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0301 	and.w	r3, r3, #1
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3301      	adds	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <USB_CoreReset+0x64>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e01b      	b.n	8003d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	daf2      	bge.n	8003d40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f043 0201 	orr.w	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <USB_CoreReset+0x64>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e006      	b.n	8003d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d0f0      	beq.n	8003d6a <USB_CoreReset+0x36>

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	00030d40 	.word	0x00030d40

08003d9c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	f107 001c 	add.w	r0, r7, #28
 8003daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003db8:	461a      	mov	r2, r3
 8003dba:	2300      	movs	r3, #0
 8003dbc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d018      	beq.n	8003e20 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d10a      	bne.n	8003e0a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e02:	f043 0304 	orr.w	r3, r3, #4
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	e014      	b.n	8003e34 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e009      	b.n	8003e34 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e2e:	f023 0304 	bic.w	r3, r3, #4
 8003e32:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003e34:	2110      	movs	r1, #16
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff feb4 	bl	8003ba4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff fed7 	bl	8003bf0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	e015      	b.n	8003e74 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e54:	461a      	mov	r2, r3
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3301      	adds	r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d3e5      	bcc.n	8003e48 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f882 	bl	8003f88 <USB_DriveVbus>

  HAL_Delay(200U);
 8003e84:	20c8      	movs	r0, #200	; 0xc8
 8003e86:	f7fc ff45 	bl	8000d14 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f04f 32ff 	mov.w	r2, #4294967295
 8003e96:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00b      	beq.n	8003ebc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eaa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <USB_HostInit+0x164>)
 8003eb0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <USB_HostInit+0x168>)
 8003eb6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003eba:	e009      	b.n	8003ed0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2280      	movs	r2, #128	; 0x80
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a10      	ldr	r2, [pc, #64]	; (8003f08 <USB_HostInit+0x16c>)
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <USB_HostInit+0x170>)
 8003ecc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d105      	bne.n	8003ee2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f043 0210 	orr.w	r2, r3, #16
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <USB_HostInit+0x174>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003efa:	b004      	add	sp, #16
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	01000200 	.word	0x01000200
 8003f04:	00e00300 	.word	0x00e00300
 8003f08:	00600080 	.word	0x00600080
 8003f0c:	004000e0 	.word	0x004000e0
 8003f10:	a3200008 	.word	0xa3200008

08003f14 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f32:	f023 0303 	bic.w	r3, r3, #3
 8003f36:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	68f9      	ldr	r1, [r7, #12]
 8003f48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d107      	bne.n	8003f66 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003f62:	6053      	str	r3, [r2, #4]
 8003f64:	e009      	b.n	8003f7a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d106      	bne.n	8003f7a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f72:	461a      	mov	r2, r3
 8003f74:	f241 7370 	movw	r3, #6000	; 0x1770
 8003f78:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003fac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <USB_DriveVbus+0x44>
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d106      	bne.n	8003fcc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003fc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd6:	d109      	bne.n	8003fec <USB_DriveVbus+0x64>
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	0c5b      	lsrs	r3, r3, #17
 8004018:	f003 0303 	and.w	r3, r3, #3
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	b29b      	uxth	r3, r3
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	4608      	mov	r0, r1
 8004056:	4611      	mov	r1, r2
 8004058:	461a      	mov	r2, r3
 800405a:	4603      	mov	r3, r0
 800405c:	70fb      	strb	r3, [r7, #3]
 800405e:	460b      	mov	r3, r1
 8004060:	70bb      	strb	r3, [r7, #2]
 8004062:	4613      	mov	r3, r2
 8004064:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4413      	add	r3, r2
 8004076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407a:	461a      	mov	r2, r3
 800407c:	f04f 33ff 	mov.w	r3, #4294967295
 8004080:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004082:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004086:	2b03      	cmp	r3, #3
 8004088:	d87e      	bhi.n	8004188 <USB_HC_Init+0x13c>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <USB_HC_Init+0x44>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040a1 	.word	0x080040a1
 8004094:	0800414b 	.word	0x0800414b
 8004098:	080040a1 	.word	0x080040a1
 800409c:	0800410d 	.word	0x0800410d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ac:	461a      	mov	r2, r3
 80040ae:	f240 439d 	movw	r3, #1181	; 0x49d
 80040b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80040b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	da10      	bge.n	80040de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	0151      	lsls	r1, r2, #5
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	440a      	add	r2, r1
 80040d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040da:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80040dc:	e057      	b.n	800418e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d051      	beq.n	800418e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	78fa      	ldrb	r2, [r7, #3]
 80040fa:	0151      	lsls	r1, r2, #5
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	440a      	add	r2, r1
 8004100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004104:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004108:	60d3      	str	r3, [r2, #12]
      break;
 800410a:	e040      	b.n	800418e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004118:	461a      	mov	r2, r3
 800411a:	f240 639d 	movw	r3, #1693	; 0x69d
 800411e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004120:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004124:	2b00      	cmp	r3, #0
 8004126:	da34      	bge.n	8004192 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4413      	add	r3, r2
 8004130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	0151      	lsls	r1, r2, #5
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	440a      	add	r2, r1
 800413e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004146:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004148:	e023      	b.n	8004192 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4413      	add	r3, r2
 8004152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004156:	461a      	mov	r2, r3
 8004158:	f240 2325 	movw	r3, #549	; 0x225
 800415c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800415e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004162:	2b00      	cmp	r3, #0
 8004164:	da17      	bge.n	8004196 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	0151      	lsls	r1, r2, #5
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	440a      	add	r2, r1
 800417c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004180:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004184:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004186:	e006      	b.n	8004196 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	77fb      	strb	r3, [r7, #31]
      break;
 800418c:	e004      	b.n	8004198 <USB_HC_Init+0x14c>
      break;
 800418e:	bf00      	nop
 8004190:	e002      	b.n	8004198 <USB_HC_Init+0x14c>
      break;
 8004192:	bf00      	nop
 8004194:	e000      	b.n	8004198 <USB_HC_Init+0x14c>
      break;
 8004196:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	2101      	movs	r1, #1
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	6939      	ldr	r1, [r7, #16]
 80041ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80041b2:	4313      	orrs	r3, r2
 80041b4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80041c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	da03      	bge.n	80041d2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80041ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	e001      	b.n	80041d6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ff0f 	bl	8003ffa <USB_GetHostSpeed>
 80041dc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80041de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d106      	bne.n	80041f4 <USB_HC_Init+0x1a8>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d003      	beq.n	80041f4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80041ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	e001      	b.n	80041f8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80041f8:	787b      	ldrb	r3, [r7, #1]
 80041fa:	059b      	lsls	r3, r3, #22
 80041fc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004200:	78bb      	ldrb	r3, [r7, #2]
 8004202:	02db      	lsls	r3, r3, #11
 8004204:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004208:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800420a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800420e:	049b      	lsls	r3, r3, #18
 8004210:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004214:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004216:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004218:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800421c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	0159      	lsls	r1, r3, #5
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	440b      	add	r3, r1
 800422a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004234:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004236:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800423a:	2b03      	cmp	r3, #3
 800423c:	d10f      	bne.n	800425e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4413      	add	r3, r2
 8004246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	0151      	lsls	r1, r2, #5
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	440a      	add	r2, r1
 8004254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004258:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800425c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800425e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3720      	adds	r7, #32
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08c      	sub	sp, #48	; 0x30
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	4613      	mov	r3, r2
 8004274:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	785b      	ldrb	r3, [r3, #1]
 800427e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004284:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d02d      	beq.n	80042ee <USB_HC_StartXfer+0x86>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	791b      	ldrb	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d129      	bne.n	80042ee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d117      	bne.n	80042d0 <USB_HC_StartXfer+0x68>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	79db      	ldrb	r3, [r3, #7]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <USB_HC_StartXfer+0x48>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	79db      	ldrb	r3, [r3, #7]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d10f      	bne.n	80042d0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	6a3a      	ldr	r2, [r7, #32]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ce:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10b      	bne.n	80042ee <USB_HC_StartXfer+0x86>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	795b      	ldrb	r3, [r3, #5]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d107      	bne.n	80042ee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	785b      	ldrb	r3, [r3, #1]
 80042e2:	4619      	mov	r1, r3
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 fa2f 	bl	8004748 <USB_DoPing>
      return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e0f8      	b.n	80044e0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d018      	beq.n	8004328 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	8912      	ldrh	r2, [r2, #8]
 80042fe:	4413      	add	r3, r2
 8004300:	3b01      	subs	r3, #1
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	8912      	ldrh	r2, [r2, #8]
 8004306:	fbb3 f3f2 	udiv	r3, r3, r2
 800430a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800430c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800430e:	8b7b      	ldrh	r3, [r7, #26]
 8004310:	429a      	cmp	r2, r3
 8004312:	d90b      	bls.n	800432c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004314:	8b7b      	ldrh	r3, [r7, #26]
 8004316:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	8912      	ldrh	r2, [r2, #8]
 800431e:	fb02 f203 	mul.w	r2, r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	611a      	str	r2, [r3, #16]
 8004326:	e001      	b.n	800432c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004328:	2301      	movs	r3, #1
 800432a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	78db      	ldrb	r3, [r3, #3]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	8912      	ldrh	r2, [r2, #8]
 800433a:	fb02 f203 	mul.w	r2, r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	611a      	str	r2, [r3, #16]
 8004342:	e003      	b.n	800434c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004354:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004356:	04d9      	lsls	r1, r3, #19
 8004358:	4b63      	ldr	r3, [pc, #396]	; (80044e8 <USB_HC_StartXfer+0x280>)
 800435a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800435c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	7a9b      	ldrb	r3, [r3, #10]
 8004362:	075b      	lsls	r3, r3, #29
 8004364:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004368:	69f9      	ldr	r1, [r7, #28]
 800436a:	0148      	lsls	r0, r1, #5
 800436c:	6a39      	ldr	r1, [r7, #32]
 800436e:	4401      	add	r1, r0
 8004370:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004374:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004376:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	68d9      	ldr	r1, [r3, #12]
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	4413      	add	r3, r2
 800438a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438e:	460a      	mov	r2, r1
 8004390:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bf0c      	ite	eq
 80043a2:	2301      	moveq	r3, #1
 80043a4:	2300      	movne	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	0151      	lsls	r1, r2, #5
 80043bc:	6a3a      	ldr	r2, [r7, #32]
 80043be:	440a      	add	r2, r1
 80043c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80043c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	7e7b      	ldrb	r3, [r7, #25]
 80043da:	075b      	lsls	r3, r3, #29
 80043dc:	69f9      	ldr	r1, [r7, #28]
 80043de:	0148      	lsls	r0, r1, #5
 80043e0:	6a39      	ldr	r1, [r7, #32]
 80043e2:	4401      	add	r1, r0
 80043e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80043e8:	4313      	orrs	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004402:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	78db      	ldrb	r3, [r3, #3]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	e003      	b.n	800441e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800441c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004424:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	4413      	add	r3, r2
 800442e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004432:	461a      	mov	r2, r3
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e04e      	b.n	80044e0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	78db      	ldrb	r3, [r3, #3]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d149      	bne.n	80044de <USB_HC_StartXfer+0x276>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d045      	beq.n	80044de <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	79db      	ldrb	r3, [r3, #7]
 8004456:	2b03      	cmp	r3, #3
 8004458:	d830      	bhi.n	80044bc <USB_HC_StartXfer+0x254>
 800445a:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <USB_HC_StartXfer+0x1f8>)
 800445c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004460:	08004471 	.word	0x08004471
 8004464:	08004495 	.word	0x08004495
 8004468:	08004471 	.word	0x08004471
 800446c:	08004495 	.word	0x08004495
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	3303      	adds	r3, #3
 8004476:	089b      	lsrs	r3, r3, #2
 8004478:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800447a:	8afa      	ldrh	r2, [r7, #22]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	b29b      	uxth	r3, r3
 8004482:	429a      	cmp	r2, r3
 8004484:	d91c      	bls.n	80044c0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f043 0220 	orr.w	r2, r3, #32
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	619a      	str	r2, [r3, #24]
        }
        break;
 8004492:	e015      	b.n	80044c0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	3303      	adds	r3, #3
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800449e:	8afa      	ldrh	r2, [r7, #22]
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d90a      	bls.n	80044c4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80044ba:	e003      	b.n	80044c4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80044bc:	bf00      	nop
 80044be:	e002      	b.n	80044c6 <USB_HC_StartXfer+0x25e>
        break;
 80044c0:	bf00      	nop
 80044c2:	e000      	b.n	80044c6 <USB_HC_StartXfer+0x25e>
        break;
 80044c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	68d9      	ldr	r1, [r3, #12]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	785a      	ldrb	r2, [r3, #1]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2000      	movs	r0, #0
 80044d6:	9000      	str	r0, [sp, #0]
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff fbab 	bl	8003c34 <USB_WritePacket>
  }

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3728      	adds	r7, #40	; 0x28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	1ff80000 	.word	0x1ff80000

080044ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	b29b      	uxth	r3, r3
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800450e:	b480      	push	{r7}
 8004510:	b089      	sub	sp, #36	; 0x24
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	460b      	mov	r3, r1
 8004518:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	4413      	add	r3, r2
 800452e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	0c9b      	lsrs	r3, r3, #18
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	4413      	add	r3, r2
 8004544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	0fdb      	lsrs	r3, r3, #31
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b20      	cmp	r3, #32
 800455c:	d104      	bne.n	8004568 <USB_HC_Halt+0x5a>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	e0e8      	b.n	800473a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <USB_HC_Halt+0x66>
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d173      	bne.n	800465c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	4413      	add	r3, r2
 800457c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	0151      	lsls	r1, r2, #5
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	440a      	add	r2, r1
 800458a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800458e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004592:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	f040 80cb 	bne.w	8004738 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d143      	bne.n	8004636 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	0151      	lsls	r1, r2, #5
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	440a      	add	r2, r1
 80045c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045ec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	440a      	add	r2, r1
 8004604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004608:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800460c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3301      	adds	r3, #1
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800461a:	d81d      	bhi.n	8004658 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800462e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004632:	d0ec      	beq.n	800460e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004634:	e080      	b.n	8004738 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	4413      	add	r3, r2
 800463e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	0151      	lsls	r1, r2, #5
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	440a      	add	r2, r1
 800464c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004650:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004654:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004656:	e06f      	b.n	8004738 <USB_HC_Halt+0x22a>
            break;
 8004658:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800465a:	e06d      	b.n	8004738 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	440a      	add	r2, r1
 8004672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800467a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d143      	bne.n	8004714 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	0151      	lsls	r1, r2, #5
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	440a      	add	r2, r1
 80046e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046ea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	3301      	adds	r3, #1
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046f8:	d81d      	bhi.n	8004736 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	4413      	add	r3, r2
 8004702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800470c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004710:	d0ec      	beq.n	80046ec <USB_HC_Halt+0x1de>
 8004712:	e011      	b.n	8004738 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	440a      	add	r2, r1
 800472a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800472e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	e000      	b.n	8004738 <USB_HC_Halt+0x22a>
          break;
 8004736:	bf00      	nop
    }
  }

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3724      	adds	r7, #36	; 0x24
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800475c:	2301      	movs	r3, #1
 800475e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	04da      	lsls	r2, r3, #19
 8004764:	4b15      	ldr	r3, [pc, #84]	; (80047bc <USB_DoPing+0x74>)
 8004766:	4013      	ands	r3, r2
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	0151      	lsls	r1, r2, #5
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	440a      	add	r2, r1
 8004770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004778:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	4413      	add	r3, r2
 8004782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004790:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004798:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a6:	461a      	mov	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	1ff80000 	.word	0x1ff80000

080047c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff f9ab 	bl	8003b2c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80047d6:	2110      	movs	r1, #16
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff f9e3 	bl	8003ba4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff fa06 	bl	8003bf0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80047e4:	2300      	movs	r3, #0
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	e01f      	b.n	800482a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004800:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004808:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004810:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481e:	461a      	mov	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	3301      	adds	r3, #1
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b0f      	cmp	r3, #15
 800482e:	d9dc      	bls.n	80047ea <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004830:	2300      	movs	r3, #0
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	e034      	b.n	80048a0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800484c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004854:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800485c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486a:	461a      	mov	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	3301      	adds	r3, #1
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800487c:	d80c      	bhi.n	8004898 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004894:	d0ec      	beq.n	8004870 <USB_StopHost+0xb0>
 8004896:	e000      	b.n	800489a <USB_StopHost+0xda>
        break;
 8004898:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	3301      	adds	r3, #1
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	2b0f      	cmp	r3, #15
 80048a4:	d9c7      	bls.n	8004836 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ac:	461a      	mov	r2, r3
 80048ae:	f04f 33ff 	mov.w	r3, #4294967295
 80048b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff f924 	bl	8003b0a <USB_EnableGlobalInt>

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80048cc:	b590      	push	{r4, r7, lr}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af04      	add	r7, sp, #16
 80048d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80048d4:	2301      	movs	r3, #1
 80048d6:	2202      	movs	r2, #2
 80048d8:	2102      	movs	r1, #2
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fc66 	bl	80051ac <USBH_FindInterface>
 80048e0:	4603      	mov	r3, r0
 80048e2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2bff      	cmp	r3, #255	; 0xff
 80048e8:	d002      	beq.n	80048f0 <USBH_CDC_InterfaceInit+0x24>
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d901      	bls.n	80048f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80048f0:	2302      	movs	r3, #2
 80048f2:	e13d      	b.n	8004b70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	4619      	mov	r1, r3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fc3b 	bl	8005174 <USBH_SelectInterface>
 80048fe:	4603      	mov	r3, r0
 8004900:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8004902:	7bbb      	ldrb	r3, [r7, #14]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8004908:	2302      	movs	r3, #2
 800490a:	e131      	b.n	8004b70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004912:	2050      	movs	r0, #80	; 0x50
 8004914:	f001 fb12 	bl	8005f3c <malloc>
 8004918:	4603      	mov	r3, r0
 800491a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800492c:	2302      	movs	r3, #2
 800492e:	e11f      	b.n	8004b70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8004930:	2250      	movs	r2, #80	; 0x50
 8004932:	2100      	movs	r1, #0
 8004934:	68b8      	ldr	r0, [r7, #8]
 8004936:	f001 fb11 	bl	8005f5c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	211a      	movs	r1, #26
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	4413      	add	r3, r2
 8004946:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	b25b      	sxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	da15      	bge.n	800497e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	211a      	movs	r1, #26
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	4413      	add	r3, r2
 800495e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	211a      	movs	r1, #26
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	4413      	add	r3, r2
 8004974:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004978:	881a      	ldrh	r2, [r3, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	785b      	ldrb	r3, [r3, #1]
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 ff9c 	bl	80058c2 <USBH_AllocPipe>
 800498a:	4603      	mov	r3, r0
 800498c:	461a      	mov	r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	7819      	ldrb	r1, [r3, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	7858      	ldrb	r0, [r3, #1]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	8952      	ldrh	r2, [r2, #10]
 80049aa:	9202      	str	r2, [sp, #8]
 80049ac:	2203      	movs	r2, #3
 80049ae:	9201      	str	r2, [sp, #4]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	4623      	mov	r3, r4
 80049b4:	4602      	mov	r2, r0
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 ff54 	bl	8005864 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2200      	movs	r2, #0
 80049c2:	4619      	mov	r1, r3
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 fa17 	bl	8005df8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80049ca:	2300      	movs	r3, #0
 80049cc:	2200      	movs	r2, #0
 80049ce:	210a      	movs	r1, #10
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fbeb 	bl	80051ac <USBH_FindInterface>
 80049d6:	4603      	mov	r3, r0
 80049d8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2bff      	cmp	r3, #255	; 0xff
 80049de:	d002      	beq.n	80049e6 <USBH_CDC_InterfaceInit+0x11a>
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d901      	bls.n	80049ea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80049e6:	2302      	movs	r3, #2
 80049e8:	e0c2      	b.n	8004b70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	211a      	movs	r1, #26
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	4413      	add	r3, r2
 80049f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	da16      	bge.n	8004a30 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	211a      	movs	r1, #26
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004a12:	781a      	ldrb	r2, [r3, #0]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	211a      	movs	r1, #26
 8004a1e:	fb01 f303 	mul.w	r3, r1, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004a28:	881a      	ldrh	r2, [r3, #0]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	835a      	strh	r2, [r3, #26]
 8004a2e:	e015      	b.n	8004a5c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	211a      	movs	r1, #26
 8004a36:	fb01 f303 	mul.w	r3, r1, r3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	211a      	movs	r1, #26
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004a56:	881a      	ldrh	r2, [r3, #0]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	211a      	movs	r1, #26
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	b25b      	sxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	da16      	bge.n	8004aa2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	211a      	movs	r1, #26
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004a84:	781a      	ldrb	r2, [r3, #0]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	211a      	movs	r1, #26
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004a9a:	881a      	ldrh	r2, [r3, #0]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	835a      	strh	r2, [r3, #26]
 8004aa0:	e015      	b.n	8004ace <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	211a      	movs	r1, #26
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	4413      	add	r3, r2
 8004aae:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004ab2:	781a      	ldrb	r2, [r3, #0]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	211a      	movs	r1, #26
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004ac8:	881a      	ldrh	r2, [r3, #0]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	7b9b      	ldrb	r3, [r3, #14]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fef4 	bl	80058c2 <USBH_AllocPipe>
 8004ada:	4603      	mov	r3, r0
 8004adc:	461a      	mov	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	7bdb      	ldrb	r3, [r3, #15]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 feea 	bl	80058c2 <USBH_AllocPipe>
 8004aee:	4603      	mov	r3, r0
 8004af0:	461a      	mov	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	7b59      	ldrb	r1, [r3, #13]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	7b98      	ldrb	r0, [r3, #14]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	8b12      	ldrh	r2, [r2, #24]
 8004b0e:	9202      	str	r2, [sp, #8]
 8004b10:	2202      	movs	r2, #2
 8004b12:	9201      	str	r2, [sp, #4]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	4623      	mov	r3, r4
 8004b18:	4602      	mov	r2, r0
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fea2 	bl	8005864 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	7b19      	ldrb	r1, [r3, #12]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	7bd8      	ldrb	r0, [r3, #15]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	8b52      	ldrh	r2, [r2, #26]
 8004b38:	9202      	str	r2, [sp, #8]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	9201      	str	r2, [sp, #4]
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	4623      	mov	r3, r4
 8004b42:	4602      	mov	r2, r0
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fe8d 	bl	8005864 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	7b5b      	ldrb	r3, [r3, #13]
 8004b56:	2200      	movs	r2, #0
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f001 f94c 	bl	8005df8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	7b1b      	ldrb	r3, [r3, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	4619      	mov	r1, r3
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f001 f945 	bl	8005df8 <USBH_LL_SetToggle>

  return USBH_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd90      	pop	{r4, r7, pc}

08004b78 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00e      	beq.n	8004bb0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fe82 	bl	80058a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fead 	bl	8005904 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	7b1b      	ldrb	r3, [r3, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00e      	beq.n	8004bd6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	7b1b      	ldrb	r3, [r3, #12]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fe6f 	bl	80058a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	7b1b      	ldrb	r3, [r3, #12]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fe9a 	bl	8005904 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	7b5b      	ldrb	r3, [r3, #13]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00e      	beq.n	8004bfc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	7b5b      	ldrb	r3, [r3, #13]
 8004be2:	4619      	mov	r1, r3
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fe5c 	bl	80058a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	7b5b      	ldrb	r3, [r3, #13]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fe87 	bl	8005904 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00b      	beq.n	8004c20 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 f99b 	bl	8005f4c <free>
    phost->pActiveClass->pData = 0U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3340      	adds	r3, #64	; 0x40
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f8b1 	bl	8004daa <GetLineCoding>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8004c4c:	7afb      	ldrb	r3, [r7, #11]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d105      	bne.n	8004c5e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004c58:	2102      	movs	r1, #2
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8004c5e:	7afb      	ldrb	r3, [r7, #11]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d877      	bhi.n	8004d7c <USBH_CDC_Process+0x114>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <USBH_CDC_Process+0x2c>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004ca9 	.word	0x08004ca9
 8004c98:	08004caf 	.word	0x08004caf
 8004c9c:	08004cdf 	.word	0x08004cdf
 8004ca0:	08004d53 	.word	0x08004d53
 8004ca4:	08004d61 	.word	0x08004d61
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cac:	e06d      	b.n	8004d8a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f897 	bl	8004de8 <SetLineCoding>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004cbe:	7bbb      	ldrb	r3, [r7, #14]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004ccc:	e058      	b.n	8004d80 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8004cce:	7bbb      	ldrb	r3, [r7, #14]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d055      	beq.n	8004d80 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004cdc:	e050      	b.n	8004d80 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	3340      	adds	r3, #64	; 0x40
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f860 	bl	8004daa <GetLineCoding>
 8004cea:	4603      	mov	r3, r0
 8004cec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004cee:	7bbb      	ldrb	r3, [r7, #14]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d126      	bne.n	8004d42 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d06:	791b      	ldrb	r3, [r3, #4]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d13b      	bne.n	8004d84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d16:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d133      	bne.n	8004d84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d26:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d12b      	bne.n	8004d84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d34:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d124      	bne.n	8004d84 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f958 	bl	8004ff0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004d40:	e020      	b.n	8004d84 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8004d42:	7bbb      	ldrb	r3, [r7, #14]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d01d      	beq.n	8004d84 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004d50:	e018      	b.n	8004d84 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f867 	bl	8004e26 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f8da 	bl	8004f12 <CDC_ProcessReception>
      break;
 8004d5e:	e014      	b.n	8004d8a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8004d60:	2100      	movs	r1, #0
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fb08 	bl	8005378 <USBH_ClrFeature>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004d6c:	7bbb      	ldrb	r3, [r7, #14]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8004d7a:	e005      	b.n	8004d88 <USBH_CDC_Process+0x120>

    default:
      break;
 8004d7c:	bf00      	nop
 8004d7e:	e004      	b.n	8004d8a <USBH_CDC_Process+0x122>
      break;
 8004d80:	bf00      	nop
 8004d82:	e002      	b.n	8004d8a <USBH_CDC_Process+0x122>
      break;
 8004d84:	bf00      	nop
 8004d86:	e000      	b.n	8004d8a <USBH_CDC_Process+0x122>
      break;
 8004d88:	bf00      	nop

  }

  return status;
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	22a1      	movs	r2, #161	; 0xa1
 8004db8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2221      	movs	r2, #33	; 0x21
 8004dbe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2207      	movs	r2, #7
 8004dd0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2207      	movs	r2, #7
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 faf1 	bl	80053c0 <USBH_CtlReq>
 8004dde:	4603      	mov	r3, r0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2221      	movs	r2, #33	; 0x21
 8004df6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2207      	movs	r2, #7
 8004e0e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2207      	movs	r2, #7
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fad2 	bl	80053c0 <USBH_CtlReq>
 8004e1c:	4603      	mov	r3, r0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b086      	sub	sp, #24
 8004e2a:	af02      	add	r7, sp, #8
 8004e2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d002      	beq.n	8004e4c <CDC_ProcessTransmission+0x26>
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d023      	beq.n	8004e92 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8004e4a:	e05e      	b.n	8004f0a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	8b12      	ldrh	r2, [r2, #24]
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d90b      	bls.n	8004e70 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	69d9      	ldr	r1, [r3, #28]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8b1a      	ldrh	r2, [r3, #24]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	7b5b      	ldrb	r3, [r3, #13]
 8004e64:	2001      	movs	r0, #1
 8004e66:	9000      	str	r0, [sp, #0]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fcb8 	bl	80057de <USBH_BulkSendData>
 8004e6e:	e00b      	b.n	8004e88 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	7b5b      	ldrb	r3, [r3, #13]
 8004e7e:	2001      	movs	r0, #1
 8004e80:	9000      	str	r0, [sp, #0]
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fcab 	bl	80057de <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004e90:	e03b      	b.n	8004f0a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	7b5b      	ldrb	r3, [r3, #13]
 8004e96:	4619      	mov	r1, r3
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 ff83 	bl	8005da4 <USBH_LL_GetURBState>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8004ea2:	7afb      	ldrb	r3, [r7, #11]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d128      	bne.n	8004efa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	8b12      	ldrh	r2, [r2, #24]
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d90e      	bls.n	8004ed2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	8b12      	ldrh	r2, [r2, #24]
 8004ebc:	1a9a      	subs	r2, r3, r2
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	8b12      	ldrh	r2, [r2, #24]
 8004eca:	441a      	add	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	61da      	str	r2, [r3, #28]
 8004ed0:	e002      	b.n	8004ed8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d004      	beq.n	8004eea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004ee8:	e00e      	b.n	8004f08 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f868 	bl	8004fc8 <USBH_CDC_TransmitCallback>
      break;
 8004ef8:	e006      	b.n	8004f08 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8004efa:	7afb      	ldrb	r3, [r7, #11]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d103      	bne.n	8004f08 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004f08:	bf00      	nop
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b086      	sub	sp, #24
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004f24:	2300      	movs	r3, #0
 8004f26:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d002      	beq.n	8004f38 <CDC_ProcessReception+0x26>
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d00e      	beq.n	8004f54 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8004f36:	e043      	b.n	8004fc0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	6a19      	ldr	r1, [r3, #32]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	8b5a      	ldrh	r2, [r3, #26]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	7b1b      	ldrb	r3, [r3, #12]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fc6f 	bl	8005828 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004f52:	e035      	b.n	8004fc0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	7b1b      	ldrb	r3, [r3, #12]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 ff22 	bl	8005da4 <USBH_LL_GetURBState>
 8004f60:	4603      	mov	r3, r0
 8004f62:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8004f64:	7cfb      	ldrb	r3, [r7, #19]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d129      	bne.n	8004fbe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	7b1b      	ldrb	r3, [r3, #12]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fe85 	bl	8005c80 <USBH_LL_GetLastXferSize>
 8004f76:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d016      	beq.n	8004fb0 <CDC_ProcessReception+0x9e>
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	8b5b      	ldrh	r3, [r3, #26]
 8004f86:	461a      	mov	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d910      	bls.n	8004fb0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad2      	subs	r2, r2, r3
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	6a1a      	ldr	r2, [r3, #32]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	441a      	add	r2, r3
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2203      	movs	r2, #3
 8004faa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004fae:	e006      	b.n	8004fbe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f80f 	bl	8004fdc <USBH_CDC_ReceiveCallback>
      break;
 8004fbe:	bf00      	nop
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005018:	2302      	movs	r3, #2
 800501a:	e029      	b.n	8005070 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	79fa      	ldrb	r2, [r7, #7]
 8005020:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f81f 	bl	8005078 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fd97 	bl	8005b9c <USBH_LL_Init>

  return USBH_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e009      	b.n	800509e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	33e0      	adds	r3, #224	; 0xe0
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	2200      	movs	r2, #0
 8005096:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3301      	adds	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b0e      	cmp	r3, #14
 80050a2:	d9f2      	bls.n	800508a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e009      	b.n	80050be <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80050b4:	2200      	movs	r2, #0
 80050b6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c4:	d3f1      	bcc.n	80050aa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2240      	movs	r2, #64	; 0x40
 80050ea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d016      	beq.n	8005162 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10e      	bne.n	800515c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005144:	1c59      	adds	r1, r3, #1
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	33de      	adds	r3, #222	; 0xde
 8005150:	6839      	ldr	r1, [r7, #0]
 8005152:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	73fb      	strb	r3, [r7, #15]
 800515a:	e004      	b.n	8005166 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800515c:	2302      	movs	r3, #2
 800515e:	73fb      	strb	r3, [r7, #15]
 8005160:	e001      	b.n	8005166 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005162:	2302      	movs	r3, #2
 8005164:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005166:	7bfb      	ldrb	r3, [r7, #15]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800518a:	78fa      	ldrb	r2, [r7, #3]
 800518c:	429a      	cmp	r2, r3
 800518e:	d204      	bcs.n	800519a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	78fa      	ldrb	r2, [r7, #3]
 8005194:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005198:	e001      	b.n	800519e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800519a:	2302      	movs	r3, #2
 800519c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800519e:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	4608      	mov	r0, r1
 80051b6:	4611      	mov	r1, r2
 80051b8:	461a      	mov	r2, r3
 80051ba:	4603      	mov	r3, r0
 80051bc:	70fb      	strb	r3, [r7, #3]
 80051be:	460b      	mov	r3, r1
 80051c0:	70bb      	strb	r3, [r7, #2]
 80051c2:	4613      	mov	r3, r2
 80051c4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80051d4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80051d6:	e025      	b.n	8005224 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	221a      	movs	r2, #26
 80051dc:	fb02 f303 	mul.w	r3, r2, r3
 80051e0:	3308      	adds	r3, #8
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	3302      	adds	r3, #2
 80051e8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	795b      	ldrb	r3, [r3, #5]
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d002      	beq.n	80051fa <USBH_FindInterface+0x4e>
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	2bff      	cmp	r3, #255	; 0xff
 80051f8:	d111      	bne.n	800521e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80051fe:	78ba      	ldrb	r2, [r7, #2]
 8005200:	429a      	cmp	r2, r3
 8005202:	d002      	beq.n	800520a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005204:	78bb      	ldrb	r3, [r7, #2]
 8005206:	2bff      	cmp	r3, #255	; 0xff
 8005208:	d109      	bne.n	800521e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800520e:	787a      	ldrb	r2, [r7, #1]
 8005210:	429a      	cmp	r2, r3
 8005212:	d002      	beq.n	800521a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005214:	787b      	ldrb	r3, [r7, #1]
 8005216:	2bff      	cmp	r3, #255	; 0xff
 8005218:	d101      	bne.n	800521e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	e006      	b.n	800522c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800521e:	7dfb      	ldrb	r3, [r7, #23]
 8005220:	3301      	adds	r3, #1
 8005222:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005224:	7dfb      	ldrb	r3, [r7, #23]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d9d6      	bls.n	80051d8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800522a:	23ff      	movs	r3, #255	; 0xff
}
 800522c:	4618      	mov	r0, r3
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fce7 	bl	8005c14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005246:	2101      	movs	r1, #1
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fdbe 	bl	8005dca <USBH_LL_DriverVBUS>

  return USBH_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f804 	bl	800529a <USBH_HandleSof>
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b0b      	cmp	r3, #11
 80052aa:	d10a      	bne.n	80052c2 <USBH_HandleSof+0x28>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
  }
}
 80052c2:	bf00      	nop
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80052da:	bf00      	nop
}
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80052f6:	bf00      	nop
}
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fc7a 	bl	8005c4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	791b      	ldrb	r3, [r3, #4]
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fad1 	bl	8005904 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	795b      	ldrb	r3, [r3, #5]
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 facb 	bl	8005904 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	789b      	ldrb	r3, [r3, #2]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d10f      	bne.n	80053ac <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80053ac:	2200      	movs	r2, #0
 80053ae:	2100      	movs	r1, #0
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f805 	bl	80053c0 <USBH_CtlReq>
 80053b6:	4603      	mov	r3, r0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	4613      	mov	r3, r2
 80053cc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80053ce:	2301      	movs	r3, #1
 80053d0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	789b      	ldrb	r3, [r3, #2]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d002      	beq.n	80053e0 <USBH_CtlReq+0x20>
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d00f      	beq.n	80053fe <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80053de:	e027      	b.n	8005430 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	88fa      	ldrh	r2, [r7, #6]
 80053ea:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2202      	movs	r2, #2
 80053f6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80053f8:	2301      	movs	r3, #1
 80053fa:	75fb      	strb	r3, [r7, #23]
      break;
 80053fc:	e018      	b.n	8005430 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f81c 	bl	800543c <USBH_HandleControl>
 8005404:	4603      	mov	r3, r0
 8005406:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8005408:	7dfb      	ldrb	r3, [r7, #23]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <USBH_CtlReq+0x54>
 800540e:	7dfb      	ldrb	r3, [r7, #23]
 8005410:	2b03      	cmp	r3, #3
 8005412:	d106      	bne.n	8005422 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	761a      	strb	r2, [r3, #24]
      break;
 8005420:	e005      	b.n	800542e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8005422:	7dfb      	ldrb	r3, [r7, #23]
 8005424:	2b02      	cmp	r3, #2
 8005426:	d102      	bne.n	800542e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	709a      	strb	r2, [r3, #2]
      break;
 800542e:	bf00      	nop
  }
  return status;
 8005430:	7dfb      	ldrb	r3, [r7, #23]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af02      	add	r7, sp, #8
 8005442:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005444:	2301      	movs	r3, #1
 8005446:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005448:	2300      	movs	r3, #0
 800544a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	7e1b      	ldrb	r3, [r3, #24]
 8005450:	3b01      	subs	r3, #1
 8005452:	2b0a      	cmp	r3, #10
 8005454:	f200 8156 	bhi.w	8005704 <USBH_HandleControl+0x2c8>
 8005458:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <USBH_HandleControl+0x24>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	0800548d 	.word	0x0800548d
 8005464:	080054a7 	.word	0x080054a7
 8005468:	08005511 	.word	0x08005511
 800546c:	08005537 	.word	0x08005537
 8005470:	0800556f 	.word	0x0800556f
 8005474:	08005599 	.word	0x08005599
 8005478:	080055eb 	.word	0x080055eb
 800547c:	0800560d 	.word	0x0800560d
 8005480:	08005649 	.word	0x08005649
 8005484:	0800566f 	.word	0x0800566f
 8005488:	080056ad 	.word	0x080056ad
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f103 0110 	add.w	r1, r3, #16
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	795b      	ldrb	r3, [r3, #5]
 8005496:	461a      	mov	r2, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f943 	bl	8005724 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	761a      	strb	r2, [r3, #24]
      break;
 80054a4:	e139      	b.n	800571a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	795b      	ldrb	r3, [r3, #5]
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fc79 	bl	8005da4 <USBH_LL_GetURBState>
 80054b2:	4603      	mov	r3, r0
 80054b4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80054b6:	7bbb      	ldrb	r3, [r7, #14]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d11e      	bne.n	80054fa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	7c1b      	ldrb	r3, [r3, #16]
 80054c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054c4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8adb      	ldrh	r3, [r3, #22]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80054ce:	7b7b      	ldrb	r3, [r7, #13]
 80054d0:	2b80      	cmp	r3, #128	; 0x80
 80054d2:	d103      	bne.n	80054dc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2203      	movs	r2, #3
 80054d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80054da:	e115      	b.n	8005708 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2205      	movs	r2, #5
 80054e0:	761a      	strb	r2, [r3, #24]
      break;
 80054e2:	e111      	b.n	8005708 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80054e4:	7b7b      	ldrb	r3, [r7, #13]
 80054e6:	2b80      	cmp	r3, #128	; 0x80
 80054e8:	d103      	bne.n	80054f2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2209      	movs	r2, #9
 80054ee:	761a      	strb	r2, [r3, #24]
      break;
 80054f0:	e10a      	b.n	8005708 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2207      	movs	r2, #7
 80054f6:	761a      	strb	r2, [r3, #24]
      break;
 80054f8:	e106      	b.n	8005708 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80054fa:	7bbb      	ldrb	r3, [r7, #14]
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d003      	beq.n	8005508 <USBH_HandleControl+0xcc>
 8005500:	7bbb      	ldrb	r3, [r7, #14]
 8005502:	2b02      	cmp	r3, #2
 8005504:	f040 8100 	bne.w	8005708 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	220b      	movs	r2, #11
 800550c:	761a      	strb	r2, [r3, #24]
      break;
 800550e:	e0fb      	b.n	8005708 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005516:	b29a      	uxth	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6899      	ldr	r1, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	899a      	ldrh	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	791b      	ldrb	r3, [r3, #4]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f93a 	bl	80057a2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2204      	movs	r2, #4
 8005532:	761a      	strb	r2, [r3, #24]
      break;
 8005534:	e0f1      	b.n	800571a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	791b      	ldrb	r3, [r3, #4]
 800553a:	4619      	mov	r1, r3
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fc31 	bl	8005da4 <USBH_LL_GetURBState>
 8005542:	4603      	mov	r3, r0
 8005544:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8005546:	7bbb      	ldrb	r3, [r7, #14]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d102      	bne.n	8005552 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2209      	movs	r2, #9
 8005550:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8005552:	7bbb      	ldrb	r3, [r7, #14]
 8005554:	2b05      	cmp	r3, #5
 8005556:	d102      	bne.n	800555e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8005558:	2303      	movs	r3, #3
 800555a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800555c:	e0d6      	b.n	800570c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800555e:	7bbb      	ldrb	r3, [r7, #14]
 8005560:	2b04      	cmp	r3, #4
 8005562:	f040 80d3 	bne.w	800570c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	220b      	movs	r2, #11
 800556a:	761a      	strb	r2, [r3, #24]
      break;
 800556c:	e0ce      	b.n	800570c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6899      	ldr	r1, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	899a      	ldrh	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	795b      	ldrb	r3, [r3, #5]
 800557a:	2001      	movs	r0, #1
 800557c:	9000      	str	r0, [sp, #0]
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f8ea 	bl	8005758 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800558a:	b29a      	uxth	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2206      	movs	r2, #6
 8005594:	761a      	strb	r2, [r3, #24]
      break;
 8005596:	e0c0      	b.n	800571a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	795b      	ldrb	r3, [r3, #5]
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fc00 	bl	8005da4 <USBH_LL_GetURBState>
 80055a4:	4603      	mov	r3, r0
 80055a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80055a8:	7bbb      	ldrb	r3, [r7, #14]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d103      	bne.n	80055b6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2207      	movs	r2, #7
 80055b2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80055b4:	e0ac      	b.n	8005710 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80055b6:	7bbb      	ldrb	r3, [r7, #14]
 80055b8:	2b05      	cmp	r3, #5
 80055ba:	d105      	bne.n	80055c8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	220c      	movs	r2, #12
 80055c0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80055c2:	2303      	movs	r3, #3
 80055c4:	73fb      	strb	r3, [r7, #15]
      break;
 80055c6:	e0a3      	b.n	8005710 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80055c8:	7bbb      	ldrb	r3, [r7, #14]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d103      	bne.n	80055d6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2205      	movs	r2, #5
 80055d2:	761a      	strb	r2, [r3, #24]
      break;
 80055d4:	e09c      	b.n	8005710 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80055d6:	7bbb      	ldrb	r3, [r7, #14]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	f040 8099 	bne.w	8005710 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	220b      	movs	r2, #11
 80055e2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80055e4:	2302      	movs	r3, #2
 80055e6:	73fb      	strb	r3, [r7, #15]
      break;
 80055e8:	e092      	b.n	8005710 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	791b      	ldrb	r3, [r3, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	2100      	movs	r1, #0
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f8d5 	bl	80057a2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80055fe:	b29a      	uxth	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2208      	movs	r2, #8
 8005608:	761a      	strb	r2, [r3, #24]

      break;
 800560a:	e086      	b.n	800571a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	791b      	ldrb	r3, [r3, #4]
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fbc6 	bl	8005da4 <USBH_LL_GetURBState>
 8005618:	4603      	mov	r3, r0
 800561a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800561c:	7bbb      	ldrb	r3, [r7, #14]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d105      	bne.n	800562e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	220d      	movs	r2, #13
 8005626:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800562c:	e072      	b.n	8005714 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800562e:	7bbb      	ldrb	r3, [r7, #14]
 8005630:	2b04      	cmp	r3, #4
 8005632:	d103      	bne.n	800563c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	220b      	movs	r2, #11
 8005638:	761a      	strb	r2, [r3, #24]
      break;
 800563a:	e06b      	b.n	8005714 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800563c:	7bbb      	ldrb	r3, [r7, #14]
 800563e:	2b05      	cmp	r3, #5
 8005640:	d168      	bne.n	8005714 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8005642:	2303      	movs	r3, #3
 8005644:	73fb      	strb	r3, [r7, #15]
      break;
 8005646:	e065      	b.n	8005714 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	795b      	ldrb	r3, [r3, #5]
 800564c:	2201      	movs	r2, #1
 800564e:	9200      	str	r2, [sp, #0]
 8005650:	2200      	movs	r2, #0
 8005652:	2100      	movs	r1, #0
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f87f 	bl	8005758 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005660:	b29a      	uxth	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	220a      	movs	r2, #10
 800566a:	761a      	strb	r2, [r3, #24]
      break;
 800566c:	e055      	b.n	800571a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	795b      	ldrb	r3, [r3, #5]
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fb95 	bl	8005da4 <USBH_LL_GetURBState>
 800567a:	4603      	mov	r3, r0
 800567c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800567e:	7bbb      	ldrb	r3, [r7, #14]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d105      	bne.n	8005690 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	220d      	movs	r2, #13
 800568c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800568e:	e043      	b.n	8005718 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005690:	7bbb      	ldrb	r3, [r7, #14]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d103      	bne.n	800569e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2209      	movs	r2, #9
 800569a:	761a      	strb	r2, [r3, #24]
      break;
 800569c:	e03c      	b.n	8005718 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800569e:	7bbb      	ldrb	r3, [r7, #14]
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d139      	bne.n	8005718 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	220b      	movs	r2, #11
 80056a8:	761a      	strb	r2, [r3, #24]
      break;
 80056aa:	e035      	b.n	8005718 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	7e5b      	ldrb	r3, [r3, #25]
 80056b0:	3301      	adds	r3, #1
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	765a      	strb	r2, [r3, #25]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	7e5b      	ldrb	r3, [r3, #25]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d806      	bhi.n	80056ce <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80056cc:	e025      	b.n	800571a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80056d4:	2106      	movs	r1, #6
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	795b      	ldrb	r3, [r3, #5]
 80056e4:	4619      	mov	r1, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f90c 	bl	8005904 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	791b      	ldrb	r3, [r3, #4]
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f906 	bl	8005904 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80056fe:	2302      	movs	r3, #2
 8005700:	73fb      	strb	r3, [r7, #15]
      break;
 8005702:	e00a      	b.n	800571a <USBH_HandleControl+0x2de>

    default:
      break;
 8005704:	bf00      	nop
 8005706:	e008      	b.n	800571a <USBH_HandleControl+0x2de>
      break;
 8005708:	bf00      	nop
 800570a:	e006      	b.n	800571a <USBH_HandleControl+0x2de>
      break;
 800570c:	bf00      	nop
 800570e:	e004      	b.n	800571a <USBH_HandleControl+0x2de>
      break;
 8005710:	bf00      	nop
 8005712:	e002      	b.n	800571a <USBH_HandleControl+0x2de>
      break;
 8005714:	bf00      	nop
 8005716:	e000      	b.n	800571a <USBH_HandleControl+0x2de>
      break;
 8005718:	bf00      	nop
  }

  return status;
 800571a:	7bfb      	ldrb	r3, [r7, #15]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af04      	add	r7, sp, #16
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005732:	79f9      	ldrb	r1, [r7, #7]
 8005734:	2300      	movs	r3, #0
 8005736:	9303      	str	r3, [sp, #12]
 8005738:	2308      	movs	r3, #8
 800573a:	9302      	str	r3, [sp, #8]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	2300      	movs	r3, #0
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	2300      	movs	r3, #0
 8005746:	2200      	movs	r2, #0
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fafa 	bl	8005d42 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af04      	add	r7, sp, #16
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	4611      	mov	r1, r2
 8005764:	461a      	mov	r2, r3
 8005766:	460b      	mov	r3, r1
 8005768:	80fb      	strh	r3, [r7, #6]
 800576a:	4613      	mov	r3, r2
 800576c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800577c:	7979      	ldrb	r1, [r7, #5]
 800577e:	7e3b      	ldrb	r3, [r7, #24]
 8005780:	9303      	str	r3, [sp, #12]
 8005782:	88fb      	ldrh	r3, [r7, #6]
 8005784:	9302      	str	r3, [sp, #8]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	2301      	movs	r3, #1
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	2300      	movs	r3, #0
 8005790:	2200      	movs	r2, #0
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fad5 	bl	8005d42 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b088      	sub	sp, #32
 80057a6:	af04      	add	r7, sp, #16
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	4611      	mov	r1, r2
 80057ae:	461a      	mov	r2, r3
 80057b0:	460b      	mov	r3, r1
 80057b2:	80fb      	strh	r3, [r7, #6]
 80057b4:	4613      	mov	r3, r2
 80057b6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80057b8:	7979      	ldrb	r1, [r7, #5]
 80057ba:	2300      	movs	r3, #0
 80057bc:	9303      	str	r3, [sp, #12]
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	9302      	str	r3, [sp, #8]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	2301      	movs	r3, #1
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	2300      	movs	r3, #0
 80057cc:	2201      	movs	r2, #1
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fab7 	bl	8005d42 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80057d4:	2300      	movs	r3, #0

}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b088      	sub	sp, #32
 80057e2:	af04      	add	r7, sp, #16
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	4611      	mov	r1, r2
 80057ea:	461a      	mov	r2, r3
 80057ec:	460b      	mov	r3, r1
 80057ee:	80fb      	strh	r3, [r7, #6]
 80057f0:	4613      	mov	r3, r2
 80057f2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005802:	7979      	ldrb	r1, [r7, #5]
 8005804:	7e3b      	ldrb	r3, [r7, #24]
 8005806:	9303      	str	r3, [sp, #12]
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	9302      	str	r3, [sp, #8]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	2301      	movs	r3, #1
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	2302      	movs	r3, #2
 8005816:	2200      	movs	r2, #0
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 fa92 	bl	8005d42 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af04      	add	r7, sp, #16
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	4611      	mov	r1, r2
 8005834:	461a      	mov	r2, r3
 8005836:	460b      	mov	r3, r1
 8005838:	80fb      	strh	r3, [r7, #6]
 800583a:	4613      	mov	r3, r2
 800583c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800583e:	7979      	ldrb	r1, [r7, #5]
 8005840:	2300      	movs	r3, #0
 8005842:	9303      	str	r3, [sp, #12]
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	9302      	str	r3, [sp, #8]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	2301      	movs	r3, #1
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	2302      	movs	r3, #2
 8005852:	2201      	movs	r2, #1
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fa74 	bl	8005d42 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af04      	add	r7, sp, #16
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	4608      	mov	r0, r1
 800586e:	4611      	mov	r1, r2
 8005870:	461a      	mov	r2, r3
 8005872:	4603      	mov	r3, r0
 8005874:	70fb      	strb	r3, [r7, #3]
 8005876:	460b      	mov	r3, r1
 8005878:	70bb      	strb	r3, [r7, #2]
 800587a:	4613      	mov	r3, r2
 800587c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800587e:	7878      	ldrb	r0, [r7, #1]
 8005880:	78ba      	ldrb	r2, [r7, #2]
 8005882:	78f9      	ldrb	r1, [r7, #3]
 8005884:	8b3b      	ldrh	r3, [r7, #24]
 8005886:	9302      	str	r3, [sp, #8]
 8005888:	7d3b      	ldrb	r3, [r7, #20]
 800588a:	9301      	str	r3, [sp, #4]
 800588c:	7c3b      	ldrb	r3, [r7, #16]
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	4603      	mov	r3, r0
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fa07 	bl	8005ca6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b082      	sub	sp, #8
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	460b      	mov	r3, r1
 80058ac:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80058ae:	78fb      	ldrb	r3, [r7, #3]
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fa26 	bl	8005d04 <USBH_LL_ClosePipe>

  return USBH_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	460b      	mov	r3, r1
 80058cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f836 	bl	8005940 <USBH_GetFreePipe>
 80058d4:	4603      	mov	r3, r0
 80058d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80058d8:	89fb      	ldrh	r3, [r7, #14]
 80058da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00a      	beq.n	80058f8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80058e2:	78fa      	ldrb	r2, [r7, #3]
 80058e4:	89fb      	ldrh	r3, [r7, #14]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	33e0      	adds	r3, #224	; 0xe0
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80058f8:	89fb      	ldrh	r3, [r7, #14]
 80058fa:	b2db      	uxtb	r3, r3
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	2b0a      	cmp	r3, #10
 8005914:	d80d      	bhi.n	8005932 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	33e0      	adds	r3, #224	; 0xe0
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	78fb      	ldrb	r3, [r7, #3]
 8005924:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	33e0      	adds	r3, #224	; 0xe0
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	440b      	add	r3, r1
 8005930:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800594c:	2300      	movs	r3, #0
 800594e:	73fb      	strb	r3, [r7, #15]
 8005950:	e00f      	b.n	8005972 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	33e0      	adds	r3, #224	; 0xe0
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	b29b      	uxth	r3, r3
 800596a:	e007      	b.n	800597c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	3301      	adds	r3, #1
 8005970:	73fb      	strb	r3, [r7, #15]
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	2b0a      	cmp	r3, #10
 8005976:	d9ec      	bls.n	8005952 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8005978:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800598c:	2201      	movs	r2, #1
 800598e:	490e      	ldr	r1, [pc, #56]	; (80059c8 <MX_USB_HOST_Init+0x40>)
 8005990:	480e      	ldr	r0, [pc, #56]	; (80059cc <MX_USB_HOST_Init+0x44>)
 8005992:	f7ff fb37 	bl	8005004 <USBH_Init>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800599c:	f7fa ffe8 	bl	8000970 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80059a0:	490b      	ldr	r1, [pc, #44]	; (80059d0 <MX_USB_HOST_Init+0x48>)
 80059a2:	480a      	ldr	r0, [pc, #40]	; (80059cc <MX_USB_HOST_Init+0x44>)
 80059a4:	f7ff fbbc 	bl	8005120 <USBH_RegisterClass>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80059ae:	f7fa ffdf 	bl	8000970 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80059b2:	4806      	ldr	r0, [pc, #24]	; (80059cc <MX_USB_HOST_Init+0x44>)
 80059b4:	f7ff fc40 	bl	8005238 <USBH_Start>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80059be:	f7fa ffd7 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80059c2:	bf00      	nop
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	080059d5 	.word	0x080059d5
 80059cc:	20000128 	.word	0x20000128
 80059d0:	2000000c 	.word	0x2000000c

080059d4 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d819      	bhi.n	8005a1c <USBH_UserProcess+0x48>
 80059e8:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <USBH_UserProcess+0x1c>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005a1d 	.word	0x08005a1d
 80059f4:	08005a0d 	.word	0x08005a0d
 80059f8:	08005a1d 	.word	0x08005a1d
 80059fc:	08005a15 	.word	0x08005a15
 8005a00:	08005a05 	.word	0x08005a05
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8005a04:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <USBH_UserProcess+0x58>)
 8005a06:	2203      	movs	r2, #3
 8005a08:	701a      	strb	r2, [r3, #0]
  break;
 8005a0a:	e008      	b.n	8005a1e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8005a0c:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <USBH_UserProcess+0x58>)
 8005a0e:	2202      	movs	r2, #2
 8005a10:	701a      	strb	r2, [r3, #0]
  break;
 8005a12:	e004      	b.n	8005a1e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <USBH_UserProcess+0x58>)
 8005a16:	2201      	movs	r2, #1
 8005a18:	701a      	strb	r2, [r3, #0]
  break;
 8005a1a:	e000      	b.n	8005a1e <USBH_UserProcess+0x4a>

  default:
  break;
 8005a1c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	200000b0 	.word	0x200000b0

08005a30 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	; 0x28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a38:	f107 0314 	add.w	r3, r7, #20
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	60da      	str	r2, [r3, #12]
 8005a46:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a50:	d147      	bne.n	8005ae2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a52:	2300      	movs	r3, #0
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	4b25      	ldr	r3, [pc, #148]	; (8005aec <HAL_HCD_MspInit+0xbc>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	4a24      	ldr	r2, [pc, #144]	; (8005aec <HAL_HCD_MspInit+0xbc>)
 8005a5c:	f043 0301 	orr.w	r3, r3, #1
 8005a60:	6313      	str	r3, [r2, #48]	; 0x30
 8005a62:	4b22      	ldr	r3, [pc, #136]	; (8005aec <HAL_HCD_MspInit+0xbc>)
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005a7c:	f107 0314 	add.w	r3, r7, #20
 8005a80:	4619      	mov	r1, r3
 8005a82:	481b      	ldr	r0, [pc, #108]	; (8005af0 <HAL_HCD_MspInit+0xc0>)
 8005a84:	f7fb fb3e 	bl	8001104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005a88:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a96:	2300      	movs	r3, #0
 8005a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005a9a:	230a      	movs	r3, #10
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a9e:	f107 0314 	add.w	r3, r7, #20
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4812      	ldr	r0, [pc, #72]	; (8005af0 <HAL_HCD_MspInit+0xc0>)
 8005aa6:	f7fb fb2d 	bl	8001104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005aaa:	4b10      	ldr	r3, [pc, #64]	; (8005aec <HAL_HCD_MspInit+0xbc>)
 8005aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aae:	4a0f      	ldr	r2, [pc, #60]	; (8005aec <HAL_HCD_MspInit+0xbc>)
 8005ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab4:	6353      	str	r3, [r2, #52]	; 0x34
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <HAL_HCD_MspInit+0xbc>)
 8005abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abe:	4a0b      	ldr	r2, [pc, #44]	; (8005aec <HAL_HCD_MspInit+0xbc>)
 8005ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ac6:	4b09      	ldr	r3, [pc, #36]	; (8005aec <HAL_HCD_MspInit+0xbc>)
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	2043      	movs	r0, #67	; 0x43
 8005ad8:	f7fb fa1b 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005adc:	2043      	movs	r0, #67	; 0x43
 8005ade:	f7fb fa34 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005ae2:	bf00      	nop
 8005ae4:	3728      	adds	r7, #40	; 0x28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800
 8005af0:	40020000 	.word	0x40020000

08005af4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff fbb7 	bl	8005276 <USBH_LL_IncTimer>
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fbef 	bl	8005302 <USBH_LL_Connect>
}
 8005b24:	bf00      	nop
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff fbf8 	bl	8005330 <USBH_LL_Disconnect>
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	70fb      	strb	r3, [r7, #3]
 8005b54:	4613      	mov	r3, r2
 8005b56:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fba9 	bl	80052ca <USBH_LL_PortEnabled>
}
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff fba9 	bl	80052e6 <USBH_LL_PortDisabled>
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d12a      	bne.n	8005c04 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8005bae:	4a18      	ldr	r2, [pc, #96]	; (8005c10 <USBH_LL_Init+0x74>)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <USBH_LL_Init+0x74>)
 8005bba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005bbe:	4b14      	ldr	r3, [pc, #80]	; (8005c10 <USBH_LL_Init+0x74>)
 8005bc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005bc4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8005bc6:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <USBH_LL_Init+0x74>)
 8005bc8:	2208      	movs	r2, #8
 8005bca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8005bcc:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <USBH_LL_Init+0x74>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005bd2:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <USBH_LL_Init+0x74>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005bd8:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <USBH_LL_Init+0x74>)
 8005bda:	2202      	movs	r2, #2
 8005bdc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005bde:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <USBH_LL_Init+0x74>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005be4:	480a      	ldr	r0, [pc, #40]	; (8005c10 <USBH_LL_Init+0x74>)
 8005be6:	f7fb fc42 	bl	800146e <HAL_HCD_Init>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8005bf0:	f7fa febe 	bl	8000970 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8005bf4:	4806      	ldr	r0, [pc, #24]	; (8005c10 <USBH_LL_Init+0x74>)
 8005bf6:	f7fc f811 	bl	8001c1c <HAL_HCD_GetCurrentFrame>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff fb2a 	bl	8005258 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000500 	.word	0x20000500

08005c14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fb ff8e 	bl	8001b4c <HAL_HCD_Start>
 8005c30:	4603      	mov	r3, r0
 8005c32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 f90e 	bl	8005e58 <USBH_Get_USB_Status>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005c40:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fb ff96 	bl	8001b92 <HAL_HCD_Stop>
 8005c66:	4603      	mov	r3, r0
 8005c68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 f8f3 	bl	8005e58 <USBH_Get_USB_Status>
 8005c72:	4603      	mov	r3, r0
 8005c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005c92:	78fa      	ldrb	r2, [r7, #3]
 8005c94:	4611      	mov	r1, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fb ffac 	bl	8001bf4 <HAL_HCD_HC_GetXferCount>
 8005c9c:	4603      	mov	r3, r0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005ca6:	b590      	push	{r4, r7, lr}
 8005ca8:	b089      	sub	sp, #36	; 0x24
 8005caa:	af04      	add	r7, sp, #16
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	4608      	mov	r0, r1
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	70fb      	strb	r3, [r7, #3]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	70bb      	strb	r3, [r7, #2]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8005cce:	787c      	ldrb	r4, [r7, #1]
 8005cd0:	78ba      	ldrb	r2, [r7, #2]
 8005cd2:	78f9      	ldrb	r1, [r7, #3]
 8005cd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cd6:	9302      	str	r3, [sp, #8]
 8005cd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	4623      	mov	r3, r4
 8005ce6:	f7fb fc24 	bl	8001532 <HAL_HCD_HC_Init>
 8005cea:	4603      	mov	r3, r0
 8005cec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 f8b1 	bl	8005e58 <USBH_Get_USB_Status>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd90      	pop	{r4, r7, pc}

08005d04 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005d1e:	78fa      	ldrb	r2, [r7, #3]
 8005d20:	4611      	mov	r1, r2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fb fc94 	bl	8001650 <HAL_HCD_HC_Halt>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 f892 	bl	8005e58 <USBH_Get_USB_Status>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8005d42:	b590      	push	{r4, r7, lr}
 8005d44:	b089      	sub	sp, #36	; 0x24
 8005d46:	af04      	add	r7, sp, #16
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	4608      	mov	r0, r1
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4603      	mov	r3, r0
 8005d52:	70fb      	strb	r3, [r7, #3]
 8005d54:	460b      	mov	r3, r1
 8005d56:	70bb      	strb	r3, [r7, #2]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8005d6a:	787c      	ldrb	r4, [r7, #1]
 8005d6c:	78ba      	ldrb	r2, [r7, #2]
 8005d6e:	78f9      	ldrb	r1, [r7, #3]
 8005d70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d74:	9303      	str	r3, [sp, #12]
 8005d76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d78:	9302      	str	r3, [sp, #8]
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	4623      	mov	r3, r4
 8005d86:	f7fb fc87 	bl	8001698 <HAL_HCD_HC_SubmitRequest>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 f861 	bl	8005e58 <USBH_Get_USB_Status>
 8005d96:	4603      	mov	r3, r0
 8005d98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd90      	pop	{r4, r7, pc}

08005da4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005db6:	78fa      	ldrb	r2, [r7, #3]
 8005db8:	4611      	mov	r1, r2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fb ff06 	bl	8001bcc <HAL_HCD_HC_GetURBState>
 8005dc0:	4603      	mov	r3, r0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d103      	bne.n	8005de8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8005de0:	78fb      	ldrb	r3, [r7, #3]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 f864 	bl	8005eb0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8005de8:	20c8      	movs	r0, #200	; 0xc8
 8005dea:	f7fa ff93 	bl	8000d14 <HAL_Delay>
  return USBH_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
 8005e04:	4613      	mov	r3, r2
 8005e06:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005e0e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	212c      	movs	r1, #44	; 0x2c
 8005e16:	fb01 f303 	mul.w	r3, r1, r3
 8005e1a:	4413      	add	r3, r2
 8005e1c:	333b      	adds	r3, #59	; 0x3b
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	212c      	movs	r1, #44	; 0x2c
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	4413      	add	r3, r2
 8005e30:	3354      	adds	r3, #84	; 0x54
 8005e32:	78ba      	ldrb	r2, [r7, #2]
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	e008      	b.n	8005e4a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	212c      	movs	r1, #44	; 0x2c
 8005e3e:	fb01 f303 	mul.w	r3, r1, r3
 8005e42:	4413      	add	r3, r2
 8005e44:	3355      	adds	r3, #85	; 0x55
 8005e46:	78ba      	ldrb	r2, [r7, #2]
 8005e48:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d817      	bhi.n	8005e9c <USBH_Get_USB_Status+0x44>
 8005e6c:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <USBH_Get_USB_Status+0x1c>)
 8005e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e72:	bf00      	nop
 8005e74:	08005e85 	.word	0x08005e85
 8005e78:	08005e8b 	.word	0x08005e8b
 8005e7c:	08005e91 	.word	0x08005e91
 8005e80:	08005e97 	.word	0x08005e97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]
    break;
 8005e88:	e00b      	b.n	8005ea2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	73fb      	strb	r3, [r7, #15]
    break;
 8005e8e:	e008      	b.n	8005ea2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
    break;
 8005e94:	e005      	b.n	8005ea2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8005e96:	2302      	movs	r3, #2
 8005e98:	73fb      	strb	r3, [r7, #15]
    break;
 8005e9a:	e002      	b.n	8005ea2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8005ea0:	bf00      	nop
  }
  return usb_status;
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	73fb      	strb	r3, [r7, #15]
 8005ec8:	e001      	b.n	8005ece <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	4803      	ldr	r0, [pc, #12]	; (8005ee4 <MX_DriverVbusFS+0x34>)
 8005ed6:	f7fb fab1 	bl	800143c <HAL_GPIO_WritePin>
}
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40020800 	.word	0x40020800

08005ee8 <__errno>:
 8005ee8:	4b01      	ldr	r3, [pc, #4]	; (8005ef0 <__errno+0x8>)
 8005eea:	6818      	ldr	r0, [r3, #0]
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	2000002c 	.word	0x2000002c

08005ef4 <__libc_init_array>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	4d0d      	ldr	r5, [pc, #52]	; (8005f2c <__libc_init_array+0x38>)
 8005ef8:	4c0d      	ldr	r4, [pc, #52]	; (8005f30 <__libc_init_array+0x3c>)
 8005efa:	1b64      	subs	r4, r4, r5
 8005efc:	10a4      	asrs	r4, r4, #2
 8005efe:	2600      	movs	r6, #0
 8005f00:	42a6      	cmp	r6, r4
 8005f02:	d109      	bne.n	8005f18 <__libc_init_array+0x24>
 8005f04:	4d0b      	ldr	r5, [pc, #44]	; (8005f34 <__libc_init_array+0x40>)
 8005f06:	4c0c      	ldr	r4, [pc, #48]	; (8005f38 <__libc_init_array+0x44>)
 8005f08:	f000 f8f8 	bl	80060fc <_init>
 8005f0c:	1b64      	subs	r4, r4, r5
 8005f0e:	10a4      	asrs	r4, r4, #2
 8005f10:	2600      	movs	r6, #0
 8005f12:	42a6      	cmp	r6, r4
 8005f14:	d105      	bne.n	8005f22 <__libc_init_array+0x2e>
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
 8005f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f1c:	4798      	blx	r3
 8005f1e:	3601      	adds	r6, #1
 8005f20:	e7ee      	b.n	8005f00 <__libc_init_array+0xc>
 8005f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f26:	4798      	blx	r3
 8005f28:	3601      	adds	r6, #1
 8005f2a:	e7f2      	b.n	8005f12 <__libc_init_array+0x1e>
 8005f2c:	08006190 	.word	0x08006190
 8005f30:	08006190 	.word	0x08006190
 8005f34:	08006190 	.word	0x08006190
 8005f38:	08006194 	.word	0x08006194

08005f3c <malloc>:
 8005f3c:	4b02      	ldr	r3, [pc, #8]	; (8005f48 <malloc+0xc>)
 8005f3e:	4601      	mov	r1, r0
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	f000 b863 	b.w	800600c <_malloc_r>
 8005f46:	bf00      	nop
 8005f48:	2000002c 	.word	0x2000002c

08005f4c <free>:
 8005f4c:	4b02      	ldr	r3, [pc, #8]	; (8005f58 <free+0xc>)
 8005f4e:	4601      	mov	r1, r0
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	f000 b80b 	b.w	8005f6c <_free_r>
 8005f56:	bf00      	nop
 8005f58:	2000002c 	.word	0x2000002c

08005f5c <memset>:
 8005f5c:	4402      	add	r2, r0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d100      	bne.n	8005f66 <memset+0xa>
 8005f64:	4770      	bx	lr
 8005f66:	f803 1b01 	strb.w	r1, [r3], #1
 8005f6a:	e7f9      	b.n	8005f60 <memset+0x4>

08005f6c <_free_r>:
 8005f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f6e:	2900      	cmp	r1, #0
 8005f70:	d048      	beq.n	8006004 <_free_r+0x98>
 8005f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f76:	9001      	str	r0, [sp, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8005f7e:	bfb8      	it	lt
 8005f80:	18e4      	addlt	r4, r4, r3
 8005f82:	f000 f8ad 	bl	80060e0 <__malloc_lock>
 8005f86:	4a20      	ldr	r2, [pc, #128]	; (8006008 <_free_r+0x9c>)
 8005f88:	9801      	ldr	r0, [sp, #4]
 8005f8a:	6813      	ldr	r3, [r2, #0]
 8005f8c:	4615      	mov	r5, r2
 8005f8e:	b933      	cbnz	r3, 8005f9e <_free_r+0x32>
 8005f90:	6063      	str	r3, [r4, #4]
 8005f92:	6014      	str	r4, [r2, #0]
 8005f94:	b003      	add	sp, #12
 8005f96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f9a:	f000 b8a7 	b.w	80060ec <__malloc_unlock>
 8005f9e:	42a3      	cmp	r3, r4
 8005fa0:	d90b      	bls.n	8005fba <_free_r+0x4e>
 8005fa2:	6821      	ldr	r1, [r4, #0]
 8005fa4:	1862      	adds	r2, r4, r1
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	bf04      	itt	eq
 8005faa:	681a      	ldreq	r2, [r3, #0]
 8005fac:	685b      	ldreq	r3, [r3, #4]
 8005fae:	6063      	str	r3, [r4, #4]
 8005fb0:	bf04      	itt	eq
 8005fb2:	1852      	addeq	r2, r2, r1
 8005fb4:	6022      	streq	r2, [r4, #0]
 8005fb6:	602c      	str	r4, [r5, #0]
 8005fb8:	e7ec      	b.n	8005f94 <_free_r+0x28>
 8005fba:	461a      	mov	r2, r3
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	b10b      	cbz	r3, 8005fc4 <_free_r+0x58>
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	d9fa      	bls.n	8005fba <_free_r+0x4e>
 8005fc4:	6811      	ldr	r1, [r2, #0]
 8005fc6:	1855      	adds	r5, r2, r1
 8005fc8:	42a5      	cmp	r5, r4
 8005fca:	d10b      	bne.n	8005fe4 <_free_r+0x78>
 8005fcc:	6824      	ldr	r4, [r4, #0]
 8005fce:	4421      	add	r1, r4
 8005fd0:	1854      	adds	r4, r2, r1
 8005fd2:	42a3      	cmp	r3, r4
 8005fd4:	6011      	str	r1, [r2, #0]
 8005fd6:	d1dd      	bne.n	8005f94 <_free_r+0x28>
 8005fd8:	681c      	ldr	r4, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	6053      	str	r3, [r2, #4]
 8005fde:	4421      	add	r1, r4
 8005fe0:	6011      	str	r1, [r2, #0]
 8005fe2:	e7d7      	b.n	8005f94 <_free_r+0x28>
 8005fe4:	d902      	bls.n	8005fec <_free_r+0x80>
 8005fe6:	230c      	movs	r3, #12
 8005fe8:	6003      	str	r3, [r0, #0]
 8005fea:	e7d3      	b.n	8005f94 <_free_r+0x28>
 8005fec:	6825      	ldr	r5, [r4, #0]
 8005fee:	1961      	adds	r1, r4, r5
 8005ff0:	428b      	cmp	r3, r1
 8005ff2:	bf04      	itt	eq
 8005ff4:	6819      	ldreq	r1, [r3, #0]
 8005ff6:	685b      	ldreq	r3, [r3, #4]
 8005ff8:	6063      	str	r3, [r4, #4]
 8005ffa:	bf04      	itt	eq
 8005ffc:	1949      	addeq	r1, r1, r5
 8005ffe:	6021      	streq	r1, [r4, #0]
 8006000:	6054      	str	r4, [r2, #4]
 8006002:	e7c7      	b.n	8005f94 <_free_r+0x28>
 8006004:	b003      	add	sp, #12
 8006006:	bd30      	pop	{r4, r5, pc}
 8006008:	200000b4 	.word	0x200000b4

0800600c <_malloc_r>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	1ccd      	adds	r5, r1, #3
 8006010:	f025 0503 	bic.w	r5, r5, #3
 8006014:	3508      	adds	r5, #8
 8006016:	2d0c      	cmp	r5, #12
 8006018:	bf38      	it	cc
 800601a:	250c      	movcc	r5, #12
 800601c:	2d00      	cmp	r5, #0
 800601e:	4606      	mov	r6, r0
 8006020:	db01      	blt.n	8006026 <_malloc_r+0x1a>
 8006022:	42a9      	cmp	r1, r5
 8006024:	d903      	bls.n	800602e <_malloc_r+0x22>
 8006026:	230c      	movs	r3, #12
 8006028:	6033      	str	r3, [r6, #0]
 800602a:	2000      	movs	r0, #0
 800602c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800602e:	f000 f857 	bl	80060e0 <__malloc_lock>
 8006032:	4921      	ldr	r1, [pc, #132]	; (80060b8 <_malloc_r+0xac>)
 8006034:	680a      	ldr	r2, [r1, #0]
 8006036:	4614      	mov	r4, r2
 8006038:	b99c      	cbnz	r4, 8006062 <_malloc_r+0x56>
 800603a:	4f20      	ldr	r7, [pc, #128]	; (80060bc <_malloc_r+0xb0>)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	b923      	cbnz	r3, 800604a <_malloc_r+0x3e>
 8006040:	4621      	mov	r1, r4
 8006042:	4630      	mov	r0, r6
 8006044:	f000 f83c 	bl	80060c0 <_sbrk_r>
 8006048:	6038      	str	r0, [r7, #0]
 800604a:	4629      	mov	r1, r5
 800604c:	4630      	mov	r0, r6
 800604e:	f000 f837 	bl	80060c0 <_sbrk_r>
 8006052:	1c43      	adds	r3, r0, #1
 8006054:	d123      	bne.n	800609e <_malloc_r+0x92>
 8006056:	230c      	movs	r3, #12
 8006058:	6033      	str	r3, [r6, #0]
 800605a:	4630      	mov	r0, r6
 800605c:	f000 f846 	bl	80060ec <__malloc_unlock>
 8006060:	e7e3      	b.n	800602a <_malloc_r+0x1e>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	1b5b      	subs	r3, r3, r5
 8006066:	d417      	bmi.n	8006098 <_malloc_r+0x8c>
 8006068:	2b0b      	cmp	r3, #11
 800606a:	d903      	bls.n	8006074 <_malloc_r+0x68>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	441c      	add	r4, r3
 8006070:	6025      	str	r5, [r4, #0]
 8006072:	e004      	b.n	800607e <_malloc_r+0x72>
 8006074:	6863      	ldr	r3, [r4, #4]
 8006076:	42a2      	cmp	r2, r4
 8006078:	bf0c      	ite	eq
 800607a:	600b      	streq	r3, [r1, #0]
 800607c:	6053      	strne	r3, [r2, #4]
 800607e:	4630      	mov	r0, r6
 8006080:	f000 f834 	bl	80060ec <__malloc_unlock>
 8006084:	f104 000b 	add.w	r0, r4, #11
 8006088:	1d23      	adds	r3, r4, #4
 800608a:	f020 0007 	bic.w	r0, r0, #7
 800608e:	1ac2      	subs	r2, r0, r3
 8006090:	d0cc      	beq.n	800602c <_malloc_r+0x20>
 8006092:	1a1b      	subs	r3, r3, r0
 8006094:	50a3      	str	r3, [r4, r2]
 8006096:	e7c9      	b.n	800602c <_malloc_r+0x20>
 8006098:	4622      	mov	r2, r4
 800609a:	6864      	ldr	r4, [r4, #4]
 800609c:	e7cc      	b.n	8006038 <_malloc_r+0x2c>
 800609e:	1cc4      	adds	r4, r0, #3
 80060a0:	f024 0403 	bic.w	r4, r4, #3
 80060a4:	42a0      	cmp	r0, r4
 80060a6:	d0e3      	beq.n	8006070 <_malloc_r+0x64>
 80060a8:	1a21      	subs	r1, r4, r0
 80060aa:	4630      	mov	r0, r6
 80060ac:	f000 f808 	bl	80060c0 <_sbrk_r>
 80060b0:	3001      	adds	r0, #1
 80060b2:	d1dd      	bne.n	8006070 <_malloc_r+0x64>
 80060b4:	e7cf      	b.n	8006056 <_malloc_r+0x4a>
 80060b6:	bf00      	nop
 80060b8:	200000b4 	.word	0x200000b4
 80060bc:	200000b8 	.word	0x200000b8

080060c0 <_sbrk_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	4d06      	ldr	r5, [pc, #24]	; (80060dc <_sbrk_r+0x1c>)
 80060c4:	2300      	movs	r3, #0
 80060c6:	4604      	mov	r4, r0
 80060c8:	4608      	mov	r0, r1
 80060ca:	602b      	str	r3, [r5, #0]
 80060cc:	f7fa fd3e 	bl	8000b4c <_sbrk>
 80060d0:	1c43      	adds	r3, r0, #1
 80060d2:	d102      	bne.n	80060da <_sbrk_r+0x1a>
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	b103      	cbz	r3, 80060da <_sbrk_r+0x1a>
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	bd38      	pop	{r3, r4, r5, pc}
 80060dc:	20000804 	.word	0x20000804

080060e0 <__malloc_lock>:
 80060e0:	4801      	ldr	r0, [pc, #4]	; (80060e8 <__malloc_lock+0x8>)
 80060e2:	f000 b809 	b.w	80060f8 <__retarget_lock_acquire_recursive>
 80060e6:	bf00      	nop
 80060e8:	2000080c 	.word	0x2000080c

080060ec <__malloc_unlock>:
 80060ec:	4801      	ldr	r0, [pc, #4]	; (80060f4 <__malloc_unlock+0x8>)
 80060ee:	f000 b804 	b.w	80060fa <__retarget_lock_release_recursive>
 80060f2:	bf00      	nop
 80060f4:	2000080c 	.word	0x2000080c

080060f8 <__retarget_lock_acquire_recursive>:
 80060f8:	4770      	bx	lr

080060fa <__retarget_lock_release_recursive>:
 80060fa:	4770      	bx	lr

080060fc <_init>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr

08006108 <_fini>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr
