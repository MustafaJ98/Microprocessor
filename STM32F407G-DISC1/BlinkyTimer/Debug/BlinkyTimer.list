
BlinkyTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008620  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080087a8  080087a8  000187a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087c4  080087c4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080087c4  080087c4  000187c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087cc  080087cc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087cc  080087cc  000187cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087d0  080087d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080087d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000090  08008864  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08008864  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e73b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f22  00000000  00000000  0003e7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  00042720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  00043d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248e5  00000000  00000000  00045260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4bd  00000000  00000000  00069b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d35bd  00000000  00000000  00086002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001595bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006100  00000000  00000000  00159614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008790 	.word	0x08008790

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008790 	.word	0x08008790

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fcd2 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f810 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f9a8 	bl	8000820 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f88e 	bl	80005f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8ba 	bl	800064c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8e8 	bl	80006ac <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f007 fd46 	bl	8007f6c <MX_USB_HOST_Init>
  MX_TIM4_Init();
 80004e0:	f000 f91a 	bl	8000718 <MX_TIM4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e4:	f007 fd68 	bl	8007fb8 <MX_USB_HOST_Process>
 80004e8:	e7fc      	b.n	80004e4 <main+0x24>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b098      	sub	sp, #96	; 0x60
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f008 f878 	bl	80085f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 031c 	add.w	r3, r7, #28
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b31      	ldr	r3, [pc, #196]	; (80005e8 <SystemClock_Config+0xfc>)
 8000524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000526:	4a30      	ldr	r2, [pc, #192]	; (80005e8 <SystemClock_Config+0xfc>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052c:	6413      	str	r3, [r2, #64]	; 0x40
 800052e:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <SystemClock_Config+0xfc>)
 8000530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <SystemClock_Config+0x100>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a2a      	ldr	r2, [pc, #168]	; (80005ec <SystemClock_Config+0x100>)
 8000544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000548:	6013      	str	r3, [r2, #0]
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0x100>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000556:	2301      	movs	r3, #1
 8000558:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000564:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000568:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800056a:	2308      	movs	r3, #8
 800056c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800056e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000572:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000578:	2307      	movs	r3, #7
 800057a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000580:	4618      	mov	r0, r3
 8000582:	f003 fb19 	bl	8003bb8 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800058c:	f000 fa46 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	2105      	movs	r1, #5
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fd7a 	bl	80040a8 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005ba:	f000 fa2f 	bl	8000a1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005be:	2301      	movs	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005c2:	23c0      	movs	r3, #192	; 0xc0
 80005c4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 ff52 	bl	8004478 <HAL_RCCEx_PeriphCLKConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005da:	f000 fa1f 	bl	8000a1c <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3760      	adds	r7, #96	; 0x60
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f002 fcdf 	bl	8002ff0 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f9f0 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000104 	.word	0x20000104
 8000644:	40005400 	.word	0x40005400
 8000648:	000186a0 	.word	0x000186a0

0800064c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <MX_I2S3_Init+0x58>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <MX_I2S3_Init+0x5c>)
 8000676:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_I2S3_Init+0x54>)
 800068c:	f002 fdf4 	bl	8003278 <HAL_I2S_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000696:	f000 f9c1 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200001b0 	.word	0x200001b0
 80006a4:	40003c00 	.word	0x40003c00
 80006a8:	00017700 	.word	0x00017700

080006ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_SPI1_Init+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f8:	220a      	movs	r2, #10
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_SPI1_Init+0x64>)
 80006fe:	f003 fffb 	bl	80046f8 <HAL_SPI_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 f988 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000158 	.word	0x20000158
 8000714:	40013000 	.word	0x40013000

08000718 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	; 0x38
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
 8000744:	615a      	str	r2, [r3, #20]
 8000746:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000748:	4b33      	ldr	r3, [pc, #204]	; (8000818 <MX_TIM4_Init+0x100>)
 800074a:	4a34      	ldr	r2, [pc, #208]	; (800081c <MX_TIM4_Init+0x104>)
 800074c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 40000;
 800074e:	4b32      	ldr	r3, [pc, #200]	; (8000818 <MX_TIM4_Init+0x100>)
 8000750:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000754:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b30      	ldr	r3, [pc, #192]	; (8000818 <MX_TIM4_Init+0x100>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1050;
 800075c:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <MX_TIM4_Init+0x100>)
 800075e:	f240 421a 	movw	r2, #1050	; 0x41a
 8000762:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <MX_TIM4_Init+0x100>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <MX_TIM4_Init+0x100>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000770:	4829      	ldr	r0, [pc, #164]	; (8000818 <MX_TIM4_Init+0x100>)
 8000772:	f004 f84a 	bl	800480a <HAL_TIM_Base_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800077c:	f000 f94e 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078a:	4619      	mov	r1, r3
 800078c:	4822      	ldr	r0, [pc, #136]	; (8000818 <MX_TIM4_Init+0x100>)
 800078e:	f004 f93d 	bl	8004a0c <HAL_TIM_ConfigClockSource>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000798:	f000 f940 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800079c:	481e      	ldr	r0, [pc, #120]	; (8000818 <MX_TIM4_Init+0x100>)
 800079e:	f004 f883 	bl	80048a8 <HAL_TIM_OC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80007a8:	f000 f938 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	4619      	mov	r1, r3
 80007ba:	4817      	ldr	r0, [pc, #92]	; (8000818 <MX_TIM4_Init+0x100>)
 80007bc:	f004 fcfa 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80007c6:	f000 f929 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80007ca:	2330      	movs	r3, #48	; 0x30
 80007cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	4619      	mov	r1, r3
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_TIM4_Init+0x100>)
 80007e2:	f004 f8bb 	bl	800495c <HAL_TIM_OC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80007ec:	f000 f916 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  TIM_CCxChannelCmd(TIM4, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2100      	movs	r1, #0
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <MX_TIM4_Init+0x104>)
 80007f6:	f004 fcb7 	bl	8005168 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(&htim4);
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_TIM4_Init+0x100>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <MX_TIM4_Init+0x100>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f042 0201 	orr.w	r2, r2, #1
 8000808:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <MX_TIM4_Init+0x100>)
 800080c:	f000 fa4e 	bl	8000cac <HAL_TIM_MspPostInit>

}
 8000810:	bf00      	nop
 8000812:	3738      	adds	r7, #56	; 0x38
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000bc 	.word	0x200000bc
 800081c:	40000800 	.word	0x40000800

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	4b71      	ldr	r3, [pc, #452]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a70      	ldr	r2, [pc, #448]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000840:	f043 0310 	orr.w	r3, r3, #16
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b6e      	ldr	r3, [pc, #440]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	4b6a      	ldr	r3, [pc, #424]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a69      	ldr	r2, [pc, #420]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b67      	ldr	r3, [pc, #412]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b63      	ldr	r3, [pc, #396]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a62      	ldr	r2, [pc, #392]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b60      	ldr	r3, [pc, #384]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b5c      	ldr	r3, [pc, #368]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a5b      	ldr	r2, [pc, #364]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b59      	ldr	r3, [pc, #356]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b55      	ldr	r3, [pc, #340]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a54      	ldr	r2, [pc, #336]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b52      	ldr	r3, [pc, #328]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a4d      	ldr	r2, [pc, #308]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b4b      	ldr	r3, [pc, #300]	; (8000a00 <MX_GPIO_Init+0x1e0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2108      	movs	r1, #8
 80008e2:	4848      	ldr	r0, [pc, #288]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 80008e4:	f000 fe06 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2101      	movs	r1, #1
 80008ec:	4846      	ldr	r0, [pc, #280]	; (8000a08 <MX_GPIO_Init+0x1e8>)
 80008ee:	f000 fe01 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f24e 0110 	movw	r1, #57360	; 0xe010
 80008f8:	4844      	ldr	r0, [pc, #272]	; (8000a0c <MX_GPIO_Init+0x1ec>)
 80008fa:	f000 fdfb 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008fe:	2308      	movs	r3, #8
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	483b      	ldr	r0, [pc, #236]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 8000916:	f000 fc51 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800091a:	2301      	movs	r3, #1
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4835      	ldr	r0, [pc, #212]	; (8000a08 <MX_GPIO_Init+0x1e8>)
 8000932:	f000 fc43 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000936:	2308      	movs	r3, #8
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000946:	2305      	movs	r3, #5
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	482d      	ldr	r0, [pc, #180]	; (8000a08 <MX_GPIO_Init+0x1e8>)
 8000952:	f000 fc33 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095a:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <MX_GPIO_Init+0x1f0>)
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	482a      	ldr	r0, [pc, #168]	; (8000a14 <MX_GPIO_Init+0x1f4>)
 800096a:	f000 fc27 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800096e:	2304      	movs	r3, #4
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4825      	ldr	r0, [pc, #148]	; (8000a18 <MX_GPIO_Init+0x1f8>)
 8000982:	f000 fc1b 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000998:	2305      	movs	r3, #5
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	481d      	ldr	r0, [pc, #116]	; (8000a18 <MX_GPIO_Init+0x1f8>)
 80009a4:	f000 fc0a 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 80009a8:	f24e 0310 	movw	r3, #57360	; 0xe010
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4812      	ldr	r0, [pc, #72]	; (8000a0c <MX_GPIO_Init+0x1ec>)
 80009c2:	f000 fbfb 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009c6:	2320      	movs	r3, #32
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MX_GPIO_Init+0x1ec>)
 80009da:	f000 fbef 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009de:	2302      	movs	r3, #2
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_GPIO_Init+0x1f0>)
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_GPIO_Init+0x1e4>)
 80009f2:	f000 fbe3 	bl	80011bc <HAL_GPIO_Init>

}
 80009f6:	bf00      	nop
 80009f8:	3730      	adds	r7, #48	; 0x30
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	10120000 	.word	0x10120000
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a0f      	ldr	r2, [pc, #60]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a66:	2007      	movs	r0, #7
 8000a68:	f000 fb66 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a19      	ldr	r2, [pc, #100]	; (8000afc <HAL_I2C_MspInit+0x84>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12c      	bne.n	8000af4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ab6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000abc:	2312      	movs	r3, #18
 8000abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <HAL_I2C_MspInit+0x8c>)
 8000ad4:	f000 fb72 	bl	80011bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000ae2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40005400 	.word	0x40005400
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020400 	.word	0x40020400

08000b08 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <HAL_I2S_MspInit+0xc0>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d14a      	bne.n	8000bc0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <HAL_I2S_MspInit+0xc4>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a26      	ldr	r2, [pc, #152]	; (8000bcc <HAL_I2S_MspInit+0xc4>)
 8000b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <HAL_I2S_MspInit+0xc4>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <HAL_I2S_MspInit+0xc4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <HAL_I2S_MspInit+0xc4>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <HAL_I2S_MspInit+0xc4>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <HAL_I2S_MspInit+0xc4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a18      	ldr	r2, [pc, #96]	; (8000bcc <HAL_I2S_MspInit+0xc4>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_I2S_MspInit+0xc4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b7e:	2310      	movs	r3, #16
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b8e:	2306      	movs	r3, #6
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <HAL_I2S_MspInit+0xc8>)
 8000b9a:	f000 fb0f 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b9e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <HAL_I2S_MspInit+0xcc>)
 8000bbc:	f000 fafe 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	; 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40003c00 	.word	0x40003c00
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020800 	.word	0x40020800

08000bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_SPI_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12b      	bne.n	8000c52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c32:	23e0      	movs	r3, #224	; 0xe0
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c42:	2305      	movs	r3, #5
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_SPI_MspInit+0x8c>)
 8000c4e:	f000 fab5 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40013000 	.word	0x40013000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <HAL_TIM_Base_MspInit+0x3c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d10d      	bne.n	8000c96 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_TIM_Base_MspInit+0x40>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <HAL_TIM_Base_MspInit+0x40>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <HAL_TIM_Base_MspInit+0x40>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40000800 	.word	0x40000800
 8000ca8:	40023800 	.word	0x40023800

08000cac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <HAL_TIM_MspPostInit+0x68>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d11e      	bne.n	8000d0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_TIM_MspPostInit+0x6c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <HAL_TIM_MspPostInit+0x6c>)
 8000cd8:	f043 0308 	orr.w	r3, r3, #8
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_TIM_MspPostInit+0x6c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0308 	and.w	r3, r3, #8
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <HAL_TIM_MspPostInit+0x70>)
 8000d08:	f000 fa58 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40000800 	.word	0x40000800
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020c00 	.word	0x40020c00

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f8d0 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <OTG_FS_IRQHandler+0x10>)
 8000d7a:	f000 fe3f 	bl	80019fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200005d4 	.word	0x200005d4

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f007 fbe0 	bl	800857c <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20020000 	.word	0x20020000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	200000ac 	.word	0x200000ac
 8000df0:	200008e8 	.word	0x200008e8

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e1e:	490e      	ldr	r1, [pc, #56]	; (8000e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e20:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e34:	4c0b      	ldr	r4, [pc, #44]	; (8000e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e42:	f7ff ffd7 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f007 fb9f 	bl	8008588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fb39 	bl	80004c0 <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e5c:	080087d4 	.word	0x080087d4
  ldr r2, =_sbss
 8000e60:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e64:	200008e8 	.word	0x200008e8

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f94f 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fdc2 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f967 	bl	80011a2 <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f92f 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	200001f8 	.word	0x200001f8

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200001f8 	.word	0x200001f8

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4907      	ldr	r1, [pc, #28]	; (8001034 <__NVIC_EnableIRQ+0x38>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f7ff ff8e 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff29 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff3e 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff8e 	bl	800108c <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <__NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff31 	bl	8000ffc <__NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffa2 	bl	80010f4 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	e16b      	b.n	80014b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f040 815a 	bne.w	80014aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d005      	beq.n	800120e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	2b02      	cmp	r3, #2
 800120c:	d130      	bne.n	8001270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b03      	cmp	r3, #3
 800127a:	d017      	beq.n	80012ac <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d123      	bne.n	8001300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	69b9      	ldr	r1, [r7, #24]
 80012fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80b4 	beq.w	80014aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b60      	ldr	r3, [pc, #384]	; (80014c8 <HAL_GPIO_Init+0x30c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a5f      	ldr	r2, [pc, #380]	; (80014c8 <HAL_GPIO_Init+0x30c>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b5d      	ldr	r3, [pc, #372]	; (80014c8 <HAL_GPIO_Init+0x30c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135e:	4a5b      	ldr	r2, [pc, #364]	; (80014cc <HAL_GPIO_Init+0x310>)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a52      	ldr	r2, [pc, #328]	; (80014d0 <HAL_GPIO_Init+0x314>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d02b      	beq.n	80013e2 <HAL_GPIO_Init+0x226>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a51      	ldr	r2, [pc, #324]	; (80014d4 <HAL_GPIO_Init+0x318>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d025      	beq.n	80013de <HAL_GPIO_Init+0x222>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a50      	ldr	r2, [pc, #320]	; (80014d8 <HAL_GPIO_Init+0x31c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01f      	beq.n	80013da <HAL_GPIO_Init+0x21e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4f      	ldr	r2, [pc, #316]	; (80014dc <HAL_GPIO_Init+0x320>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x21a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4e      	ldr	r2, [pc, #312]	; (80014e0 <HAL_GPIO_Init+0x324>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x216>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4d      	ldr	r2, [pc, #308]	; (80014e4 <HAL_GPIO_Init+0x328>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x212>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4c      	ldr	r2, [pc, #304]	; (80014e8 <HAL_GPIO_Init+0x32c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4b      	ldr	r2, [pc, #300]	; (80014ec <HAL_GPIO_Init+0x330>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x20a>
 80013c2:	2307      	movs	r3, #7
 80013c4:	e00e      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013c6:	2308      	movs	r3, #8
 80013c8:	e00c      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013ca:	2306      	movs	r3, #6
 80013cc:	e00a      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013ce:	2305      	movs	r3, #5
 80013d0:	e008      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013d2:	2304      	movs	r3, #4
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013d6:	2303      	movs	r3, #3
 80013d8:	e004      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013da:	2302      	movs	r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013e2:	2300      	movs	r3, #0
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4093      	lsls	r3, r2
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f4:	4935      	ldr	r1, [pc, #212]	; (80014cc <HAL_GPIO_Init+0x310>)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001426:	4a32      	ldr	r2, [pc, #200]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <HAL_GPIO_Init+0x334>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001450:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147a:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <HAL_GPIO_Init+0x334>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_GPIO_Init+0x334>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <HAL_GPIO_Init+0x334>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3301      	adds	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	f67f ae90 	bls.w	80011d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40013800 	.word	0x40013800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40021400 	.word	0x40021400
 80014e8:	40021800 	.word	0x40021800
 80014ec:	40021c00 	.word	0x40021c00
 80014f0:	40013c00 	.word	0x40013c00

080014f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
 8001500:	4613      	mov	r3, r2
 8001502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001504:	787b      	ldrb	r3, [r7, #1]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150a:	887a      	ldrh	r2, [r7, #2]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001510:	e003      	b.n	800151a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	041a      	lsls	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001526:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001528:	b08f      	sub	sp, #60	; 0x3c
 800152a:	af0a      	add	r7, sp, #40	; 0x28
 800152c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e054      	b.n	80015e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d106      	bne.n	8001558 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f006 fd68 	bl	8008028 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2203      	movs	r2, #3
 800155c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f003 ff0a 	bl	8005390 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	687e      	ldr	r6, [r7, #4]
 8001584:	466d      	mov	r5, sp
 8001586:	f106 0410 	add.w	r4, r6, #16
 800158a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800158e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001592:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001596:	e885 0003 	stmia.w	r5, {r0, r1}
 800159a:	1d33      	adds	r3, r6, #4
 800159c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800159e:	6838      	ldr	r0, [r7, #0]
 80015a0:	f003 fe84 	bl	80052ac <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2101      	movs	r1, #1
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 ff01 	bl	80053b2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	687e      	ldr	r6, [r7, #4]
 80015b8:	466d      	mov	r5, sp
 80015ba:	f106 0410 	add.w	r4, r6, #16
 80015be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ce:	1d33      	adds	r3, r6, #4
 80015d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d2:	6838      	ldr	r0, [r7, #0]
 80015d4:	f004 f814 	bl	8005600 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015ea:	b590      	push	{r4, r7, lr}
 80015ec:	b089      	sub	sp, #36	; 0x24
 80015ee:	af04      	add	r7, sp, #16
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	4608      	mov	r0, r1
 80015f4:	4611      	mov	r1, r2
 80015f6:	461a      	mov	r2, r3
 80015f8:	4603      	mov	r3, r0
 80015fa:	70fb      	strb	r3, [r7, #3]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70bb      	strb	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_HCD_HC_Init+0x28>
 800160e:	2302      	movs	r3, #2
 8001610:	e076      	b.n	8001700 <HAL_HCD_HC_Init+0x116>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	212c      	movs	r1, #44	; 0x2c
 8001620:	fb01 f303 	mul.w	r3, r1, r3
 8001624:	4413      	add	r3, r2
 8001626:	333d      	adds	r3, #61	; 0x3d
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	212c      	movs	r1, #44	; 0x2c
 8001632:	fb01 f303 	mul.w	r3, r1, r3
 8001636:	4413      	add	r3, r2
 8001638:	3338      	adds	r3, #56	; 0x38
 800163a:	787a      	ldrb	r2, [r7, #1]
 800163c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	212c      	movs	r1, #44	; 0x2c
 8001644:	fb01 f303 	mul.w	r3, r1, r3
 8001648:	4413      	add	r3, r2
 800164a:	3340      	adds	r3, #64	; 0x40
 800164c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800164e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	212c      	movs	r1, #44	; 0x2c
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	4413      	add	r3, r2
 800165c:	3339      	adds	r3, #57	; 0x39
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	212c      	movs	r1, #44	; 0x2c
 8001668:	fb01 f303 	mul.w	r3, r1, r3
 800166c:	4413      	add	r3, r2
 800166e:	333f      	adds	r3, #63	; 0x3f
 8001670:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001674:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	78ba      	ldrb	r2, [r7, #2]
 800167a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800167e:	b2d0      	uxtb	r0, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	212c      	movs	r1, #44	; 0x2c
 8001684:	fb01 f303 	mul.w	r3, r1, r3
 8001688:	4413      	add	r3, r2
 800168a:	333a      	adds	r3, #58	; 0x3a
 800168c:	4602      	mov	r2, r0
 800168e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001690:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001694:	2b00      	cmp	r3, #0
 8001696:	da09      	bge.n	80016ac <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	212c      	movs	r1, #44	; 0x2c
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	4413      	add	r3, r2
 80016a4:	333b      	adds	r3, #59	; 0x3b
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	e008      	b.n	80016be <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	212c      	movs	r1, #44	; 0x2c
 80016b2:	fb01 f303 	mul.w	r3, r1, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	333b      	adds	r3, #59	; 0x3b
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	212c      	movs	r1, #44	; 0x2c
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	333c      	adds	r3, #60	; 0x3c
 80016cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016d0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	787c      	ldrb	r4, [r7, #1]
 80016d8:	78ba      	ldrb	r2, [r7, #2]
 80016da:	78f9      	ldrb	r1, [r7, #3]
 80016dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	4623      	mov	r3, r4
 80016ee:	f004 f909 	bl	8005904 <USB_HC_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bd90      	pop	{r4, r7, pc}

08001708 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_HCD_HC_Halt+0x1e>
 8001722:	2302      	movs	r3, #2
 8001724:	e00f      	b.n	8001746 <HAL_HCD_HC_Halt+0x3e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	78fa      	ldrb	r2, [r7, #3]
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f004 fb45 	bl	8005dc6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	4608      	mov	r0, r1
 800175a:	4611      	mov	r1, r2
 800175c:	461a      	mov	r2, r3
 800175e:	4603      	mov	r3, r0
 8001760:	70fb      	strb	r3, [r7, #3]
 8001762:	460b      	mov	r3, r1
 8001764:	70bb      	strb	r3, [r7, #2]
 8001766:	4613      	mov	r3, r2
 8001768:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	212c      	movs	r1, #44	; 0x2c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	333b      	adds	r3, #59	; 0x3b
 8001778:	78ba      	ldrb	r2, [r7, #2]
 800177a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	333f      	adds	r3, #63	; 0x3f
 800178a:	787a      	ldrb	r2, [r7, #1]
 800178c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800178e:	7c3b      	ldrb	r3, [r7, #16]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d112      	bne.n	80017ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	212c      	movs	r1, #44	; 0x2c
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	4413      	add	r3, r2
 80017a0:	3342      	adds	r3, #66	; 0x42
 80017a2:	2203      	movs	r2, #3
 80017a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	212c      	movs	r1, #44	; 0x2c
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	333d      	adds	r3, #61	; 0x3d
 80017b4:	7f3a      	ldrb	r2, [r7, #28]
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e008      	b.n	80017cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	212c      	movs	r1, #44	; 0x2c
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	3342      	adds	r3, #66	; 0x42
 80017c8:	2202      	movs	r2, #2
 80017ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017cc:	787b      	ldrb	r3, [r7, #1]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	f200 80c6 	bhi.w	8001960 <HAL_HCD_HC_SubmitRequest+0x210>
 80017d4:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	0800194d 	.word	0x0800194d
 80017e4:	08001851 	.word	0x08001851
 80017e8:	080018cf 	.word	0x080018cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017ec:	7c3b      	ldrb	r3, [r7, #16]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	f040 80b8 	bne.w	8001964 <HAL_HCD_HC_SubmitRequest+0x214>
 80017f4:	78bb      	ldrb	r3, [r7, #2]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 80b4 	bne.w	8001964 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80017fc:	8b3b      	ldrh	r3, [r7, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d108      	bne.n	8001814 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	212c      	movs	r1, #44	; 0x2c
 8001808:	fb01 f303 	mul.w	r3, r1, r3
 800180c:	4413      	add	r3, r2
 800180e:	3355      	adds	r3, #85	; 0x55
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	212c      	movs	r1, #44	; 0x2c
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	3355      	adds	r3, #85	; 0x55
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	212c      	movs	r1, #44	; 0x2c
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	3342      	adds	r3, #66	; 0x42
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800183a:	e093      	b.n	8001964 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	212c      	movs	r1, #44	; 0x2c
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	3342      	adds	r3, #66	; 0x42
 800184a:	2202      	movs	r2, #2
 800184c:	701a      	strb	r2, [r3, #0]
      break;
 800184e:	e089      	b.n	8001964 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001850:	78bb      	ldrb	r3, [r7, #2]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d11d      	bne.n	8001892 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	212c      	movs	r1, #44	; 0x2c
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	4413      	add	r3, r2
 8001862:	3355      	adds	r3, #85	; 0x55
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	212c      	movs	r1, #44	; 0x2c
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	4413      	add	r3, r2
 8001876:	3342      	adds	r3, #66	; 0x42
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800187c:	e073      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	3342      	adds	r3, #66	; 0x42
 800188c:	2202      	movs	r2, #2
 800188e:	701a      	strb	r2, [r3, #0]
      break;
 8001890:	e069      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3354      	adds	r3, #84	; 0x54
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	3342      	adds	r3, #66	; 0x42
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
      break;
 80018b8:	e055      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	212c      	movs	r1, #44	; 0x2c
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	3342      	adds	r3, #66	; 0x42
 80018c8:	2202      	movs	r2, #2
 80018ca:	701a      	strb	r2, [r3, #0]
      break;
 80018cc:	e04b      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018ce:	78bb      	ldrb	r3, [r7, #2]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d11d      	bne.n	8001910 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	212c      	movs	r1, #44	; 0x2c
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	3355      	adds	r3, #85	; 0x55
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	212c      	movs	r1, #44	; 0x2c
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	3342      	adds	r3, #66	; 0x42
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018fa:	e034      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	212c      	movs	r1, #44	; 0x2c
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4413      	add	r3, r2
 8001908:	3342      	adds	r3, #66	; 0x42
 800190a:	2202      	movs	r2, #2
 800190c:	701a      	strb	r2, [r3, #0]
      break;
 800190e:	e02a      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	212c      	movs	r1, #44	; 0x2c
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4413      	add	r3, r2
 800191c:	3354      	adds	r3, #84	; 0x54
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d109      	bne.n	8001938 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	212c      	movs	r1, #44	; 0x2c
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4413      	add	r3, r2
 8001930:	3342      	adds	r3, #66	; 0x42
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
      break;
 8001936:	e016      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	212c      	movs	r1, #44	; 0x2c
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	3342      	adds	r3, #66	; 0x42
 8001946:	2202      	movs	r2, #2
 8001948:	701a      	strb	r2, [r3, #0]
      break;
 800194a:	e00c      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	212c      	movs	r1, #44	; 0x2c
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	3342      	adds	r3, #66	; 0x42
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
      break;
 800195e:	e002      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001960:	bf00      	nop
 8001962:	e000      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001964:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	212c      	movs	r1, #44	; 0x2c
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	3344      	adds	r3, #68	; 0x44
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	8b3a      	ldrh	r2, [r7, #24]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	202c      	movs	r0, #44	; 0x2c
 8001980:	fb00 f303 	mul.w	r3, r0, r3
 8001984:	440b      	add	r3, r1
 8001986:	334c      	adds	r3, #76	; 0x4c
 8001988:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	212c      	movs	r1, #44	; 0x2c
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	4413      	add	r3, r2
 8001996:	3360      	adds	r3, #96	; 0x60
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	212c      	movs	r1, #44	; 0x2c
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	3350      	adds	r3, #80	; 0x50
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	212c      	movs	r1, #44	; 0x2c
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	3339      	adds	r3, #57	; 0x39
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	212c      	movs	r1, #44	; 0x2c
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	3361      	adds	r3, #97	; 0x61
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	222c      	movs	r2, #44	; 0x2c
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	3338      	adds	r3, #56	; 0x38
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	18d1      	adds	r1, r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	f004 f898 	bl	8005b20 <USB_HC_StartXfer>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop

080019fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fdb1 	bl	800557a <USB_GetMode>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	f040 80ef 	bne.w	8001bfe <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 fd95 	bl	8005554 <USB_ReadInterrupts>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80e5 	beq.w	8001bfc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fd8c 	bl	8005554 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a46:	d104      	bne.n	8001a52 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fd7c 	bl	8005554 <USB_ReadInterrupts>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a66:	d104      	bne.n	8001a72 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 fd6c 	bl	8005554 <USB_ReadInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a86:	d104      	bne.n	8001a92 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fd5c 	bl	8005554 <USB_ReadInterrupts>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d103      	bne.n	8001aae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fd4e 	bl	8005554 <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ac2:	d115      	bne.n	8001af0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001acc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d108      	bne.n	8001af0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f006 fb20 	bl	8008124 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fe44 	bl	8005778 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 fd2d 	bl	8005554 <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b04:	d102      	bne.n	8001b0c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f001 f9ff 	bl	8002f0a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 fd1f 	bl	8005554 <USB_ReadInterrupts>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d106      	bne.n	8001b2e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f006 fae3 	bl	80080ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fd0e 	bl	8005554 <USB_ReadInterrupts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d101      	bne.n	8001b46 <HAL_HCD_IRQHandler+0x14a>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_HCD_IRQHandler+0x14c>
 8001b46:	2300      	movs	r3, #0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d012      	beq.n	8001b72 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0210 	bic.w	r2, r2, #16
 8001b5a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f001 f902 	bl	8002d66 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699a      	ldr	r2, [r3, #24]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0210 	orr.w	r2, r2, #16
 8001b70:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fcec 	bl	8005554 <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b86:	d13a      	bne.n	8001bfe <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 f909 	bl	8005da4 <USB_HC_ReadInterrupt>
 8001b92:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e025      	b.n	8001be6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d018      	beq.n	8001be0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	015a      	lsls	r2, r3, #5
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bc4:	d106      	bne.n	8001bd4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f8ab 	bl	8001d28 <HCD_HC_IN_IRQHandler>
 8001bd2:	e005      	b.n	8001be0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	4619      	mov	r1, r3
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 fcc6 	bl	800256c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3301      	adds	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d3d4      	bcc.n	8001b9a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf8:	615a      	str	r2, [r3, #20]
 8001bfa:	e000      	b.n	8001bfe <HAL_HCD_IRQHandler+0x202>
      return;
 8001bfc:	bf00      	nop
    }
  }
}
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_HCD_Start+0x16>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e013      	b.n	8001c42 <HAL_HCD_Start+0x3e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fba1 	bl	800536e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2101      	movs	r1, #1
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 fe04 	bl	8005840 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_HCD_Stop+0x16>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e00d      	b.n	8001c7c <HAL_HCD_Stop+0x32>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f004 fa03 	bl	8006078 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 fdab 	bl	80057ec <USB_ResetPort>
 8001c96:	4603      	mov	r3, r0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	212c      	movs	r1, #44	; 0x2c
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3360      	adds	r3, #96	; 0x60
 8001cba:	781b      	ldrb	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	212c      	movs	r1, #44	; 0x2c
 8001cda:	fb01 f303 	mul.w	r3, r1, r3
 8001cde:	4413      	add	r3, r2
 8001ce0:	3350      	adds	r3, #80	; 0x50
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fdef 	bl	80058e0 <USB_GetCurrentFrame>
 8001d02:	4603      	mov	r3, r0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fdca 	bl	80058b2 <USB_GetHostSpeed>
 8001d1e:	4603      	mov	r3, r0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d119      	bne.n	8001d8c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d64:	461a      	mov	r2, r3
 8001d66:	2304      	movs	r3, #4
 8001d68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	0151      	lsls	r1, r2, #5
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	440a      	add	r2, r1
 8001d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	60d3      	str	r3, [r2, #12]
 8001d8a:	e101      	b.n	8001f90 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da2:	d12b      	bne.n	8001dfc <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	461a      	mov	r2, r3
 8001db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	212c      	movs	r1, #44	; 0x2c
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3361      	adds	r3, #97	; 0x61
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	0151      	lsls	r1, r2, #5
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	440a      	add	r2, r1
 8001de0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 ffe6 	bl	8005dc6 <USB_HC_Halt>
 8001dfa:	e0c9      	b.n	8001f90 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d109      	bne.n	8001e26 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2320      	movs	r3, #32
 8001e22:	6093      	str	r3, [r2, #8]
 8001e24:	e0b4      	b.n	8001f90 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d133      	bne.n	8001ea4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	0151      	lsls	r1, r2, #5
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	440a      	add	r2, r1
 8001e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e56:	f043 0302 	orr.w	r3, r3, #2
 8001e5a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	212c      	movs	r1, #44	; 0x2c
 8001e62:	fb01 f303 	mul.w	r3, r1, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	3361      	adds	r3, #97	; 0x61
 8001e6a:	2205      	movs	r2, #5
 8001e6c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2310      	movs	r3, #16
 8001e7e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2308      	movs	r3, #8
 8001e90:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 ff92 	bl	8005dc6 <USB_HC_Halt>
 8001ea2:	e075      	b.n	8001f90 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eba:	d134      	bne.n	8001f26 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	0151      	lsls	r1, r2, #5
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	440a      	add	r2, r1
 8001ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	212c      	movs	r1, #44	; 0x2c
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3361      	adds	r3, #97	; 0x61
 8001eea:	2208      	movs	r2, #8
 8001eec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efa:	461a      	mov	r2, r3
 8001efc:	2310      	movs	r3, #16
 8001efe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f12:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 ff51 	bl	8005dc6 <USB_HC_Halt>
 8001f24:	e034      	b.n	8001f90 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f38:	2b80      	cmp	r3, #128	; 0x80
 8001f3a:	d129      	bne.n	8001f90 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	0151      	lsls	r1, r2, #5
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	440a      	add	r2, r1
 8001f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	212c      	movs	r1, #44	; 0x2c
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	3361      	adds	r3, #97	; 0x61
 8001f6a:	2206      	movs	r2, #6
 8001f6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 ff24 	bl	8005dc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa6:	d122      	bne.n	8001fee <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	0151      	lsls	r1, r2, #5
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	440a      	add	r2, r1
 8001fbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fef7 	bl	8005dc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fea:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fec:	e2ba      	b.n	8002564 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	f040 811b 	bne.w	800223c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d019      	beq.n	8002042 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	212c      	movs	r1, #44	; 0x2c
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	4413      	add	r3, r2
 800201a:	3348      	adds	r3, #72	; 0x48
 800201c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	0159      	lsls	r1, r3, #5
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	440b      	add	r3, r1
 8002026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002030:	1ad2      	subs	r2, r2, r3
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	202c      	movs	r0, #44	; 0x2c
 8002038:	fb00 f303 	mul.w	r3, r0, r3
 800203c:	440b      	add	r3, r1
 800203e:	3350      	adds	r3, #80	; 0x50
 8002040:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	212c      	movs	r1, #44	; 0x2c
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	3361      	adds	r3, #97	; 0x61
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	335c      	adds	r3, #92	; 0x5c
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002072:	461a      	mov	r2, r3
 8002074:	2301      	movs	r3, #1
 8002076:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	333f      	adds	r3, #63	; 0x3f
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d009      	beq.n	80020a0 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	333f      	adds	r3, #63	; 0x3f
 800209a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800209c:	2b02      	cmp	r3, #2
 800209e:	d121      	bne.n	80020e4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	0151      	lsls	r1, r2, #5
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	440a      	add	r2, r1
 80020b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 fe7b 	bl	8005dc6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020dc:	461a      	mov	r2, r3
 80020de:	2310      	movs	r3, #16
 80020e0:	6093      	str	r3, [r2, #8]
 80020e2:	e066      	b.n	80021b2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	333f      	adds	r3, #63	; 0x3f
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d127      	bne.n	8002148 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	0151      	lsls	r1, r2, #5
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	440a      	add	r2, r1
 800210e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002112:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002116:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	212c      	movs	r1, #44	; 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	3360      	adds	r3, #96	; 0x60
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	b2d9      	uxtb	r1, r3
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	202c      	movs	r0, #44	; 0x2c
 8002134:	fb00 f303 	mul.w	r3, r0, r3
 8002138:	4413      	add	r3, r2
 800213a:	3360      	adds	r3, #96	; 0x60
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f005 fffd 	bl	8008140 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002146:	e034      	b.n	80021b2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	333f      	adds	r3, #63	; 0x3f
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d12a      	bne.n	80021b2 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3360      	adds	r3, #96	; 0x60
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3354      	adds	r3, #84	; 0x54
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	f083 0301 	eor.w	r3, r3, #1
 8002182:	b2d8      	uxtb	r0, r3
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3354      	adds	r3, #84	; 0x54
 8002192:	4602      	mov	r2, r0
 8002194:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	b2d9      	uxtb	r1, r3
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	202c      	movs	r0, #44	; 0x2c
 80021a0:	fb00 f303 	mul.w	r3, r0, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3360      	adds	r3, #96	; 0x60
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f005 ffc7 	bl	8008140 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d12b      	bne.n	8002212 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3348      	adds	r3, #72	; 0x48
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	202c      	movs	r0, #44	; 0x2c
 80021d0:	fb00 f202 	mul.w	r2, r0, r2
 80021d4:	440a      	add	r2, r1
 80021d6:	3240      	adds	r2, #64	; 0x40
 80021d8:	8812      	ldrh	r2, [r2, #0]
 80021da:	fbb3 f3f2 	udiv	r3, r3, r2
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 81be 	beq.w	8002564 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3354      	adds	r3, #84	; 0x54
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	f083 0301 	eor.w	r3, r3, #1
 80021fc:	b2d8      	uxtb	r0, r3
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	3354      	adds	r3, #84	; 0x54
 800220c:	4602      	mov	r2, r0
 800220e:	701a      	strb	r2, [r3, #0]
}
 8002210:	e1a8      	b.n	8002564 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3354      	adds	r3, #84	; 0x54
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	f083 0301 	eor.w	r3, r3, #1
 8002226:	b2d8      	uxtb	r0, r3
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	212c      	movs	r1, #44	; 0x2c
 800222e:	fb01 f303 	mul.w	r3, r1, r3
 8002232:	4413      	add	r3, r2
 8002234:	3354      	adds	r3, #84	; 0x54
 8002236:	4602      	mov	r2, r0
 8002238:	701a      	strb	r2, [r3, #0]
}
 800223a:	e193      	b.n	8002564 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b02      	cmp	r3, #2
 8002250:	f040 8106 	bne.w	8002460 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	0151      	lsls	r1, r2, #5
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	440a      	add	r2, r1
 800226a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800226e:	f023 0302 	bic.w	r3, r3, #2
 8002272:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3361      	adds	r3, #97	; 0x61
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d109      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3360      	adds	r3, #96	; 0x60
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e0c9      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3361      	adds	r3, #97	; 0x61
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d109      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3360      	adds	r3, #96	; 0x60
 80022be:	2205      	movs	r2, #5
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e0b5      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3361      	adds	r3, #97	; 0x61
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d009      	beq.n	80022ec <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	212c      	movs	r1, #44	; 0x2c
 80022de:	fb01 f303 	mul.w	r3, r1, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	3361      	adds	r3, #97	; 0x61
 80022e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d150      	bne.n	800238e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	335c      	adds	r3, #92	; 0x5c
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	202c      	movs	r0, #44	; 0x2c
 8002304:	fb00 f303 	mul.w	r3, r0, r3
 8002308:	440b      	add	r3, r1
 800230a:	335c      	adds	r3, #92	; 0x5c
 800230c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	335c      	adds	r3, #92	; 0x5c
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d912      	bls.n	8002348 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	335c      	adds	r3, #92	; 0x5c
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	3360      	adds	r3, #96	; 0x60
 8002342:	2204      	movs	r2, #4
 8002344:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002346:	e073      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	3360      	adds	r3, #96	; 0x60
 8002356:	2202      	movs	r2, #2
 8002358:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4413      	add	r3, r2
 8002362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002370:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002378:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	461a      	mov	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800238c:	e050      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	3361      	adds	r3, #97	; 0x61
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d122      	bne.n	80023e8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	3360      	adds	r3, #96	; 0x60
 80023b0:	2202      	movs	r2, #2
 80023b2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023ca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023d2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e023      	b.n	8002430 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3361      	adds	r3, #97	; 0x61
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b07      	cmp	r3, #7
 80023fa:	d119      	bne.n	8002430 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	335c      	adds	r3, #92	; 0x5c
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	202c      	movs	r0, #44	; 0x2c
 8002414:	fb00 f303 	mul.w	r3, r0, r3
 8002418:	440b      	add	r3, r1
 800241a:	335c      	adds	r3, #92	; 0x5c
 800241c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	3360      	adds	r3, #96	; 0x60
 800242c:	2204      	movs	r2, #4
 800242e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243c:	461a      	mov	r2, r3
 800243e:	2302      	movs	r3, #2
 8002440:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	b2d9      	uxtb	r1, r3
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	202c      	movs	r0, #44	; 0x2c
 800244c:	fb00 f303 	mul.w	r3, r0, r3
 8002450:	4413      	add	r3, r2
 8002452:	3360      	adds	r3, #96	; 0x60
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f005 fe71 	bl	8008140 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800245e:	e081      	b.n	8002564 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b10      	cmp	r3, #16
 8002474:	d176      	bne.n	8002564 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	333f      	adds	r3, #63	; 0x3f
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d121      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	335c      	adds	r3, #92	; 0x5c
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	0151      	lsls	r1, r2, #5
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	440a      	add	r2, r1
 80024b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024b6:	f043 0302 	orr.w	r3, r3, #2
 80024ba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 fc7d 	bl	8005dc6 <USB_HC_Halt>
 80024cc:	e041      	b.n	8002552 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	333f      	adds	r3, #63	; 0x3f
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	333f      	adds	r3, #63	; 0x3f
 80024f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d12d      	bne.n	8002552 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	335c      	adds	r3, #92	; 0x5c
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d120      	bne.n	8002552 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3361      	adds	r3, #97	; 0x61
 800251e:	2203      	movs	r2, #3
 8002520:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	0151      	lsls	r1, r2, #5
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	440a      	add	r2, r1
 8002538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f003 fc3a 	bl	8005dc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	461a      	mov	r2, r3
 8002560:	2310      	movs	r3, #16
 8002562:	6093      	str	r3, [r2, #8]
}
 8002564:	bf00      	nop
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b04      	cmp	r3, #4
 800259a:	d119      	bne.n	80025d0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	461a      	mov	r2, r3
 80025aa:	2304      	movs	r3, #4
 80025ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	0151      	lsls	r1, r2, #5
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	440a      	add	r2, r1
 80025c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80025ce:	e3c6      	b.n	8002d5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d13e      	bne.n	8002664 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	461a      	mov	r2, r3
 80025f4:	2320      	movs	r3, #32
 80025f6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	333d      	adds	r3, #61	; 0x3d
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	f040 83a8 	bne.w	8002d5e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	333d      	adds	r3, #61	; 0x3d
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	3360      	adds	r3, #96	; 0x60
 800262e:	2202      	movs	r2, #2
 8002630:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	0151      	lsls	r1, r2, #5
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	440a      	add	r2, r1
 8002648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fbb2 	bl	8005dc6 <USB_HC_Halt>
}
 8002662:	e37c      	b.n	8002d5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800267a:	d122      	bne.n	80026c2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	0151      	lsls	r1, r2, #5
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	440a      	add	r2, r1
 8002692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002696:	f043 0302 	orr.w	r3, r3, #2
 800269a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 fb8d 	bl	8005dc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	461a      	mov	r2, r3
 80026ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026be:	6093      	str	r3, [r2, #8]
}
 80026c0:	e34d      	b.n	8002d5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d150      	bne.n	800277a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	335c      	adds	r3, #92	; 0x5c
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	2b40      	cmp	r3, #64	; 0x40
 80026fe:	d111      	bne.n	8002724 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	333d      	adds	r3, #61	; 0x3d
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4413      	add	r3, r2
 800271a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271e:	461a      	mov	r2, r3
 8002720:	2340      	movs	r3, #64	; 0x40
 8002722:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	0151      	lsls	r1, r2, #5
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	440a      	add	r2, r1
 800273a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800273e:	f043 0302 	orr.w	r3, r3, #2
 8002742:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f003 fb39 	bl	8005dc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	461a      	mov	r2, r3
 8002762:	2301      	movs	r3, #1
 8002764:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	3361      	adds	r3, #97	; 0x61
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
}
 8002778:	e2f1      	b.n	8002d5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d13c      	bne.n	800280a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	3361      	adds	r3, #97	; 0x61
 800279e:	2204      	movs	r2, #4
 80027a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	333d      	adds	r3, #61	; 0x3d
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	335c      	adds	r3, #92	; 0x5c
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	0151      	lsls	r1, r2, #5
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	440a      	add	r2, r1
 80027dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 fae8 	bl	8005dc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	461a      	mov	r2, r3
 8002804:	2340      	movs	r3, #64	; 0x40
 8002806:	6093      	str	r3, [r2, #8]
}
 8002808:	e2a9      	b.n	8002d5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b08      	cmp	r3, #8
 800281e:	d12a      	bne.n	8002876 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282c:	461a      	mov	r2, r3
 800282e:	2308      	movs	r3, #8
 8002830:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	0151      	lsls	r1, r2, #5
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	440a      	add	r2, r1
 8002848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fab2 	bl	8005dc6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3361      	adds	r3, #97	; 0x61
 8002870:	2205      	movs	r2, #5
 8002872:	701a      	strb	r2, [r3, #0]
}
 8002874:	e273      	b.n	8002d5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b10      	cmp	r3, #16
 800288a:	d150      	bne.n	800292e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	335c      	adds	r3, #92	; 0x5c
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3361      	adds	r3, #97	; 0x61
 80028ac:	2203      	movs	r2, #3
 80028ae:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	333d      	adds	r3, #61	; 0x3d
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d112      	bne.n	80028ea <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	333c      	adds	r3, #60	; 0x3c
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d108      	bne.n	80028ea <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	333d      	adds	r3, #61	; 0x3d
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	0151      	lsls	r1, r2, #5
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	440a      	add	r2, r1
 8002900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002904:	f043 0302 	orr.w	r3, r3, #2
 8002908:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f003 fa56 	bl	8005dc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	461a      	mov	r2, r3
 8002928:	2310      	movs	r3, #16
 800292a:	6093      	str	r3, [r2, #8]
}
 800292c:	e217      	b.n	8002d5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002940:	2b80      	cmp	r3, #128	; 0x80
 8002942:	d174      	bne.n	8002a2e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d121      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3361      	adds	r3, #97	; 0x61
 800295a:	2206      	movs	r2, #6
 800295c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	4413      	add	r3, r2
 8002966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	0151      	lsls	r1, r2, #5
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	440a      	add	r2, r1
 8002974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f003 fa1c 	bl	8005dc6 <USB_HC_Halt>
 800298e:	e044      	b.n	8002a1a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	335c      	adds	r3, #92	; 0x5c
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	202c      	movs	r0, #44	; 0x2c
 80029a8:	fb00 f303 	mul.w	r3, r0, r3
 80029ac:	440b      	add	r3, r1
 80029ae:	335c      	adds	r3, #92	; 0x5c
 80029b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	335c      	adds	r3, #92	; 0x5c
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d920      	bls.n	8002a08 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	212c      	movs	r1, #44	; 0x2c
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	335c      	adds	r3, #92	; 0x5c
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3360      	adds	r3, #96	; 0x60
 80029e6:	2204      	movs	r2, #4
 80029e8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	b2d9      	uxtb	r1, r3
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	202c      	movs	r0, #44	; 0x2c
 80029f4:	fb00 f303 	mul.w	r3, r0, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	3360      	adds	r3, #96	; 0x60
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f005 fb9d 	bl	8008140 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a06:	e008      	b.n	8002a1a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3360      	adds	r3, #96	; 0x60
 8002a16:	2202      	movs	r2, #2
 8002a18:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	461a      	mov	r2, r3
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	6093      	str	r3, [r2, #8]
}
 8002a2c:	e197      	b.n	8002d5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a44:	d134      	bne.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	0151      	lsls	r1, r2, #5
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	440a      	add	r2, r1
 8002a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 f9a8 	bl	8005dc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a82:	461a      	mov	r2, r3
 8002a84:	2310      	movs	r3, #16
 8002a86:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	461a      	mov	r2, r3
 8002a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3361      	adds	r3, #97	; 0x61
 8002aaa:	2208      	movs	r2, #8
 8002aac:	701a      	strb	r2, [r3, #0]
}
 8002aae:	e156      	b.n	8002d5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	f040 814b 	bne.w	8002d5e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	0151      	lsls	r1, r2, #5
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	440a      	add	r2, r1
 8002ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae2:	f023 0302 	bic.w	r3, r3, #2
 8002ae6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	3361      	adds	r3, #97	; 0x61
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d179      	bne.n	8002bf0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3360      	adds	r3, #96	; 0x60
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	333f      	adds	r3, #63	; 0x3f
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d00a      	beq.n	8002b38 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	333f      	adds	r3, #63	; 0x3f
 8002b30:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	f040 80fc 	bne.w	8002d30 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d142      	bne.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	334c      	adds	r3, #76	; 0x4c
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80ed 	beq.w	8002d30 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	334c      	adds	r3, #76	; 0x4c
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	202c      	movs	r0, #44	; 0x2c
 8002b6c:	fb00 f202 	mul.w	r2, r0, r2
 8002b70:	440a      	add	r2, r1
 8002b72:	3240      	adds	r2, #64	; 0x40
 8002b74:	8812      	ldrh	r2, [r2, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	202c      	movs	r0, #44	; 0x2c
 8002b80:	fb00 f202 	mul.w	r2, r0, r2
 8002b84:	440a      	add	r2, r1
 8002b86:	3240      	adds	r2, #64	; 0x40
 8002b88:	8812      	ldrh	r2, [r2, #0]
 8002b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80ca 	beq.w	8002d30 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3355      	adds	r3, #85	; 0x55
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	f083 0301 	eor.w	r3, r3, #1
 8002bb0:	b2d8      	uxtb	r0, r3
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3355      	adds	r3, #85	; 0x55
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	701a      	strb	r2, [r3, #0]
 8002bc4:	e0b4      	b.n	8002d30 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3355      	adds	r3, #85	; 0x55
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	f083 0301 	eor.w	r3, r3, #1
 8002bda:	b2d8      	uxtb	r0, r3
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3355      	adds	r3, #85	; 0x55
 8002bea:	4602      	mov	r2, r0
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e09f      	b.n	8002d30 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3361      	adds	r3, #97	; 0x61
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d109      	bne.n	8002c18 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3360      	adds	r3, #96	; 0x60
 8002c12:	2202      	movs	r2, #2
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e08b      	b.n	8002d30 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3361      	adds	r3, #97	; 0x61
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d109      	bne.n	8002c40 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3360      	adds	r3, #96	; 0x60
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e077      	b.n	8002d30 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3361      	adds	r3, #97	; 0x61
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d109      	bne.n	8002c68 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3360      	adds	r3, #96	; 0x60
 8002c62:	2205      	movs	r2, #5
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	e063      	b.n	8002d30 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3361      	adds	r3, #97	; 0x61
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b06      	cmp	r3, #6
 8002c7a:	d009      	beq.n	8002c90 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	212c      	movs	r1, #44	; 0x2c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3361      	adds	r3, #97	; 0x61
 8002c8a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d14f      	bne.n	8002d30 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	212c      	movs	r1, #44	; 0x2c
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	335c      	adds	r3, #92	; 0x5c
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	202c      	movs	r0, #44	; 0x2c
 8002ca8:	fb00 f303 	mul.w	r3, r0, r3
 8002cac:	440b      	add	r3, r1
 8002cae:	335c      	adds	r3, #92	; 0x5c
 8002cb0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	335c      	adds	r3, #92	; 0x5c
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d912      	bls.n	8002cec <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	335c      	adds	r3, #92	; 0x5c
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3360      	adds	r3, #96	; 0x60
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e021      	b.n	8002d30 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3360      	adds	r3, #96	; 0x60
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d14:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d1c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2302      	movs	r3, #2
 8002d40:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	b2d9      	uxtb	r1, r3
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	202c      	movs	r0, #44	; 0x2c
 8002d4c:	fb00 f303 	mul.w	r3, r0, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	3360      	adds	r3, #96	; 0x60
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f005 f9f1 	bl	8008140 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d5e:	bf00      	nop
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b08a      	sub	sp, #40	; 0x28
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	0c5b      	lsrs	r3, r3, #17
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d9a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d004      	beq.n	8002dac <HCD_RXQLVL_IRQHandler+0x46>
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	f000 80a9 	beq.w	8002efc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002daa:	e0aa      	b.n	8002f02 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 80a6 	beq.w	8002f00 <HCD_RXQLVL_IRQHandler+0x19a>
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3344      	adds	r3, #68	; 0x44
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 809b 	beq.w	8002f00 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3350      	adds	r3, #80	; 0x50
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	441a      	add	r2, r3
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	202c      	movs	r0, #44	; 0x2c
 8002de4:	fb00 f303 	mul.w	r3, r0, r3
 8002de8:	440b      	add	r3, r1
 8002dea:	334c      	adds	r3, #76	; 0x4c
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d87a      	bhi.n	8002ee8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	3344      	adds	r3, #68	; 0x44
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	b292      	uxth	r2, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f002 fb79 	bl	8005502 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3344      	adds	r3, #68	; 0x44
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	441a      	add	r2, r3
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	202c      	movs	r0, #44	; 0x2c
 8002e2a:	fb00 f303 	mul.w	r3, r0, r3
 8002e2e:	440b      	add	r3, r1
 8002e30:	3344      	adds	r3, #68	; 0x44
 8002e32:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3350      	adds	r3, #80	; 0x50
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	441a      	add	r2, r3
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	202c      	movs	r0, #44	; 0x2c
 8002e4e:	fb00 f303 	mul.w	r3, r0, r3
 8002e52:	440b      	add	r3, r1
 8002e54:	3350      	adds	r3, #80	; 0x50
 8002e56:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	0cdb      	lsrs	r3, r3, #19
 8002e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e6c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	3340      	adds	r3, #64	; 0x40
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d13c      	bne.n	8002f00 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d039      	beq.n	8002f00 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ea2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eaa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3354      	adds	r3, #84	; 0x54
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	f083 0301 	eor.w	r3, r3, #1
 8002ed2:	b2d8      	uxtb	r0, r3
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3354      	adds	r3, #84	; 0x54
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	701a      	strb	r2, [r3, #0]
      break;
 8002ee6:	e00b      	b.n	8002f00 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3360      	adds	r3, #96	; 0x60
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	701a      	strb	r2, [r3, #0]
      break;
 8002efa:	e001      	b.n	8002f00 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002efc:	bf00      	nop
 8002efe:	e000      	b.n	8002f02 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f00:	bf00      	nop
  }
}
 8002f02:	bf00      	nop
 8002f04:	3728      	adds	r7, #40	; 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b086      	sub	sp, #24
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f36:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d10b      	bne.n	8002f5a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d102      	bne.n	8002f52 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f005 f8db 	bl	8008108 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f043 0302 	orr.w	r3, r3, #2
 8002f58:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d132      	bne.n	8002fca <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f043 0308 	orr.w	r3, r3, #8
 8002f6a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d126      	bne.n	8002fc4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d113      	bne.n	8002fa6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f88:	d106      	bne.n	8002f98 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f002 fbf1 	bl	8005778 <USB_InitFSLSPClkSel>
 8002f96:	e011      	b.n	8002fbc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 fbea 	bl	8005778 <USB_InitFSLSPClkSel>
 8002fa4:	e00a      	b.n	8002fbc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d106      	bne.n	8002fbc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fba:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f005 f8cd 	bl	800815c <HAL_HCD_PortEnabled_Callback>
 8002fc2:	e002      	b.n	8002fca <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f005 f8d7 	bl	8008178 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d103      	bne.n	8002fdc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f043 0320 	orr.w	r3, r3, #32
 8002fda:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	6013      	str	r3, [r2, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e12b      	b.n	800325a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fd2e 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2224      	movs	r2, #36	; 0x24
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003054:	f001 f9fc 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 8003058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4a81      	ldr	r2, [pc, #516]	; (8003264 <HAL_I2C_Init+0x274>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d807      	bhi.n	8003074 <HAL_I2C_Init+0x84>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a80      	ldr	r2, [pc, #512]	; (8003268 <HAL_I2C_Init+0x278>)
 8003068:	4293      	cmp	r3, r2
 800306a:	bf94      	ite	ls
 800306c:	2301      	movls	r3, #1
 800306e:	2300      	movhi	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e006      	b.n	8003082 <HAL_I2C_Init+0x92>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a7d      	ldr	r2, [pc, #500]	; (800326c <HAL_I2C_Init+0x27c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	bf94      	ite	ls
 800307c:	2301      	movls	r3, #1
 800307e:	2300      	movhi	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0e7      	b.n	800325a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4a78      	ldr	r2, [pc, #480]	; (8003270 <HAL_I2C_Init+0x280>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	0c9b      	lsrs	r3, r3, #18
 8003094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a6a      	ldr	r2, [pc, #424]	; (8003264 <HAL_I2C_Init+0x274>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d802      	bhi.n	80030c4 <HAL_I2C_Init+0xd4>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	3301      	adds	r3, #1
 80030c2:	e009      	b.n	80030d8 <HAL_I2C_Init+0xe8>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	4a69      	ldr	r2, [pc, #420]	; (8003274 <HAL_I2C_Init+0x284>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	3301      	adds	r3, #1
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	430b      	orrs	r3, r1
 80030de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	495c      	ldr	r1, [pc, #368]	; (8003264 <HAL_I2C_Init+0x274>)
 80030f4:	428b      	cmp	r3, r1
 80030f6:	d819      	bhi.n	800312c <HAL_I2C_Init+0x13c>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e59      	subs	r1, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fbb1 f3f3 	udiv	r3, r1, r3
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	f640 73fc 	movw	r3, #4092	; 0xffc
 800310c:	400b      	ands	r3, r1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_I2C_Init+0x138>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1e59      	subs	r1, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003120:	3301      	adds	r3, #1
 8003122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003126:	e051      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 8003128:	2304      	movs	r3, #4
 800312a:	e04f      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d111      	bne.n	8003158 <HAL_I2C_Init+0x168>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e58      	subs	r0, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	440b      	add	r3, r1
 8003142:	fbb0 f3f3 	udiv	r3, r0, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e012      	b.n	800317e <HAL_I2C_Init+0x18e>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e58      	subs	r0, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	0099      	lsls	r1, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	fbb0 f3f3 	udiv	r3, r0, r3
 800316e:	3301      	adds	r3, #1
 8003170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Init+0x196>
 8003182:	2301      	movs	r3, #1
 8003184:	e022      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10e      	bne.n	80031ac <HAL_I2C_Init+0x1bc>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1e58      	subs	r0, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	440b      	add	r3, r1
 800319c:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a0:	3301      	adds	r3, #1
 80031a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031aa:	e00f      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e58      	subs	r0, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	0099      	lsls	r1, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	6809      	ldr	r1, [r1, #0]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6911      	ldr	r1, [r2, #16]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68d2      	ldr	r2, [r2, #12]
 8003206:	4311      	orrs	r1, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	430b      	orrs	r3, r1
 800320e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	000186a0 	.word	0x000186a0
 8003268:	001e847f 	.word	0x001e847f
 800326c:	003d08ff 	.word	0x003d08ff
 8003270:	431bde83 	.word	0x431bde83
 8003274:	10624dd3 	.word	0x10624dd3

08003278 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e128      	b.n	80034dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a90      	ldr	r2, [pc, #576]	; (80034e4 <HAL_I2S_Init+0x26c>)
 80032a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7fd fc2f 	bl	8000b08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2202      	movs	r2, #2
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032c0:	f023 030f 	bic.w	r3, r3, #15
 80032c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2202      	movs	r2, #2
 80032cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d060      	beq.n	8003398 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032de:	2310      	movs	r3, #16
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	e001      	b.n	80032e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d802      	bhi.n	80032f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032f6:	2001      	movs	r0, #1
 80032f8:	f001 f9a0 	bl	800463c <HAL_RCCEx_GetPeriphCLKFreq>
 80032fc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003306:	d125      	bne.n	8003354 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d010      	beq.n	8003332 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	fbb2 f2f3 	udiv	r2, r2, r3
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	461a      	mov	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	3305      	adds	r3, #5
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	e01f      	b.n	8003372 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	fbb2 f2f3 	udiv	r2, r2, r3
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	461a      	mov	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	3305      	adds	r3, #5
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	e00e      	b.n	8003372 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fbb2 f2f3 	udiv	r2, r2, r3
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	461a      	mov	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	3305      	adds	r3, #5
 8003370:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4a5c      	ldr	r2, [pc, #368]	; (80034e8 <HAL_I2S_Init+0x270>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	08db      	lsrs	r3, r3, #3
 800337c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	61bb      	str	r3, [r7, #24]
 8003396:	e003      	b.n	80033a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003398:	2302      	movs	r3, #2
 800339a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d902      	bls.n	80033ac <HAL_I2S_Init+0x134>
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	2bff      	cmp	r3, #255	; 0xff
 80033aa:	d907      	bls.n	80033bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b0:	f043 0210 	orr.w	r2, r3, #16
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e08f      	b.n	80034dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	ea42 0103 	orr.w	r1, r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033da:	f023 030f 	bic.w	r3, r3, #15
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6851      	ldr	r1, [r2, #4]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6892      	ldr	r2, [r2, #8]
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	68d2      	ldr	r2, [r2, #12]
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6992      	ldr	r2, [r2, #24]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d161      	bne.n	80034cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a38      	ldr	r2, [pc, #224]	; (80034ec <HAL_I2S_Init+0x274>)
 800340c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a37      	ldr	r2, [pc, #220]	; (80034f0 <HAL_I2S_Init+0x278>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d101      	bne.n	800341c <HAL_I2S_Init+0x1a4>
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_I2S_Init+0x27c>)
 800341a:	e001      	b.n	8003420 <HAL_I2S_Init+0x1a8>
 800341c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	4932      	ldr	r1, [pc, #200]	; (80034f0 <HAL_I2S_Init+0x278>)
 8003428:	428a      	cmp	r2, r1
 800342a:	d101      	bne.n	8003430 <HAL_I2S_Init+0x1b8>
 800342c:	4a31      	ldr	r2, [pc, #196]	; (80034f4 <HAL_I2S_Init+0x27c>)
 800342e:	e001      	b.n	8003434 <HAL_I2S_Init+0x1bc>
 8003430:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003434:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003438:	f023 030f 	bic.w	r3, r3, #15
 800343c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2b      	ldr	r2, [pc, #172]	; (80034f0 <HAL_I2S_Init+0x278>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d101      	bne.n	800344c <HAL_I2S_Init+0x1d4>
 8003448:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_I2S_Init+0x27c>)
 800344a:	e001      	b.n	8003450 <HAL_I2S_Init+0x1d8>
 800344c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003450:	2202      	movs	r2, #2
 8003452:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a25      	ldr	r2, [pc, #148]	; (80034f0 <HAL_I2S_Init+0x278>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_I2S_Init+0x1ea>
 800345e:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <HAL_I2S_Init+0x27c>)
 8003460:	e001      	b.n	8003466 <HAL_I2S_Init+0x1ee>
 8003462:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003472:	d003      	beq.n	800347c <HAL_I2S_Init+0x204>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d103      	bne.n	8003484 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800347c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	e001      	b.n	8003488 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003492:	4313      	orrs	r3, r2
 8003494:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800349c:	4313      	orrs	r3, r2
 800349e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034a6:	4313      	orrs	r3, r2
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	897b      	ldrh	r3, [r7, #10]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a0d      	ldr	r2, [pc, #52]	; (80034f0 <HAL_I2S_Init+0x278>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <HAL_I2S_Init+0x24c>
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_I2S_Init+0x27c>)
 80034c2:	e001      	b.n	80034c8 <HAL_I2S_Init+0x250>
 80034c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034c8:	897a      	ldrh	r2, [r7, #10]
 80034ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3720      	adds	r7, #32
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	080035ef 	.word	0x080035ef
 80034e8:	cccccccd 	.word	0xcccccccd
 80034ec:	08003705 	.word	0x08003705
 80034f0:	40003800 	.word	0x40003800
 80034f4:	40003400 	.word	0x40003400

080034f8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	1c9a      	adds	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10e      	bne.n	8003588 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003578:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff ffb8 	bl	80034f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	b292      	uxth	r2, r2
 80035a4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	1c9a      	adds	r2, r3, #2
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10e      	bne.n	80035e6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ff93 	bl	800350c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b04      	cmp	r3, #4
 8003608:	d13a      	bne.n	8003680 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d109      	bne.n	8003628 <I2S_IRQHandler+0x3a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d102      	bne.n	8003628 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff ffb4 	bl	8003590 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d126      	bne.n	8003680 <I2S_IRQHandler+0x92>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b20      	cmp	r3, #32
 800363e:	d11f      	bne.n	8003680 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800364e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f043 0202 	orr.w	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff ff50 	bl	8003520 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b03      	cmp	r3, #3
 800368a:	d136      	bne.n	80036fa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b02      	cmp	r3, #2
 8003694:	d109      	bne.n	80036aa <I2S_IRQHandler+0xbc>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a0:	2b80      	cmp	r3, #128	; 0x80
 80036a2:	d102      	bne.n	80036aa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff ff45 	bl	8003534 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d122      	bne.n	80036fa <I2S_IRQHandler+0x10c>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d11b      	bne.n	80036fa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	f043 0204 	orr.w	r2, r3, #4
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff13 	bl	8003520 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036fa:	bf00      	nop
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4aa2      	ldr	r2, [pc, #648]	; (80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800371e:	4ba2      	ldr	r3, [pc, #648]	; (80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003720:	e001      	b.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003722:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a9b      	ldr	r2, [pc, #620]	; (80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d101      	bne.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800373c:	4b9a      	ldr	r3, [pc, #616]	; (80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800373e:	e001      	b.n	8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003740:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003750:	d004      	beq.n	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f040 8099 	bne.w	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b02      	cmp	r3, #2
 8003764:	d107      	bne.n	8003776 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f925 	bl	80039c0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	d107      	bne.n	8003790 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f9c8 	bl	8003b20 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	2b40      	cmp	r3, #64	; 0x40
 8003798:	d13a      	bne.n	8003810 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d035      	beq.n	8003810 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a7e      	ldr	r2, [pc, #504]	; (80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037ae:	4b7e      	ldr	r3, [pc, #504]	; (80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037b0:	e001      	b.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4979      	ldr	r1, [pc, #484]	; (80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037be:	428b      	cmp	r3, r1
 80037c0:	d101      	bne.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037c2:	4b79      	ldr	r3, [pc, #484]	; (80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037c4:	e001      	b.n	80037ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f043 0202 	orr.w	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fe88 	bl	8003520 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b08      	cmp	r3, #8
 8003818:	f040 80be 	bne.w	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80b8 	beq.w	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003836:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a59      	ldr	r2, [pc, #356]	; (80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003842:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003844:	e001      	b.n	800384a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003846:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4954      	ldr	r1, [pc, #336]	; (80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003852:	428b      	cmp	r3, r1
 8003854:	d101      	bne.n	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003856:	4b54      	ldr	r3, [pc, #336]	; (80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003858:	e001      	b.n	800385e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800385a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003862:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003864:	2300      	movs	r3, #0
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	f043 0204 	orr.w	r2, r3, #4
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff fe4a 	bl	8003520 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800388c:	e084      	b.n	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b02      	cmp	r3, #2
 8003896:	d107      	bne.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f8be 	bl	8003a24 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d107      	bne.n	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f8fd 	bl	8003abc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d12f      	bne.n	800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d02a      	beq.n	800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038e4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a2e      	ldr	r2, [pc, #184]	; (80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d101      	bne.n	80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038f0:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038f2:	e001      	b.n	80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80038f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4929      	ldr	r1, [pc, #164]	; (80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003900:	428b      	cmp	r3, r1
 8003902:	d101      	bne.n	8003908 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003904:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003906:	e001      	b.n	800390c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003908:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800390c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003910:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	f043 0202 	orr.w	r2, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff fdfa 	bl	8003520 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b08      	cmp	r3, #8
 8003934:	d131      	bne.n	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d02c      	beq.n	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800394a:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800394c:	e001      	b.n	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800394e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4912      	ldr	r1, [pc, #72]	; (80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800395a:	428b      	cmp	r3, r1
 800395c:	d101      	bne.n	8003962 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003960:	e001      	b.n	8003966 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003966:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800396a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800397a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003988:	f043 0204 	orr.w	r2, r3, #4
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff fdc5 	bl	8003520 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003996:	e000      	b.n	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003998:	bf00      	nop
}
 800399a:	bf00      	nop
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40003800 	.word	0x40003800
 80039a8:	40003400 	.word	0x40003400

080039ac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	1c99      	adds	r1, r3, #2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6251      	str	r1, [r2, #36]	; 0x24
 80039d2:	881a      	ldrh	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d113      	bne.n	8003a1a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ffc9 	bl	80039ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	1c99      	adds	r1, r3, #2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6251      	str	r1, [r2, #36]	; 0x24
 8003a36:	8819      	ldrh	r1, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <I2SEx_TxISR_I2SExt+0x90>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d101      	bne.n	8003a46 <I2SEx_TxISR_I2SExt+0x22>
 8003a42:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <I2SEx_TxISR_I2SExt+0x94>)
 8003a44:	e001      	b.n	8003a4a <I2SEx_TxISR_I2SExt+0x26>
 8003a46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a4a:	460a      	mov	r2, r1
 8003a4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d121      	bne.n	8003aaa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <I2SEx_TxISR_I2SExt+0x90>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d101      	bne.n	8003a74 <I2SEx_TxISR_I2SExt+0x50>
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <I2SEx_TxISR_I2SExt+0x94>)
 8003a72:	e001      	b.n	8003a78 <I2SEx_TxISR_I2SExt+0x54>
 8003a74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	490d      	ldr	r1, [pc, #52]	; (8003ab4 <I2SEx_TxISR_I2SExt+0x90>)
 8003a80:	428b      	cmp	r3, r1
 8003a82:	d101      	bne.n	8003a88 <I2SEx_TxISR_I2SExt+0x64>
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <I2SEx_TxISR_I2SExt+0x94>)
 8003a86:	e001      	b.n	8003a8c <I2SEx_TxISR_I2SExt+0x68>
 8003a88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff ff81 	bl	80039ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40003800 	.word	0x40003800
 8003ab8:	40003400 	.word	0x40003400

08003abc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68d8      	ldr	r0, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	1c99      	adds	r1, r3, #2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ad4:	b282      	uxth	r2, r0
 8003ad6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d113      	bne.n	8003b18 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003afe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff ff4a 	bl	80039ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <I2SEx_RxISR_I2SExt+0x90>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <I2SEx_RxISR_I2SExt+0x16>
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <I2SEx_RxISR_I2SExt+0x94>)
 8003b34:	e001      	b.n	8003b3a <I2SEx_RxISR_I2SExt+0x1a>
 8003b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b3a:	68d8      	ldr	r0, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	1c99      	adds	r1, r3, #2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b46:	b282      	uxth	r2, r0
 8003b48:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d121      	bne.n	8003ba6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <I2SEx_RxISR_I2SExt+0x90>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <I2SEx_RxISR_I2SExt+0x50>
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <I2SEx_RxISR_I2SExt+0x94>)
 8003b6e:	e001      	b.n	8003b74 <I2SEx_RxISR_I2SExt+0x54>
 8003b70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	490d      	ldr	r1, [pc, #52]	; (8003bb0 <I2SEx_RxISR_I2SExt+0x90>)
 8003b7c:	428b      	cmp	r3, r1
 8003b7e:	d101      	bne.n	8003b84 <I2SEx_RxISR_I2SExt+0x64>
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <I2SEx_RxISR_I2SExt+0x94>)
 8003b82:	e001      	b.n	8003b88 <I2SEx_RxISR_I2SExt+0x68>
 8003b84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b8c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff ff03 	bl	80039ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40003800 	.word	0x40003800
 8003bb4:	40003400 	.word	0x40003400

08003bb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e264      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d075      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bd6:	4ba3      	ldr	r3, [pc, #652]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d00c      	beq.n	8003bfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be2:	4ba0      	ldr	r3, [pc, #640]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d112      	bne.n	8003c14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bee:	4b9d      	ldr	r3, [pc, #628]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bfa:	d10b      	bne.n	8003c14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	4b99      	ldr	r3, [pc, #612]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d05b      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x108>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d157      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e23f      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1c:	d106      	bne.n	8003c2c <HAL_RCC_OscConfig+0x74>
 8003c1e:	4b91      	ldr	r3, [pc, #580]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a90      	ldr	r2, [pc, #576]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e01d      	b.n	8003c68 <HAL_RCC_OscConfig+0xb0>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x98>
 8003c36:	4b8b      	ldr	r3, [pc, #556]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a8a      	ldr	r2, [pc, #552]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b88      	ldr	r3, [pc, #544]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a87      	ldr	r2, [pc, #540]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e00b      	b.n	8003c68 <HAL_RCC_OscConfig+0xb0>
 8003c50:	4b84      	ldr	r3, [pc, #528]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a83      	ldr	r2, [pc, #524]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	4b81      	ldr	r3, [pc, #516]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a80      	ldr	r2, [pc, #512]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d013      	beq.n	8003c98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fd f962 	bl	8000f38 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fd f95e 	bl	8000f38 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e204      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	4b76      	ldr	r3, [pc, #472]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0xc0>
 8003c96:	e014      	b.n	8003cc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fd f94e 	bl	8000f38 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca0:	f7fd f94a 	bl	8000f38 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	; 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e1f0      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb2:	4b6c      	ldr	r3, [pc, #432]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xe8>
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d063      	beq.n	8003d96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cce:	4b65      	ldr	r3, [pc, #404]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cda:	4b62      	ldr	r3, [pc, #392]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d11c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce6:	4b5f      	ldr	r3, [pc, #380]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d116      	bne.n	8003d20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf2:	4b5c      	ldr	r3, [pc, #368]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <HAL_RCC_OscConfig+0x152>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d001      	beq.n	8003d0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e1c4      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0a:	4b56      	ldr	r3, [pc, #344]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4952      	ldr	r1, [pc, #328]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1e:	e03a      	b.n	8003d96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d020      	beq.n	8003d6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d28:	4b4f      	ldr	r3, [pc, #316]	; (8003e68 <HAL_RCC_OscConfig+0x2b0>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fd f903 	bl	8000f38 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d36:	f7fd f8ff 	bl	8000f38 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e1a5      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d48:	4b46      	ldr	r3, [pc, #280]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d54:	4b43      	ldr	r3, [pc, #268]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4940      	ldr	r1, [pc, #256]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	600b      	str	r3, [r1, #0]
 8003d68:	e015      	b.n	8003d96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d6a:	4b3f      	ldr	r3, [pc, #252]	; (8003e68 <HAL_RCC_OscConfig+0x2b0>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd f8e2 	bl	8000f38 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fd f8de 	bl	8000f38 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e184      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8a:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d030      	beq.n	8003e04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003daa:	4b30      	ldr	r3, [pc, #192]	; (8003e6c <HAL_RCC_OscConfig+0x2b4>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fd f8c2 	bl	8000f38 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db8:	f7fd f8be 	bl	8000f38 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e164      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dca:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x200>
 8003dd6:	e015      	b.n	8003e04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd8:	4b24      	ldr	r3, [pc, #144]	; (8003e6c <HAL_RCC_OscConfig+0x2b4>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dde:	f7fd f8ab 	bl	8000f38 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de6:	f7fd f8a7 	bl	8000f38 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e14d      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df8:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80a0 	beq.w	8003f52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e12:	2300      	movs	r3, #0
 8003e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e16:	4b13      	ldr	r3, [pc, #76]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10f      	bne.n	8003e42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	4a0e      	ldr	r2, [pc, #56]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e30:	6413      	str	r3, [r2, #64]	; 0x40
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCC_OscConfig+0x2b8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d121      	bne.n	8003e92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e4e:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <HAL_RCC_OscConfig+0x2b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a07      	ldr	r2, [pc, #28]	; (8003e70 <HAL_RCC_OscConfig+0x2b8>)
 8003e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5a:	f7fd f86d 	bl	8000f38 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e60:	e011      	b.n	8003e86 <HAL_RCC_OscConfig+0x2ce>
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800
 8003e68:	42470000 	.word	0x42470000
 8003e6c:	42470e80 	.word	0x42470e80
 8003e70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e74:	f7fd f860 	bl	8000f38 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e106      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e86:	4b85      	ldr	r3, [pc, #532]	; (800409c <HAL_RCC_OscConfig+0x4e4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d106      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x2f0>
 8003e9a:	4b81      	ldr	r3, [pc, #516]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	4a80      	ldr	r2, [pc, #512]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea6:	e01c      	b.n	8003ee2 <HAL_RCC_OscConfig+0x32a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b05      	cmp	r3, #5
 8003eae:	d10c      	bne.n	8003eca <HAL_RCC_OscConfig+0x312>
 8003eb0:	4b7b      	ldr	r3, [pc, #492]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	4a7a      	ldr	r2, [pc, #488]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003eb6:	f043 0304 	orr.w	r3, r3, #4
 8003eba:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebc:	4b78      	ldr	r3, [pc, #480]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	4a77      	ldr	r2, [pc, #476]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec8:	e00b      	b.n	8003ee2 <HAL_RCC_OscConfig+0x32a>
 8003eca:	4b75      	ldr	r3, [pc, #468]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	4a74      	ldr	r2, [pc, #464]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed6:	4b72      	ldr	r3, [pc, #456]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a71      	ldr	r2, [pc, #452]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003edc:	f023 0304 	bic.w	r3, r3, #4
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d015      	beq.n	8003f16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eea:	f7fd f825 	bl	8000f38 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fd f821 	bl	8000f38 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e0c5      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f08:	4b65      	ldr	r3, [pc, #404]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ee      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x33a>
 8003f14:	e014      	b.n	8003f40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f16:	f7fd f80f 	bl	8000f38 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fd f80b 	bl	8000f38 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e0af      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f34:	4b5a      	ldr	r3, [pc, #360]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1ee      	bne.n	8003f1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d105      	bne.n	8003f52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f46:	4b56      	ldr	r3, [pc, #344]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	4a55      	ldr	r2, [pc, #340]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 809b 	beq.w	8004092 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f5c:	4b50      	ldr	r3, [pc, #320]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d05c      	beq.n	8004022 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d141      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f70:	4b4c      	ldr	r3, [pc, #304]	; (80040a4 <HAL_RCC_OscConfig+0x4ec>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f76:	f7fc ffdf 	bl	8000f38 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7e:	f7fc ffdb 	bl	8000f38 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e081      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f90:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f0      	bne.n	8003f7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	019b      	lsls	r3, r3, #6
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	061b      	lsls	r3, r3, #24
 8003fc0:	4937      	ldr	r1, [pc, #220]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc6:	4b37      	ldr	r3, [pc, #220]	; (80040a4 <HAL_RCC_OscConfig+0x4ec>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fc ffb4 	bl	8000f38 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fc ffb0 	bl	8000f38 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e056      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe6:	4b2e      	ldr	r3, [pc, #184]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x41c>
 8003ff2:	e04e      	b.n	8004092 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff4:	4b2b      	ldr	r3, [pc, #172]	; (80040a4 <HAL_RCC_OscConfig+0x4ec>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7fc ff9d 	bl	8000f38 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004002:	f7fc ff99 	bl	8000f38 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e03f      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004014:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f0      	bne.n	8004002 <HAL_RCC_OscConfig+0x44a>
 8004020:	e037      	b.n	8004092 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e032      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800402e:	4b1c      	ldr	r3, [pc, #112]	; (80040a0 <HAL_RCC_OscConfig+0x4e8>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d028      	beq.n	800408e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d121      	bne.n	800408e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d11a      	bne.n	800408e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800405e:	4013      	ands	r3, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004064:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004066:	4293      	cmp	r3, r2
 8004068:	d111      	bne.n	800408e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	3b01      	subs	r3, #1
 8004078:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d107      	bne.n	800408e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d001      	beq.n	8004092 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40007000 	.word	0x40007000
 80040a0:	40023800 	.word	0x40023800
 80040a4:	42470060 	.word	0x42470060

080040a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0cc      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040bc:	4b68      	ldr	r3, [pc, #416]	; (8004260 <HAL_RCC_ClockConfig+0x1b8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d90c      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b65      	ldr	r3, [pc, #404]	; (8004260 <HAL_RCC_ClockConfig+0x1b8>)
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b63      	ldr	r3, [pc, #396]	; (8004260 <HAL_RCC_ClockConfig+0x1b8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0b8      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040fc:	4b59      	ldr	r3, [pc, #356]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a58      	ldr	r2, [pc, #352]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004106:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a52      	ldr	r2, [pc, #328]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800411e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004120:	4b50      	ldr	r3, [pc, #320]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	494d      	ldr	r1, [pc, #308]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d044      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	4b47      	ldr	r3, [pc, #284]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d119      	bne.n	8004186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e07f      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d003      	beq.n	8004166 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004162:	2b03      	cmp	r3, #3
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004166:	4b3f      	ldr	r3, [pc, #252]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e06f      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004176:	4b3b      	ldr	r3, [pc, #236]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e067      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004186:	4b37      	ldr	r3, [pc, #220]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f023 0203 	bic.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4934      	ldr	r1, [pc, #208]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	4313      	orrs	r3, r2
 8004196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004198:	f7fc fece 	bl	8000f38 <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a0:	f7fc feca 	bl	8000f38 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e04f      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	4b2b      	ldr	r3, [pc, #172]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 020c 	and.w	r2, r3, #12
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d1eb      	bne.n	80041a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041c8:	4b25      	ldr	r3, [pc, #148]	; (8004260 <HAL_RCC_ClockConfig+0x1b8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d20c      	bcs.n	80041f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <HAL_RCC_ClockConfig+0x1b8>)
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b20      	ldr	r3, [pc, #128]	; (8004260 <HAL_RCC_ClockConfig+0x1b8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e032      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4916      	ldr	r1, [pc, #88]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	490e      	ldr	r1, [pc, #56]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800422e:	f000 f821 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8004232:	4602      	mov	r2, r0
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	490a      	ldr	r1, [pc, #40]	; (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 8004240:	5ccb      	ldrb	r3, [r1, r3]
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	4a09      	ldr	r2, [pc, #36]	; (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x1c8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc fe2e 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40023c00 	.word	0x40023c00
 8004264:	40023800 	.word	0x40023800
 8004268:	080087ac 	.word	0x080087ac
 800426c:	20000000 	.word	0x20000000
 8004270:	20000004 	.word	0x20000004

08004274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004274:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	2300      	movs	r3, #0
 8004286:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800428c:	4b67      	ldr	r3, [pc, #412]	; (800442c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b08      	cmp	r3, #8
 8004296:	d00d      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004298:	2b08      	cmp	r3, #8
 800429a:	f200 80bd 	bhi.w	8004418 <HAL_RCC_GetSysClockFreq+0x1a4>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0x34>
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d003      	beq.n	80042ae <HAL_RCC_GetSysClockFreq+0x3a>
 80042a6:	e0b7      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a8:	4b61      	ldr	r3, [pc, #388]	; (8004430 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042aa:	60bb      	str	r3, [r7, #8]
       break;
 80042ac:	e0b7      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ae:	4b61      	ldr	r3, [pc, #388]	; (8004434 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042b0:	60bb      	str	r3, [r7, #8]
      break;
 80042b2:	e0b4      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b4:	4b5d      	ldr	r3, [pc, #372]	; (800442c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042be:	4b5b      	ldr	r3, [pc, #364]	; (800442c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d04d      	beq.n	8004366 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ca:	4b58      	ldr	r3, [pc, #352]	; (800442c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	461a      	mov	r2, r3
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042da:	f04f 0100 	mov.w	r1, #0
 80042de:	ea02 0800 	and.w	r8, r2, r0
 80042e2:	ea03 0901 	and.w	r9, r3, r1
 80042e6:	4640      	mov	r0, r8
 80042e8:	4649      	mov	r1, r9
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	014b      	lsls	r3, r1, #5
 80042f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042f8:	0142      	lsls	r2, r0, #5
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	ebb0 0008 	subs.w	r0, r0, r8
 8004302:	eb61 0109 	sbc.w	r1, r1, r9
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	018b      	lsls	r3, r1, #6
 8004310:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004314:	0182      	lsls	r2, r0, #6
 8004316:	1a12      	subs	r2, r2, r0
 8004318:	eb63 0301 	sbc.w	r3, r3, r1
 800431c:	f04f 0000 	mov.w	r0, #0
 8004320:	f04f 0100 	mov.w	r1, #0
 8004324:	00d9      	lsls	r1, r3, #3
 8004326:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800432a:	00d0      	lsls	r0, r2, #3
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	eb12 0208 	adds.w	r2, r2, r8
 8004334:	eb43 0309 	adc.w	r3, r3, r9
 8004338:	f04f 0000 	mov.w	r0, #0
 800433c:	f04f 0100 	mov.w	r1, #0
 8004340:	0259      	lsls	r1, r3, #9
 8004342:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004346:	0250      	lsls	r0, r2, #9
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	461a      	mov	r2, r3
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	f7fb ff36 	bl	80001c8 <__aeabi_uldivmod>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4613      	mov	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e04a      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004366:	4b31      	ldr	r3, [pc, #196]	; (800442c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	099b      	lsrs	r3, r3, #6
 800436c:	461a      	mov	r2, r3
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	ea02 0400 	and.w	r4, r2, r0
 800437e:	ea03 0501 	and.w	r5, r3, r1
 8004382:	4620      	mov	r0, r4
 8004384:	4629      	mov	r1, r5
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	014b      	lsls	r3, r1, #5
 8004390:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004394:	0142      	lsls	r2, r0, #5
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	1b00      	subs	r0, r0, r4
 800439c:	eb61 0105 	sbc.w	r1, r1, r5
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	018b      	lsls	r3, r1, #6
 80043aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043ae:	0182      	lsls	r2, r0, #6
 80043b0:	1a12      	subs	r2, r2, r0
 80043b2:	eb63 0301 	sbc.w	r3, r3, r1
 80043b6:	f04f 0000 	mov.w	r0, #0
 80043ba:	f04f 0100 	mov.w	r1, #0
 80043be:	00d9      	lsls	r1, r3, #3
 80043c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043c4:	00d0      	lsls	r0, r2, #3
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	1912      	adds	r2, r2, r4
 80043cc:	eb45 0303 	adc.w	r3, r5, r3
 80043d0:	f04f 0000 	mov.w	r0, #0
 80043d4:	f04f 0100 	mov.w	r1, #0
 80043d8:	0299      	lsls	r1, r3, #10
 80043da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043de:	0290      	lsls	r0, r2, #10
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	f7fb feea 	bl	80001c8 <__aeabi_uldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4613      	mov	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	3301      	adds	r3, #1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	60bb      	str	r3, [r7, #8]
      break;
 8004416:	e002      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800441a:	60bb      	str	r3, [r7, #8]
      break;
 800441c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800441e:	68bb      	ldr	r3, [r7, #8]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800442a:	bf00      	nop
 800442c:	40023800 	.word	0x40023800
 8004430:	00f42400 	.word	0x00f42400
 8004434:	007a1200 	.word	0x007a1200

08004438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <HAL_RCC_GetHCLKFreq+0x14>)
 800443e:	681b      	ldr	r3, [r3, #0]
}
 8004440:	4618      	mov	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000000 	.word	0x20000000

08004450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004454:	f7ff fff0 	bl	8004438 <HAL_RCC_GetHCLKFreq>
 8004458:	4602      	mov	r2, r0
 800445a:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	0a9b      	lsrs	r3, r3, #10
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	4903      	ldr	r1, [pc, #12]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004466:	5ccb      	ldrb	r3, [r1, r3]
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40023800 	.word	0x40023800
 8004474:	080087bc 	.word	0x080087bc

08004478 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d105      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800449c:	2b00      	cmp	r3, #0
 800449e:	d035      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044a0:	4b62      	ldr	r3, [pc, #392]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044a6:	f7fc fd47 	bl	8000f38 <HAL_GetTick>
 80044aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044ae:	f7fc fd43 	bl	8000f38 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e0b0      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044c0:	4b5b      	ldr	r3, [pc, #364]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	019a      	lsls	r2, r3, #6
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	071b      	lsls	r3, r3, #28
 80044d8:	4955      	ldr	r1, [pc, #340]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044e0:	4b52      	ldr	r3, [pc, #328]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044e6:	f7fc fd27 	bl	8000f38 <HAL_GetTick>
 80044ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044ee:	f7fc fd23 	bl	8000f38 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e090      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004500:	4b4b      	ldr	r3, [pc, #300]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8083 	beq.w	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	4b44      	ldr	r3, [pc, #272]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	4a43      	ldr	r2, [pc, #268]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004528:	6413      	str	r3, [r2, #64]	; 0x40
 800452a:	4b41      	ldr	r3, [pc, #260]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004536:	4b3f      	ldr	r3, [pc, #252]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a3e      	ldr	r2, [pc, #248]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800453c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004540:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004542:	f7fc fcf9 	bl	8000f38 <HAL_GetTick>
 8004546:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004548:	e008      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800454a:	f7fc fcf5 	bl	8000f38 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e062      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800455c:	4b35      	ldr	r3, [pc, #212]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004568:	4b31      	ldr	r3, [pc, #196]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004570:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d02f      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	429a      	cmp	r2, r3
 8004584:	d028      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004586:	4b2a      	ldr	r3, [pc, #168]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004590:	4b29      	ldr	r3, [pc, #164]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004592:	2201      	movs	r2, #1
 8004594:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004596:	4b28      	ldr	r3, [pc, #160]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800459c:	4a24      	ldr	r2, [pc, #144]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045a2:	4b23      	ldr	r3, [pc, #140]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d114      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045ae:	f7fc fcc3 	bl	8000f38 <HAL_GetTick>
 80045b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b4:	e00a      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b6:	f7fc fcbf 	bl	8000f38 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d901      	bls.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e02a      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045cc:	4b18      	ldr	r3, [pc, #96]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0ee      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e4:	d10d      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fa:	490d      	ldr	r1, [pc, #52]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	608b      	str	r3, [r1, #8]
 8004600:	e005      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004608:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800460c:	6093      	str	r3, [r2, #8]
 800460e:	4b08      	ldr	r3, [pc, #32]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004610:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461a:	4905      	ldr	r1, [pc, #20]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461c:	4313      	orrs	r3, r2
 800461e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	42470068 	.word	0x42470068
 8004630:	40023800 	.word	0x40023800
 8004634:	40007000 	.word	0x40007000
 8004638:	42470e40 	.word	0x42470e40

0800463c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d13e      	bne.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800465a:	4b23      	ldr	r3, [pc, #140]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d12f      	bne.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004670:	4b1e      	ldr	r3, [pc, #120]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004672:	617b      	str	r3, [r7, #20]
          break;
 8004674:	e02f      	b.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004676:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004682:	d108      	bne.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004684:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800468c:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800468e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	e007      	b.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800469e:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ac:	099b      	lsrs	r3, r3, #6
 80046ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	fb02 f303 	mul.w	r3, r2, r3
 80046b8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c0:	0f1b      	lsrs	r3, r3, #28
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	617b      	str	r3, [r7, #20]
          break;
 80046ce:	e002      	b.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
          break;
 80046d4:	bf00      	nop
        }
      }
      break;
 80046d6:	bf00      	nop
    }
  }
  return frequency;
 80046d8:	697b      	ldr	r3, [r7, #20]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800
 80046ec:	00bb8000 	.word	0x00bb8000
 80046f0:	007a1200 	.word	0x007a1200
 80046f4:	00f42400 	.word	0x00f42400

080046f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e07b      	b.n	8004802 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d108      	bne.n	8004724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471a:	d009      	beq.n	8004730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	61da      	str	r2, [r3, #28]
 8004722:	e005      	b.n	8004730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc fa44 	bl	8000bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004766:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b4:	ea42 0103 	orr.w	r1, r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	0c1b      	lsrs	r3, r3, #16
 80047ce:	f003 0104 	and.w	r1, r3, #4
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	f003 0210 	and.w	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e041      	b.n	80048a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d106      	bne.n	8004836 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7fc fa19 	bl	8000c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2202      	movs	r2, #2
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3304      	adds	r3, #4
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f000 f9a3 	bl	8004b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e041      	b.n	800493e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f839 	bl	8004946 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f000 f954 	bl	8004b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004972:	2302      	movs	r3, #2
 8004974:	e046      	b.n	8004a04 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b0c      	cmp	r3, #12
 8004982:	d839      	bhi.n	80049f8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004984:	a201      	add	r2, pc, #4	; (adr r2, 800498c <HAL_TIM_OC_ConfigChannel+0x30>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	080049c1 	.word	0x080049c1
 8004990:	080049f9 	.word	0x080049f9
 8004994:	080049f9 	.word	0x080049f9
 8004998:	080049f9 	.word	0x080049f9
 800499c:	080049cf 	.word	0x080049cf
 80049a0:	080049f9 	.word	0x080049f9
 80049a4:	080049f9 	.word	0x080049f9
 80049a8:	080049f9 	.word	0x080049f9
 80049ac:	080049dd 	.word	0x080049dd
 80049b0:	080049f9 	.word	0x080049f9
 80049b4:	080049f9 	.word	0x080049f9
 80049b8:	080049f9 	.word	0x080049f9
 80049bc:	080049eb 	.word	0x080049eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f984 	bl	8004cd4 <TIM_OC1_SetConfig>
      break;
 80049cc:	e015      	b.n	80049fa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f9ed 	bl	8004db4 <TIM_OC2_SetConfig>
      break;
 80049da:	e00e      	b.n	80049fa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fa5c 	bl	8004ea0 <TIM_OC3_SetConfig>
      break;
 80049e8:	e007      	b.n	80049fa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fac9 	bl	8004f88 <TIM_OC4_SetConfig>
      break;
 80049f6:	e000      	b.n	80049fa <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80049f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIM_ConfigClockSource+0x18>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e0b3      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x180>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a5c:	d03e      	beq.n	8004adc <HAL_TIM_ConfigClockSource+0xd0>
 8004a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a62:	f200 8087 	bhi.w	8004b74 <HAL_TIM_ConfigClockSource+0x168>
 8004a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6a:	f000 8085 	beq.w	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a72:	d87f      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x168>
 8004a74:	2b70      	cmp	r3, #112	; 0x70
 8004a76:	d01a      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0xa2>
 8004a78:	2b70      	cmp	r3, #112	; 0x70
 8004a7a:	d87b      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x168>
 8004a7c:	2b60      	cmp	r3, #96	; 0x60
 8004a7e:	d050      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x116>
 8004a80:	2b60      	cmp	r3, #96	; 0x60
 8004a82:	d877      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x168>
 8004a84:	2b50      	cmp	r3, #80	; 0x50
 8004a86:	d03c      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0xf6>
 8004a88:	2b50      	cmp	r3, #80	; 0x50
 8004a8a:	d873      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x168>
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d058      	beq.n	8004b42 <HAL_TIM_ConfigClockSource+0x136>
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d86f      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x168>
 8004a94:	2b30      	cmp	r3, #48	; 0x30
 8004a96:	d064      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x156>
 8004a98:	2b30      	cmp	r3, #48	; 0x30
 8004a9a:	d86b      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x168>
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d060      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x156>
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d867      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x168>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d05c      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x156>
 8004aa8:	2b10      	cmp	r3, #16
 8004aaa:	d05a      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004aac:	e062      	b.n	8004b74 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6899      	ldr	r1, [r3, #8]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f000 fb33 	bl	8005128 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ad0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	609a      	str	r2, [r3, #8]
      break;
 8004ada:	e04e      	b.n	8004b7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	6899      	ldr	r1, [r3, #8]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f000 fb1c 	bl	8005128 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004afe:	609a      	str	r2, [r3, #8]
      break;
 8004b00:	e03b      	b.n	8004b7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6859      	ldr	r1, [r3, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f000 fa90 	bl	8005034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2150      	movs	r1, #80	; 0x50
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fae9 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004b20:	e02b      	b.n	8004b7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	6859      	ldr	r1, [r3, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f000 faaf 	bl	8005092 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2160      	movs	r1, #96	; 0x60
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fad9 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004b40:	e01b      	b.n	8004b7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6859      	ldr	r1, [r3, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f000 fa70 	bl	8005034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2140      	movs	r1, #64	; 0x40
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fac9 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004b60:	e00b      	b.n	8004b7a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	f000 fac0 	bl	80050f2 <TIM_ITRx_SetConfig>
        break;
 8004b72:	e002      	b.n	8004b7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b74:	bf00      	nop
 8004b76:	e000      	b.n	8004b7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a40      	ldr	r2, [pc, #256]	; (8004ca8 <TIM_Base_SetConfig+0x114>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d013      	beq.n	8004bd4 <TIM_Base_SetConfig+0x40>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb2:	d00f      	beq.n	8004bd4 <TIM_Base_SetConfig+0x40>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a3d      	ldr	r2, [pc, #244]	; (8004cac <TIM_Base_SetConfig+0x118>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00b      	beq.n	8004bd4 <TIM_Base_SetConfig+0x40>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a3c      	ldr	r2, [pc, #240]	; (8004cb0 <TIM_Base_SetConfig+0x11c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d007      	beq.n	8004bd4 <TIM_Base_SetConfig+0x40>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a3b      	ldr	r2, [pc, #236]	; (8004cb4 <TIM_Base_SetConfig+0x120>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_Base_SetConfig+0x40>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a3a      	ldr	r2, [pc, #232]	; (8004cb8 <TIM_Base_SetConfig+0x124>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d108      	bne.n	8004be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a2f      	ldr	r2, [pc, #188]	; (8004ca8 <TIM_Base_SetConfig+0x114>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d02b      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf4:	d027      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a2c      	ldr	r2, [pc, #176]	; (8004cac <TIM_Base_SetConfig+0x118>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d023      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a2b      	ldr	r2, [pc, #172]	; (8004cb0 <TIM_Base_SetConfig+0x11c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01f      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a2a      	ldr	r2, [pc, #168]	; (8004cb4 <TIM_Base_SetConfig+0x120>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d01b      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a29      	ldr	r2, [pc, #164]	; (8004cb8 <TIM_Base_SetConfig+0x124>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d017      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a28      	ldr	r2, [pc, #160]	; (8004cbc <TIM_Base_SetConfig+0x128>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a27      	ldr	r2, [pc, #156]	; (8004cc0 <TIM_Base_SetConfig+0x12c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00f      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a26      	ldr	r2, [pc, #152]	; (8004cc4 <TIM_Base_SetConfig+0x130>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00b      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a25      	ldr	r2, [pc, #148]	; (8004cc8 <TIM_Base_SetConfig+0x134>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d007      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <TIM_Base_SetConfig+0x138>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a23      	ldr	r2, [pc, #140]	; (8004cd0 <TIM_Base_SetConfig+0x13c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d108      	bne.n	8004c58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <TIM_Base_SetConfig+0x114>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_Base_SetConfig+0xf8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a0c      	ldr	r2, [pc, #48]	; (8004cb8 <TIM_Base_SetConfig+0x124>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d103      	bne.n	8004c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	615a      	str	r2, [r3, #20]
}
 8004c9a:	bf00      	nop
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	40010000 	.word	0x40010000
 8004cac:	40000400 	.word	0x40000400
 8004cb0:	40000800 	.word	0x40000800
 8004cb4:	40000c00 	.word	0x40000c00
 8004cb8:	40010400 	.word	0x40010400
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40014400 	.word	0x40014400
 8004cc4:	40014800 	.word	0x40014800
 8004cc8:	40001800 	.word	0x40001800
 8004ccc:	40001c00 	.word	0x40001c00
 8004cd0:	40002000 	.word	0x40002000

08004cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f023 0201 	bic.w	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f023 0302 	bic.w	r3, r3, #2
 8004d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a20      	ldr	r2, [pc, #128]	; (8004dac <TIM_OC1_SetConfig+0xd8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_OC1_SetConfig+0x64>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a1f      	ldr	r2, [pc, #124]	; (8004db0 <TIM_OC1_SetConfig+0xdc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d10c      	bne.n	8004d52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f023 0308 	bic.w	r3, r3, #8
 8004d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f023 0304 	bic.w	r3, r3, #4
 8004d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a15      	ldr	r2, [pc, #84]	; (8004dac <TIM_OC1_SetConfig+0xd8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_OC1_SetConfig+0x8e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a14      	ldr	r2, [pc, #80]	; (8004db0 <TIM_OC1_SetConfig+0xdc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d111      	bne.n	8004d86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	621a      	str	r2, [r3, #32]
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40010000 	.word	0x40010000
 8004db0:	40010400 	.word	0x40010400

08004db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	f023 0210 	bic.w	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f023 0320 	bic.w	r3, r3, #32
 8004dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a22      	ldr	r2, [pc, #136]	; (8004e98 <TIM_OC2_SetConfig+0xe4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_OC2_SetConfig+0x68>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a21      	ldr	r2, [pc, #132]	; (8004e9c <TIM_OC2_SetConfig+0xe8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d10d      	bne.n	8004e38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a17      	ldr	r2, [pc, #92]	; (8004e98 <TIM_OC2_SetConfig+0xe4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_OC2_SetConfig+0x94>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a16      	ldr	r2, [pc, #88]	; (8004e9c <TIM_OC2_SetConfig+0xe8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d113      	bne.n	8004e70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40010400 	.word	0x40010400

08004ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0303 	bic.w	r3, r3, #3
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a21      	ldr	r2, [pc, #132]	; (8004f80 <TIM_OC3_SetConfig+0xe0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_OC3_SetConfig+0x66>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a20      	ldr	r2, [pc, #128]	; (8004f84 <TIM_OC3_SetConfig+0xe4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d10d      	bne.n	8004f22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <TIM_OC3_SetConfig+0xe0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d003      	beq.n	8004f32 <TIM_OC3_SetConfig+0x92>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a15      	ldr	r2, [pc, #84]	; (8004f84 <TIM_OC3_SetConfig+0xe4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d113      	bne.n	8004f5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	621a      	str	r2, [r3, #32]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40010400 	.word	0x40010400

08004f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	031b      	lsls	r3, r3, #12
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a12      	ldr	r2, [pc, #72]	; (800502c <TIM_OC4_SetConfig+0xa4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_OC4_SetConfig+0x68>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a11      	ldr	r2, [pc, #68]	; (8005030 <TIM_OC4_SetConfig+0xa8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d109      	bne.n	8005004 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	019b      	lsls	r3, r3, #6
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40010400 	.word	0x40010400

08005034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f023 0201 	bic.w	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800505e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f023 030a 	bic.w	r3, r3, #10
 8005070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	621a      	str	r2, [r3, #32]
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005092:	b480      	push	{r7}
 8005094:	b087      	sub	sp, #28
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f023 0210 	bic.w	r2, r3, #16
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	031b      	lsls	r3, r3, #12
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b085      	sub	sp, #20
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	f043 0307 	orr.w	r3, r3, #7
 8005114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	609a      	str	r2, [r3, #8]
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	021a      	lsls	r2, r3, #8
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	431a      	orrs	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4313      	orrs	r3, r2
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	609a      	str	r2, [r3, #8]
}
 800515c:	bf00      	nop
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	2201      	movs	r2, #1
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a1a      	ldr	r2, [r3, #32]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	43db      	mvns	r3, r3
 800518a:	401a      	ands	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a1a      	ldr	r2, [r3, #32]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 031f 	and.w	r3, r3, #31
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	431a      	orrs	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e05a      	b.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a21      	ldr	r2, [pc, #132]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005218:	d01d      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1a      	ldr	r2, [pc, #104]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10c      	bne.n	8005270 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800525c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4313      	orrs	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40010000 	.word	0x40010000
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40000c00 	.word	0x40000c00
 80052a0:	40010400 	.word	0x40010400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40001800 	.word	0x40001800

080052ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052ac:	b084      	sub	sp, #16
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	f107 001c 	add.w	r0, r7, #28
 80052ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d122      	bne.n	800530a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d105      	bne.n	80052fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f94a 	bl	8005598 <USB_CoreReset>
 8005304:	4603      	mov	r3, r0
 8005306:	73fb      	strb	r3, [r7, #15]
 8005308:	e01a      	b.n	8005340 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f93e 	bl	8005598 <USB_CoreReset>
 800531c:	4603      	mov	r3, r0
 800531e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	639a      	str	r2, [r3, #56]	; 0x38
 8005332:	e005      	b.n	8005340 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	2b01      	cmp	r3, #1
 8005344:	d10b      	bne.n	800535e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f043 0206 	orr.w	r2, r3, #6
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800536a:	b004      	add	sp, #16
 800536c:	4770      	bx	lr

0800536e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f043 0201 	orr.w	r2, r3, #1
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f023 0201 	bic.w	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	460b      	mov	r3, r1
 80053bc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d106      	bne.n	80053de <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60da      	str	r2, [r3, #12]
 80053dc:	e00b      	b.n	80053f6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d106      	bne.n	80053f2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	60da      	str	r2, [r3, #12]
 80053f0:	e001      	b.n	80053f6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e003      	b.n	80053fe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80053f6:	2032      	movs	r0, #50	; 0x32
 80053f8:	f7fb fdaa 	bl	8000f50 <HAL_Delay>

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	019b      	lsls	r3, r3, #6
 800541a:	f043 0220 	orr.w	r2, r3, #32
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3301      	adds	r3, #1
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4a09      	ldr	r2, [pc, #36]	; (8005450 <USB_FlushTxFifo+0x48>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d901      	bls.n	8005434 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e006      	b.n	8005442 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b20      	cmp	r3, #32
 800543e:	d0f0      	beq.n	8005422 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	00030d40 	.word	0x00030d40

08005454 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2210      	movs	r2, #16
 8005464:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3301      	adds	r3, #1
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4a09      	ldr	r2, [pc, #36]	; (8005494 <USB_FlushRxFifo+0x40>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d901      	bls.n	8005478 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e006      	b.n	8005486 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b10      	cmp	r3, #16
 8005482:	d0f0      	beq.n	8005466 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	00030d40 	.word	0x00030d40

08005498 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005498:	b480      	push	{r7}
 800549a:	b089      	sub	sp, #36	; 0x24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	4611      	mov	r1, r2
 80054a4:	461a      	mov	r2, r3
 80054a6:	460b      	mov	r3, r1
 80054a8:	71fb      	strb	r3, [r7, #7]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80054b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11a      	bne.n	80054f4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80054be:	88bb      	ldrh	r3, [r7, #4]
 80054c0:	3303      	adds	r3, #3
 80054c2:	089b      	lsrs	r3, r3, #2
 80054c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80054c6:	2300      	movs	r3, #0
 80054c8:	61bb      	str	r3, [r7, #24]
 80054ca:	e00f      	b.n	80054ec <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	031a      	lsls	r2, r3, #12
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d8:	461a      	mov	r2, r3
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	3304      	adds	r3, #4
 80054e4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	3301      	adds	r3, #1
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d3eb      	bcc.n	80054cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3724      	adds	r7, #36	; 0x24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005502:	b480      	push	{r7}
 8005504:	b089      	sub	sp, #36	; 0x24
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	4613      	mov	r3, r2
 800550e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	3303      	adds	r3, #3
 800551c:	089b      	lsrs	r3, r3, #2
 800551e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005520:	2300      	movs	r3, #0
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	e00b      	b.n	800553e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	601a      	str	r2, [r3, #0]
    pDest++;
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	3304      	adds	r3, #4
 8005536:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	3301      	adds	r3, #1
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	429a      	cmp	r2, r3
 8005544:	d3ef      	bcc.n	8005526 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005546:	69fb      	ldr	r3, [r7, #28]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3724      	adds	r7, #36	; 0x24
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4013      	ands	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800556c:	68fb      	ldr	r3, [r7, #12]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f003 0301 	and.w	r3, r3, #1
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3301      	adds	r3, #1
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a13      	ldr	r2, [pc, #76]	; (80055fc <USB_CoreReset+0x64>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d901      	bls.n	80055b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e01b      	b.n	80055ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	daf2      	bge.n	80055a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f043 0201 	orr.w	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3301      	adds	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4a09      	ldr	r2, [pc, #36]	; (80055fc <USB_CoreReset+0x64>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d901      	bls.n	80055e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e006      	b.n	80055ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d0f0      	beq.n	80055ce <USB_CoreReset+0x36>

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	00030d40 	.word	0x00030d40

08005600 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005600:	b084      	sub	sp, #16
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	f107 001c 	add.w	r0, r7, #28
 800560e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800561c:	461a      	mov	r2, r3
 800561e:	2300      	movs	r3, #0
 8005620:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d018      	beq.n	8005684 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	2b01      	cmp	r3, #1
 8005656:	d10a      	bne.n	800566e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005666:	f043 0304 	orr.w	r3, r3, #4
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	e014      	b.n	8005698 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800567c:	f023 0304 	bic.w	r3, r3, #4
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e009      	b.n	8005698 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005692:	f023 0304 	bic.w	r3, r3, #4
 8005696:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005698:	2110      	movs	r1, #16
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff feb4 	bl	8005408 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff fed7 	bl	8005454 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	e015      	b.n	80056d8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b8:	461a      	mov	r2, r3
 80056ba:	f04f 33ff 	mov.w	r3, #4294967295
 80056be:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056cc:	461a      	mov	r2, r3
 80056ce:	2300      	movs	r3, #0
 80056d0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3301      	adds	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d3e5      	bcc.n	80056ac <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80056e0:	2101      	movs	r1, #1
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f8ac 	bl	8005840 <USB_DriveVbus>

  HAL_Delay(200U);
 80056e8:	20c8      	movs	r0, #200	; 0xc8
 80056ea:	f7fb fc31 	bl	8000f50 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f04f 32ff 	mov.w	r2, #4294967295
 80056fa:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00b      	beq.n	8005720 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800570e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a14      	ldr	r2, [pc, #80]	; (8005764 <USB_HostInit+0x164>)
 8005714:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a13      	ldr	r2, [pc, #76]	; (8005768 <USB_HostInit+0x168>)
 800571a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800571e:	e009      	b.n	8005734 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2280      	movs	r2, #128	; 0x80
 8005724:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a10      	ldr	r2, [pc, #64]	; (800576c <USB_HostInit+0x16c>)
 800572a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a10      	ldr	r2, [pc, #64]	; (8005770 <USB_HostInit+0x170>)
 8005730:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	2b00      	cmp	r3, #0
 8005738:	d105      	bne.n	8005746 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f043 0210 	orr.w	r2, r3, #16
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <USB_HostInit+0x174>)
 800574c:	4313      	orrs	r3, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800575e:	b004      	add	sp, #16
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	01000200 	.word	0x01000200
 8005768:	00e00300 	.word	0x00e00300
 800576c:	00600080 	.word	0x00600080
 8005770:	004000e0 	.word	0x004000e0
 8005774:	a3200008 	.word	0xa3200008

08005778 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005796:	f023 0303 	bic.w	r3, r3, #3
 800579a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057b0:	4313      	orrs	r3, r2
 80057b2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80057b4:	78fb      	ldrb	r3, [r7, #3]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d107      	bne.n	80057ca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057c0:	461a      	mov	r2, r3
 80057c2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80057c6:	6053      	str	r3, [r2, #4]
 80057c8:	e009      	b.n	80057de <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d106      	bne.n	80057de <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d6:	461a      	mov	r2, r3
 80057d8:	f241 7370 	movw	r3, #6000	; 0x1770
 80057dc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800580c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800581a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800581c:	2064      	movs	r0, #100	; 0x64
 800581e:	f7fb fb97 	bl	8000f50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800582a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800582e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005830:	200a      	movs	r0, #10
 8005832:	f7fb fb8d 	bl	8000f50 <HAL_Delay>

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005864:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d109      	bne.n	8005884 <USB_DriveVbus+0x44>
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d106      	bne.n	8005884 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800587e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005882:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588e:	d109      	bne.n	80058a4 <USB_DriveVbus+0x64>
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800589e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	0c5b      	lsrs	r3, r3, #17
 80058d0:	f003 0303 	and.w	r3, r3, #3
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	b29b      	uxth	r3, r3
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
	...

08005904 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	4608      	mov	r0, r1
 800590e:	4611      	mov	r1, r2
 8005910:	461a      	mov	r2, r3
 8005912:	4603      	mov	r3, r0
 8005914:	70fb      	strb	r3, [r7, #3]
 8005916:	460b      	mov	r3, r1
 8005918:	70bb      	strb	r3, [r7, #2]
 800591a:	4613      	mov	r3, r2
 800591c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4413      	add	r3, r2
 800592e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005932:	461a      	mov	r2, r3
 8005934:	f04f 33ff 	mov.w	r3, #4294967295
 8005938:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800593a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800593e:	2b03      	cmp	r3, #3
 8005940:	d87e      	bhi.n	8005a40 <USB_HC_Init+0x13c>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <USB_HC_Init+0x44>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	08005959 	.word	0x08005959
 800594c:	08005a03 	.word	0x08005a03
 8005950:	08005959 	.word	0x08005959
 8005954:	080059c5 	.word	0x080059c5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4413      	add	r3, r2
 8005960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005964:	461a      	mov	r2, r3
 8005966:	f240 439d 	movw	r3, #1181	; 0x49d
 800596a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800596c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005970:	2b00      	cmp	r3, #0
 8005972:	da10      	bge.n	8005996 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	4413      	add	r3, r2
 800597c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	78fa      	ldrb	r2, [r7, #3]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	440a      	add	r2, r1
 800598a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800598e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005992:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005994:	e057      	b.n	8005a46 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d051      	beq.n	8005a46 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	78fa      	ldrb	r2, [r7, #3]
 80059b2:	0151      	lsls	r1, r2, #5
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	440a      	add	r2, r1
 80059b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80059c0:	60d3      	str	r3, [r2, #12]
      break;
 80059c2:	e040      	b.n	8005a46 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d0:	461a      	mov	r2, r3
 80059d2:	f240 639d 	movw	r3, #1693	; 0x69d
 80059d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80059d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	da34      	bge.n	8005a4a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	78fa      	ldrb	r2, [r7, #3]
 80059f0:	0151      	lsls	r1, r2, #5
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	440a      	add	r2, r1
 80059f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059fe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005a00:	e023      	b.n	8005a4a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f240 2325 	movw	r3, #549	; 0x225
 8005a14:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	da17      	bge.n	8005a4e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	78fa      	ldrb	r2, [r7, #3]
 8005a2e:	0151      	lsls	r1, r2, #5
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	440a      	add	r2, r1
 8005a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a38:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005a3c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005a3e:	e006      	b.n	8005a4e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	77fb      	strb	r3, [r7, #31]
      break;
 8005a44:	e004      	b.n	8005a50 <USB_HC_Init+0x14c>
      break;
 8005a46:	bf00      	nop
 8005a48:	e002      	b.n	8005a50 <USB_HC_Init+0x14c>
      break;
 8005a4a:	bf00      	nop
 8005a4c:	e000      	b.n	8005a50 <USB_HC_Init+0x14c>
      break;
 8005a4e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a56:	699a      	ldr	r2, [r3, #24]
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	2101      	movs	r1, #1
 8005a60:	fa01 f303 	lsl.w	r3, r1, r3
 8005a64:	6939      	ldr	r1, [r7, #16]
 8005a66:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005a7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	da03      	bge.n	8005a8a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a86:	61bb      	str	r3, [r7, #24]
 8005a88:	e001      	b.n	8005a8e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff ff0f 	bl	80058b2 <USB_GetHostSpeed>
 8005a94:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005a96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d106      	bne.n	8005aac <USB_HC_Init+0x1a8>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d003      	beq.n	8005aac <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	e001      	b.n	8005ab0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ab0:	787b      	ldrb	r3, [r7, #1]
 8005ab2:	059b      	lsls	r3, r3, #22
 8005ab4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ab8:	78bb      	ldrb	r3, [r7, #2]
 8005aba:	02db      	lsls	r3, r3, #11
 8005abc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ac0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ac2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ac6:	049b      	lsls	r3, r3, #18
 8005ac8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005acc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ace:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ad4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	0159      	lsls	r1, r3, #5
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	440b      	add	r3, r1
 8005ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005aec:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005aee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d10f      	bne.n	8005b16 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	0151      	lsls	r1, r2, #5
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	440a      	add	r2, r1
 8005b0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b14:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005b16:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3720      	adds	r7, #32
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08c      	sub	sp, #48	; 0x30
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	785b      	ldrb	r3, [r3, #1]
 8005b36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b3c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d02d      	beq.n	8005ba6 <USB_HC_StartXfer+0x86>
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	791b      	ldrb	r3, [r3, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d129      	bne.n	8005ba6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d117      	bne.n	8005b88 <USB_HC_StartXfer+0x68>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	79db      	ldrb	r3, [r3, #7]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <USB_HC_StartXfer+0x48>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	79db      	ldrb	r3, [r3, #7]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d10f      	bne.n	8005b88 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	6a3a      	ldr	r2, [r7, #32]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005b88:	79fb      	ldrb	r3, [r7, #7]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10b      	bne.n	8005ba6 <USB_HC_StartXfer+0x86>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	795b      	ldrb	r3, [r3, #5]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d107      	bne.n	8005ba6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	785b      	ldrb	r3, [r3, #1]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fa2f 	bl	8006000 <USB_DoPing>
      return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e0f8      	b.n	8005d98 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d018      	beq.n	8005be0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	8912      	ldrh	r2, [r2, #8]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	8912      	ldrh	r2, [r2, #8]
 8005bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bc2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005bc4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005bc6:	8b7b      	ldrh	r3, [r7, #26]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d90b      	bls.n	8005be4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005bcc:	8b7b      	ldrh	r3, [r7, #26]
 8005bce:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005bd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	8912      	ldrh	r2, [r2, #8]
 8005bd6:	fb02 f203 	mul.w	r2, r2, r3
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	611a      	str	r2, [r3, #16]
 8005bde:	e001      	b.n	8005be4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005be0:	2301      	movs	r3, #1
 8005be2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	78db      	ldrb	r3, [r3, #3]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005bec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	8912      	ldrh	r2, [r2, #8]
 8005bf2:	fb02 f203 	mul.w	r2, r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	611a      	str	r2, [r3, #16]
 8005bfa:	e003      	b.n	8005c04 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	695a      	ldr	r2, [r3, #20]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c0e:	04d9      	lsls	r1, r3, #19
 8005c10:	4b63      	ldr	r3, [pc, #396]	; (8005da0 <USB_HC_StartXfer+0x280>)
 8005c12:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c14:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	7a9b      	ldrb	r3, [r3, #10]
 8005c1a:	075b      	lsls	r3, r3, #29
 8005c1c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c20:	69f9      	ldr	r1, [r7, #28]
 8005c22:	0148      	lsls	r0, r1, #5
 8005c24:	6a39      	ldr	r1, [r7, #32]
 8005c26:	4401      	add	r1, r0
 8005c28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c2c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c2e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	68d9      	ldr	r1, [r3, #12]
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c46:	460a      	mov	r2, r1
 8005c48:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bf0c      	ite	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	2300      	movne	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	6a3a      	ldr	r2, [r7, #32]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c80:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	7e7b      	ldrb	r3, [r7, #25]
 8005c92:	075b      	lsls	r3, r3, #29
 8005c94:	69f9      	ldr	r1, [r7, #28]
 8005c96:	0148      	lsls	r0, r1, #5
 8005c98:	6a39      	ldr	r1, [r7, #32]
 8005c9a:	4401      	add	r1, r0
 8005c9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cba:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	78db      	ldrb	r3, [r3, #3]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	e003      	b.n	8005cd6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cd4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cdc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	461a      	mov	r2, r3
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005cf0:	79fb      	ldrb	r3, [r7, #7]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e04e      	b.n	8005d98 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	78db      	ldrb	r3, [r3, #3]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d149      	bne.n	8005d96 <USB_HC_StartXfer+0x276>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d045      	beq.n	8005d96 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	79db      	ldrb	r3, [r3, #7]
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d830      	bhi.n	8005d74 <USB_HC_StartXfer+0x254>
 8005d12:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <USB_HC_StartXfer+0x1f8>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d29 	.word	0x08005d29
 8005d1c:	08005d4d 	.word	0x08005d4d
 8005d20:	08005d29 	.word	0x08005d29
 8005d24:	08005d4d 	.word	0x08005d4d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	3303      	adds	r3, #3
 8005d2e:	089b      	lsrs	r3, r3, #2
 8005d30:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005d32:	8afa      	ldrh	r2, [r7, #22]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d91c      	bls.n	8005d78 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d4a:	e015      	b.n	8005d78 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	3303      	adds	r3, #3
 8005d52:	089b      	lsrs	r3, r3, #2
 8005d54:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005d56:	8afa      	ldrh	r2, [r7, #22]
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d90a      	bls.n	8005d7c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d72:	e003      	b.n	8005d7c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005d74:	bf00      	nop
 8005d76:	e002      	b.n	8005d7e <USB_HC_StartXfer+0x25e>
        break;
 8005d78:	bf00      	nop
 8005d7a:	e000      	b.n	8005d7e <USB_HC_StartXfer+0x25e>
        break;
 8005d7c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	68d9      	ldr	r1, [r3, #12]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	785a      	ldrb	r2, [r3, #1]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	9000      	str	r0, [sp, #0]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7ff fb81 	bl	8005498 <USB_WritePacket>
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3728      	adds	r7, #40	; 0x28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	1ff80000 	.word	0x1ff80000

08005da4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	b29b      	uxth	r3, r3
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b089      	sub	sp, #36	; 0x24
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	0c9b      	lsrs	r3, r3, #18
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	0fdb      	lsrs	r3, r3, #31
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d104      	bne.n	8005e20 <USB_HC_Halt+0x5a>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e0e8      	b.n	8005ff2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <USB_HC_Halt+0x66>
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d173      	bne.n	8005f14 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e4a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 80cb 	bne.w	8005ff0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d143      	bne.n	8005eee <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e84:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	0151      	lsls	r1, r2, #5
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	440a      	add	r2, r1
 8005e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ea4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ec0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ec4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ed2:	d81d      	bhi.n	8005f10 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eea:	d0ec      	beq.n	8005ec6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005eec:	e080      	b.n	8005ff0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f0c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f0e:	e06f      	b.n	8005ff0 <USB_HC_Halt+0x22a>
            break;
 8005f10:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f12:	e06d      	b.n	8005ff0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f32:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d143      	bne.n	8005fcc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f62:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	0151      	lsls	r1, r2, #5
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	440a      	add	r2, r1
 8005f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fa2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	61fb      	str	r3, [r7, #28]
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fb0:	d81d      	bhi.n	8005fee <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc8:	d0ec      	beq.n	8005fa4 <USB_HC_Halt+0x1de>
 8005fca:	e011      	b.n	8005ff0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	e000      	b.n	8005ff0 <USB_HC_Halt+0x22a>
          break;
 8005fee:	bf00      	nop
    }
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3724      	adds	r7, #36	; 0x24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
	...

08006000 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006014:	2301      	movs	r3, #1
 8006016:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	04da      	lsls	r2, r3, #19
 800601c:	4b15      	ldr	r3, [pc, #84]	; (8006074 <USB_DoPing+0x74>)
 800601e:	4013      	ands	r3, r2
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	440a      	add	r2, r1
 8006028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006030:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	4413      	add	r3, r2
 800603a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006048:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006050:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	4413      	add	r3, r2
 800605a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605e:	461a      	mov	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	1ff80000 	.word	0x1ff80000

08006078 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff f981 	bl	8005390 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800608e:	2110      	movs	r1, #16
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff f9b9 	bl	8005408 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff f9dc 	bl	8005454 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800609c:	2300      	movs	r3, #0
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	e01f      	b.n	80060e2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060b8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060c8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d6:	461a      	mov	r2, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	3301      	adds	r3, #1
 80060e0:	613b      	str	r3, [r7, #16]
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b0f      	cmp	r3, #15
 80060e6:	d9dc      	bls.n	80060a2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80060e8:	2300      	movs	r3, #0
 80060ea:	613b      	str	r3, [r7, #16]
 80060ec:	e034      	b.n	8006158 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006104:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800610c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006114:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4413      	add	r3, r2
 800611e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006122:	461a      	mov	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3301      	adds	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006134:	d80c      	bhi.n	8006150 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800614c:	d0ec      	beq.n	8006128 <USB_StopHost+0xb0>
 800614e:	e000      	b.n	8006152 <USB_StopHost+0xda>
        break;
 8006150:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3301      	adds	r3, #1
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b0f      	cmp	r3, #15
 800615c:	d9c7      	bls.n	80060ee <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006164:	461a      	mov	r2, r3
 8006166:	f04f 33ff 	mov.w	r3, #4294967295
 800616a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f04f 32ff 	mov.w	r2, #4294967295
 8006172:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff f8fa 	bl	800536e <USB_EnableGlobalInt>

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006184:	b590      	push	{r4, r7, lr}
 8006186:	b089      	sub	sp, #36	; 0x24
 8006188:	af04      	add	r7, sp, #16
 800618a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800618c:	2301      	movs	r3, #1
 800618e:	2202      	movs	r2, #2
 8006190:	2102      	movs	r1, #2
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fc66 	bl	8006a64 <USBH_FindInterface>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2bff      	cmp	r3, #255	; 0xff
 80061a0:	d002      	beq.n	80061a8 <USBH_CDC_InterfaceInit+0x24>
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d901      	bls.n	80061ac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80061a8:	2302      	movs	r3, #2
 80061aa:	e13d      	b.n	8006428 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fc3b 	bl	8006a2c <USBH_SelectInterface>
 80061b6:	4603      	mov	r3, r0
 80061b8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80061ba:	7bbb      	ldrb	r3, [r7, #14]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80061c0:	2302      	movs	r3, #2
 80061c2:	e131      	b.n	8006428 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80061ca:	2050      	movs	r0, #80	; 0x50
 80061cc:	f002 fa00 	bl	80085d0 <malloc>
 80061d0:	4603      	mov	r3, r0
 80061d2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80061e4:	2302      	movs	r3, #2
 80061e6:	e11f      	b.n	8006428 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80061e8:	2250      	movs	r2, #80	; 0x50
 80061ea:	2100      	movs	r1, #0
 80061ec:	68b8      	ldr	r0, [r7, #8]
 80061ee:	f002 f9ff 	bl	80085f0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	211a      	movs	r1, #26
 80061f8:	fb01 f303 	mul.w	r3, r1, r3
 80061fc:	4413      	add	r3, r2
 80061fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	b25b      	sxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	da15      	bge.n	8006236 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	211a      	movs	r1, #26
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	4413      	add	r3, r2
 8006216:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800621a:	781a      	ldrb	r2, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	211a      	movs	r1, #26
 8006226:	fb01 f303 	mul.w	r3, r1, r3
 800622a:	4413      	add	r3, r2
 800622c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006230:	881a      	ldrh	r2, [r3, #0]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	785b      	ldrb	r3, [r3, #1]
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 fe32 	bl	8007ea6 <USBH_AllocPipe>
 8006242:	4603      	mov	r3, r0
 8006244:	461a      	mov	r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	7819      	ldrb	r1, [r3, #0]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	7858      	ldrb	r0, [r3, #1]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	8952      	ldrh	r2, [r2, #10]
 8006262:	9202      	str	r2, [sp, #8]
 8006264:	2203      	movs	r2, #3
 8006266:	9201      	str	r2, [sp, #4]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	4623      	mov	r3, r4
 800626c:	4602      	mov	r2, r0
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f001 fdea 	bl	8007e48 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2200      	movs	r2, #0
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f002 f8f9 	bl	8008474 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006282:	2300      	movs	r3, #0
 8006284:	2200      	movs	r2, #0
 8006286:	210a      	movs	r1, #10
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fbeb 	bl	8006a64 <USBH_FindInterface>
 800628e:	4603      	mov	r3, r0
 8006290:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2bff      	cmp	r3, #255	; 0xff
 8006296:	d002      	beq.n	800629e <USBH_CDC_InterfaceInit+0x11a>
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d901      	bls.n	80062a2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800629e:	2302      	movs	r3, #2
 80062a0:	e0c2      	b.n	8006428 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	211a      	movs	r1, #26
 80062a8:	fb01 f303 	mul.w	r3, r1, r3
 80062ac:	4413      	add	r3, r2
 80062ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	b25b      	sxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	da16      	bge.n	80062e8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	211a      	movs	r1, #26
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062ca:	781a      	ldrb	r2, [r3, #0]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	211a      	movs	r1, #26
 80062d6:	fb01 f303 	mul.w	r3, r1, r3
 80062da:	4413      	add	r3, r2
 80062dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80062e0:	881a      	ldrh	r2, [r3, #0]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	835a      	strh	r2, [r3, #26]
 80062e6:	e015      	b.n	8006314 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	211a      	movs	r1, #26
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	4413      	add	r3, r2
 80062f4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062f8:	781a      	ldrb	r2, [r3, #0]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	211a      	movs	r1, #26
 8006304:	fb01 f303 	mul.w	r3, r1, r3
 8006308:	4413      	add	r3, r2
 800630a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800630e:	881a      	ldrh	r2, [r3, #0]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	211a      	movs	r1, #26
 800631a:	fb01 f303 	mul.w	r3, r1, r3
 800631e:	4413      	add	r3, r2
 8006320:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	b25b      	sxtb	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	da16      	bge.n	800635a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	211a      	movs	r1, #26
 8006332:	fb01 f303 	mul.w	r3, r1, r3
 8006336:	4413      	add	r3, r2
 8006338:	f203 3356 	addw	r3, r3, #854	; 0x356
 800633c:	781a      	ldrb	r2, [r3, #0]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	211a      	movs	r1, #26
 8006348:	fb01 f303 	mul.w	r3, r1, r3
 800634c:	4413      	add	r3, r2
 800634e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006352:	881a      	ldrh	r2, [r3, #0]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	835a      	strh	r2, [r3, #26]
 8006358:	e015      	b.n	8006386 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	211a      	movs	r1, #26
 8006360:	fb01 f303 	mul.w	r3, r1, r3
 8006364:	4413      	add	r3, r2
 8006366:	f203 3356 	addw	r3, r3, #854	; 0x356
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	211a      	movs	r1, #26
 8006376:	fb01 f303 	mul.w	r3, r1, r3
 800637a:	4413      	add	r3, r2
 800637c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006380:	881a      	ldrh	r2, [r3, #0]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	7b9b      	ldrb	r3, [r3, #14]
 800638a:	4619      	mov	r1, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 fd8a 	bl	8007ea6 <USBH_AllocPipe>
 8006392:	4603      	mov	r3, r0
 8006394:	461a      	mov	r2, r3
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	7bdb      	ldrb	r3, [r3, #15]
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 fd80 	bl	8007ea6 <USBH_AllocPipe>
 80063a6:	4603      	mov	r3, r0
 80063a8:	461a      	mov	r2, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	7b59      	ldrb	r1, [r3, #13]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	7b98      	ldrb	r0, [r3, #14]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	8b12      	ldrh	r2, [r2, #24]
 80063c6:	9202      	str	r2, [sp, #8]
 80063c8:	2202      	movs	r2, #2
 80063ca:	9201      	str	r2, [sp, #4]
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	4623      	mov	r3, r4
 80063d0:	4602      	mov	r2, r0
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fd38 	bl	8007e48 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	7b19      	ldrb	r1, [r3, #12]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	7bd8      	ldrb	r0, [r3, #15]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	8b52      	ldrh	r2, [r2, #26]
 80063f0:	9202      	str	r2, [sp, #8]
 80063f2:	2202      	movs	r2, #2
 80063f4:	9201      	str	r2, [sp, #4]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	4623      	mov	r3, r4
 80063fa:	4602      	mov	r2, r0
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 fd23 	bl	8007e48 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	7b5b      	ldrb	r3, [r3, #13]
 800640e:	2200      	movs	r2, #0
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f002 f82e 	bl	8008474 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	7b1b      	ldrb	r3, [r3, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f002 f827 	bl	8008474 <USBH_LL_SetToggle>

  return USBH_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	bd90      	pop	{r4, r7, pc}

08006430 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00e      	beq.n	8006468 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 fd18 	bl	8007e86 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fd43 	bl	8007ee8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	7b1b      	ldrb	r3, [r3, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00e      	beq.n	800648e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	7b1b      	ldrb	r3, [r3, #12]
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 fd05 	bl	8007e86 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	7b1b      	ldrb	r3, [r3, #12]
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 fd30 	bl	8007ee8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	7b5b      	ldrb	r3, [r3, #13]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00e      	beq.n	80064b4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	7b5b      	ldrb	r3, [r3, #13]
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 fcf2 	bl	8007e86 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	7b5b      	ldrb	r3, [r3, #13]
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 fd1d 	bl	8007ee8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00b      	beq.n	80064d8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f002 f889 	bl	80085e0 <free>
    phost->pActiveClass->pData = 0U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064d4:	2200      	movs	r2, #0
 80064d6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3340      	adds	r3, #64	; 0x40
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8b1 	bl	8006662 <GetLineCoding>
 8006500:	4603      	mov	r3, r0
 8006502:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006504:	7afb      	ldrb	r3, [r7, #11]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d105      	bne.n	8006516 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006510:	2102      	movs	r1, #2
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006516:	7afb      	ldrb	r3, [r7, #11]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006528:	2301      	movs	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006540:	2b04      	cmp	r3, #4
 8006542:	d877      	bhi.n	8006634 <USBH_CDC_Process+0x114>
 8006544:	a201      	add	r2, pc, #4	; (adr r2, 800654c <USBH_CDC_Process+0x2c>)
 8006546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654a:	bf00      	nop
 800654c:	08006561 	.word	0x08006561
 8006550:	08006567 	.word	0x08006567
 8006554:	08006597 	.word	0x08006597
 8006558:	0800660b 	.word	0x0800660b
 800655c:	08006619 	.word	0x08006619
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]
      break;
 8006564:	e06d      	b.n	8006642 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656a:	4619      	mov	r1, r3
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f897 	bl	80066a0 <SetLineCoding>
 8006572:	4603      	mov	r3, r0
 8006574:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006576:	7bbb      	ldrb	r3, [r7, #14]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d104      	bne.n	8006586 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006584:	e058      	b.n	8006638 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006586:	7bbb      	ldrb	r3, [r7, #14]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d055      	beq.n	8006638 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2204      	movs	r2, #4
 8006590:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006594:	e050      	b.n	8006638 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	3340      	adds	r3, #64	; 0x40
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f860 	bl	8006662 <GetLineCoding>
 80065a2:	4603      	mov	r3, r0
 80065a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80065a6:	7bbb      	ldrb	r3, [r7, #14]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d126      	bne.n	80065fa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065be:	791b      	ldrb	r3, [r3, #4]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d13b      	bne.n	800663c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d133      	bne.n	800663c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065de:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d12b      	bne.n	800663c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d124      	bne.n	800663c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f958 	bl	80068a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80065f8:	e020      	b.n	800663c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d01d      	beq.n	800663c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2204      	movs	r2, #4
 8006604:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006608:	e018      	b.n	800663c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f867 	bl	80066de <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f8da 	bl	80067ca <CDC_ProcessReception>
      break;
 8006616:	e014      	b.n	8006642 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006618:	2100      	movs	r1, #0
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 ffe3 	bl	80075e6 <USBH_ClrFeature>
 8006620:	4603      	mov	r3, r0
 8006622:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006632:	e005      	b.n	8006640 <USBH_CDC_Process+0x120>

    default:
      break;
 8006634:	bf00      	nop
 8006636:	e004      	b.n	8006642 <USBH_CDC_Process+0x122>
      break;
 8006638:	bf00      	nop
 800663a:	e002      	b.n	8006642 <USBH_CDC_Process+0x122>
      break;
 800663c:	bf00      	nop
 800663e:	e000      	b.n	8006642 <USBH_CDC_Process+0x122>
      break;
 8006640:	bf00      	nop

  }

  return status;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	22a1      	movs	r2, #161	; 0xa1
 8006670:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2221      	movs	r2, #33	; 0x21
 8006676:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2207      	movs	r2, #7
 8006688:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2207      	movs	r2, #7
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 f988 	bl	80079a6 <USBH_CtlReq>
 8006696:	4603      	mov	r3, r0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2221      	movs	r2, #33	; 0x21
 80066ae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2207      	movs	r2, #7
 80066c6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2207      	movs	r2, #7
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 f969 	bl	80079a6 <USBH_CtlReq>
 80066d4:	4603      	mov	r3, r0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af02      	add	r7, sp, #8
 80066e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80066f0:	2300      	movs	r3, #0
 80066f2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d002      	beq.n	8006704 <CDC_ProcessTransmission+0x26>
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d023      	beq.n	800674a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006702:	e05e      	b.n	80067c2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	8b12      	ldrh	r2, [r2, #24]
 800670c:	4293      	cmp	r3, r2
 800670e:	d90b      	bls.n	8006728 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	69d9      	ldr	r1, [r3, #28]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8b1a      	ldrh	r2, [r3, #24]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	7b5b      	ldrb	r3, [r3, #13]
 800671c:	2001      	movs	r0, #1
 800671e:	9000      	str	r0, [sp, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 fb4e 	bl	8007dc2 <USBH_BulkSendData>
 8006726:	e00b      	b.n	8006740 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	7b5b      	ldrb	r3, [r3, #13]
 8006736:	2001      	movs	r0, #1
 8006738:	9000      	str	r0, [sp, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f001 fb41 	bl	8007dc2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006748:	e03b      	b.n	80067c2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	7b5b      	ldrb	r3, [r3, #13]
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 fe65 	bl	8008420 <USBH_LL_GetURBState>
 8006756:	4603      	mov	r3, r0
 8006758:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800675a:	7afb      	ldrb	r3, [r7, #11]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d128      	bne.n	80067b2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	8b12      	ldrh	r2, [r2, #24]
 8006768:	4293      	cmp	r3, r2
 800676a:	d90e      	bls.n	800678a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	8b12      	ldrh	r2, [r2, #24]
 8006774:	1a9a      	subs	r2, r3, r2
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	8b12      	ldrh	r2, [r2, #24]
 8006782:	441a      	add	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	61da      	str	r2, [r3, #28]
 8006788:	e002      	b.n	8006790 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80067a0:	e00e      	b.n	80067c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f868 	bl	8006880 <USBH_CDC_TransmitCallback>
      break;
 80067b0:	e006      	b.n	80067c0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80067b2:	7afb      	ldrb	r3, [r7, #11]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d103      	bne.n	80067c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80067c0:	bf00      	nop
  }
}
 80067c2:	bf00      	nop
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b086      	sub	sp, #24
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067dc:	2300      	movs	r3, #0
 80067de:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d002      	beq.n	80067f0 <CDC_ProcessReception+0x26>
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	d00e      	beq.n	800680c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80067ee:	e043      	b.n	8006878 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	6a19      	ldr	r1, [r3, #32]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	8b5a      	ldrh	r2, [r3, #26]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	7b1b      	ldrb	r3, [r3, #12]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 fb05 	bl	8007e0c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2204      	movs	r2, #4
 8006806:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800680a:	e035      	b.n	8006878 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	7b1b      	ldrb	r3, [r3, #12]
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 fe04 	bl	8008420 <USBH_LL_GetURBState>
 8006818:	4603      	mov	r3, r0
 800681a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800681c:	7cfb      	ldrb	r3, [r7, #19]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d129      	bne.n	8006876 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	7b1b      	ldrb	r3, [r3, #12]
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 fd67 	bl	80082fc <USBH_LL_GetLastXferSize>
 800682e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	429a      	cmp	r2, r3
 8006838:	d016      	beq.n	8006868 <CDC_ProcessReception+0x9e>
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	8b5b      	ldrh	r3, [r3, #26]
 800683e:	461a      	mov	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4293      	cmp	r3, r2
 8006844:	d910      	bls.n	8006868 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	1ad2      	subs	r2, r2, r3
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	6a1a      	ldr	r2, [r3, #32]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	441a      	add	r2, r3
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2203      	movs	r2, #3
 8006862:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006866:	e006      	b.n	8006876 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f80f 	bl	8006894 <USBH_CDC_ReceiveCallback>
      break;
 8006876:	bf00      	nop
  }
}
 8006878:	bf00      	nop
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4613      	mov	r3, r2
 80068c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80068d0:	2302      	movs	r3, #2
 80068d2:	e029      	b.n	8006928 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	79fa      	ldrb	r2, [r7, #7]
 80068d8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 f81f 	bl	8006930 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d003      	beq.n	8006920 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f001 fc37 	bl	8008194 <USBH_LL_Init>

  return USBH_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	e009      	b.n	8006956 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	33e0      	adds	r3, #224	; 0xe0
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	2200      	movs	r2, #0
 800694e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3301      	adds	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b0e      	cmp	r3, #14
 800695a:	d9f2      	bls.n	8006942 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	e009      	b.n	8006976 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800696c:	2200      	movs	r2, #0
 800696e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3301      	adds	r3, #1
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800697c:	d3f1      	bcc.n	8006962 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2240      	movs	r2, #64	; 0x40
 80069a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d016      	beq.n	8006a1a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10e      	bne.n	8006a14 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069fc:	1c59      	adds	r1, r3, #1
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	33de      	adds	r3, #222	; 0xde
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]
 8006a12:	e004      	b.n	8006a1e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006a14:	2302      	movs	r3, #2
 8006a16:	73fb      	strb	r3, [r7, #15]
 8006a18:	e001      	b.n	8006a1e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006a42:	78fa      	ldrb	r2, [r7, #3]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d204      	bcs.n	8006a52 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	78fa      	ldrb	r2, [r7, #3]
 8006a4c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006a50:	e001      	b.n	8006a56 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006a52:	2302      	movs	r3, #2
 8006a54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	4611      	mov	r1, r2
 8006a70:	461a      	mov	r2, r3
 8006a72:	4603      	mov	r3, r0
 8006a74:	70fb      	strb	r3, [r7, #3]
 8006a76:	460b      	mov	r3, r1
 8006a78:	70bb      	strb	r3, [r7, #2]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006a8c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a8e:	e025      	b.n	8006adc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	221a      	movs	r2, #26
 8006a94:	fb02 f303 	mul.w	r3, r2, r3
 8006a98:	3308      	adds	r3, #8
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	795b      	ldrb	r3, [r3, #5]
 8006aa6:	78fa      	ldrb	r2, [r7, #3]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d002      	beq.n	8006ab2 <USBH_FindInterface+0x4e>
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	2bff      	cmp	r3, #255	; 0xff
 8006ab0:	d111      	bne.n	8006ad6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ab6:	78ba      	ldrb	r2, [r7, #2]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d002      	beq.n	8006ac2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006abc:	78bb      	ldrb	r3, [r7, #2]
 8006abe:	2bff      	cmp	r3, #255	; 0xff
 8006ac0:	d109      	bne.n	8006ad6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ac6:	787a      	ldrb	r2, [r7, #1]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d002      	beq.n	8006ad2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006acc:	787b      	ldrb	r3, [r7, #1]
 8006ace:	2bff      	cmp	r3, #255	; 0xff
 8006ad0:	d101      	bne.n	8006ad6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	e006      	b.n	8006ae4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d9d6      	bls.n	8006a90 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006ae2:	23ff      	movs	r3, #255	; 0xff
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	371c      	adds	r7, #28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 fb87 	bl	800820c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006afe:	2101      	movs	r1, #1
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 fca0 	bl	8008446 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af04      	add	r7, sp, #16
 8006b16:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d102      	bne.n	8006b32 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2203      	movs	r2, #3
 8006b30:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b0b      	cmp	r3, #11
 8006b3a:	f200 81b3 	bhi.w	8006ea4 <USBH_Process+0x394>
 8006b3e:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <USBH_Process+0x34>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006b75 	.word	0x08006b75
 8006b48:	08006ba7 	.word	0x08006ba7
 8006b4c:	08006c0f 	.word	0x08006c0f
 8006b50:	08006e3f 	.word	0x08006e3f
 8006b54:	08006ea5 	.word	0x08006ea5
 8006b58:	08006cb3 	.word	0x08006cb3
 8006b5c:	08006de5 	.word	0x08006de5
 8006b60:	08006ce9 	.word	0x08006ce9
 8006b64:	08006d09 	.word	0x08006d09
 8006b68:	08006d29 	.word	0x08006d29
 8006b6c:	08006d57 	.word	0x08006d57
 8006b70:	08006e27 	.word	0x08006e27
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8193 	beq.w	8006ea8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006b88:	20c8      	movs	r0, #200	; 0xc8
 8006b8a:	f001 fca3 	bl	80084d4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 fb99 	bl	80082c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006ba4:	e180      	b.n	8006ea8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d107      	bne.n	8006bc0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006bbe:	e182      	b.n	8006ec6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bca:	d914      	bls.n	8006bf6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d903      	bls.n	8006bee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	220d      	movs	r2, #13
 8006bea:	701a      	strb	r2, [r3, #0]
      break;
 8006bec:	e16b      	b.n	8006ec6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	701a      	strb	r2, [r3, #0]
      break;
 8006bf4:	e167      	b.n	8006ec6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bfc:	f103 020a 	add.w	r2, r3, #10
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006c06:	200a      	movs	r0, #10
 8006c08:	f001 fc64 	bl	80084d4 <USBH_Delay>
      break;
 8006c0c:	e15b      	b.n	8006ec6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c1e:	2104      	movs	r1, #4
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006c24:	2064      	movs	r0, #100	; 0x64
 8006c26:	f001 fc55 	bl	80084d4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 fb24 	bl	8008278 <USBH_LL_GetSpeed>
 8006c30:	4603      	mov	r3, r0
 8006c32:	461a      	mov	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2205      	movs	r2, #5
 8006c3e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006c40:	2100      	movs	r1, #0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 f92f 	bl	8007ea6 <USBH_AllocPipe>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006c50:	2180      	movs	r1, #128	; 0x80
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 f927 	bl	8007ea6 <USBH_AllocPipe>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	7919      	ldrb	r1, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c74:	b292      	uxth	r2, r2
 8006c76:	9202      	str	r2, [sp, #8]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	9201      	str	r2, [sp, #4]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2280      	movs	r2, #128	; 0x80
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 f8e0 	bl	8007e48 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	7959      	ldrb	r1, [r3, #5]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006c9c:	b292      	uxth	r2, r2
 8006c9e:	9202      	str	r2, [sp, #8]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	9201      	str	r2, [sp, #4]
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2200      	movs	r2, #0
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 f8cc 	bl	8007e48 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006cb0:	e109      	b.n	8006ec6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f90c 	bl	8006ed0 <USBH_HandleEnum>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f040 80f3 	bne.w	8006eac <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d103      	bne.n	8006ce0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2208      	movs	r2, #8
 8006cdc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006cde:	e0e5      	b.n	8006eac <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2207      	movs	r2, #7
 8006ce4:	701a      	strb	r2, [r3, #0]
      break;
 8006ce6:	e0e1      	b.n	8006eac <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 80de 	beq.w	8006eb0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2208      	movs	r2, #8
 8006d04:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006d06:	e0d3      	b.n	8006eb0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fc20 	bl	8007558 <USBH_SetCfg>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f040 80ca 	bne.w	8006eb4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2209      	movs	r2, #9
 8006d24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d26:	e0c5      	b.n	8006eb4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00b      	beq.n	8006d4e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006d36:	2101      	movs	r1, #1
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fc30 	bl	800759e <USBH_SetFeature>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f040 80b9 	bne.w	8006eb8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	220a      	movs	r2, #10
 8006d4a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d4c:	e0b4      	b.n	8006eb8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	220a      	movs	r2, #10
 8006d52:	701a      	strb	r2, [r3, #0]
      break;
 8006d54:	e0b0      	b.n	8006eb8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 80ad 	beq.w	8006ebc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]
 8006d6e:	e016      	b.n	8006d9e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006d70:	7bfa      	ldrb	r2, [r7, #15]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	32de      	adds	r2, #222	; 0xde
 8006d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7a:	791a      	ldrb	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d108      	bne.n	8006d98 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006d86:	7bfa      	ldrb	r2, [r7, #15]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	32de      	adds	r2, #222	; 0xde
 8006d8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006d96:	e005      	b.n	8006da4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	73fb      	strb	r3, [r7, #15]
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0e5      	beq.n	8006d70 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d016      	beq.n	8006ddc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d109      	bne.n	8006dd4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2206      	movs	r2, #6
 8006dc4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dcc:	2103      	movs	r1, #3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006dd2:	e073      	b.n	8006ebc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	220d      	movs	r2, #13
 8006dd8:	701a      	strb	r2, [r3, #0]
      break;
 8006dda:	e06f      	b.n	8006ebc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	220d      	movs	r2, #13
 8006de0:	701a      	strb	r2, [r3, #0]
      break;
 8006de2:	e06b      	b.n	8006ebc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d017      	beq.n	8006e1e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	4798      	blx	r3
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d103      	bne.n	8006e0e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	220b      	movs	r2, #11
 8006e0a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e0c:	e058      	b.n	8006ec0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d154      	bne.n	8006ec0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	220d      	movs	r2, #13
 8006e1a:	701a      	strb	r2, [r3, #0]
      break;
 8006e1c:	e050      	b.n	8006ec0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	220d      	movs	r2, #13
 8006e22:	701a      	strb	r2, [r3, #0]
      break;
 8006e24:	e04c      	b.n	8006ec0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d049      	beq.n	8006ec4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	4798      	blx	r3
      }
      break;
 8006e3c:	e042      	b.n	8006ec4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7ff fd72 	bl	8006930 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d009      	beq.n	8006e6a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e7a:	2105      	movs	r1, #5
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d107      	bne.n	8006e9c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff fe2b 	bl	8006af0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e9a:	e014      	b.n	8006ec6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 f9b5 	bl	800820c <USBH_LL_Start>
      break;
 8006ea2:	e010      	b.n	8006ec6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ea4:	bf00      	nop
 8006ea6:	e00e      	b.n	8006ec6 <USBH_Process+0x3b6>
      break;
 8006ea8:	bf00      	nop
 8006eaa:	e00c      	b.n	8006ec6 <USBH_Process+0x3b6>
      break;
 8006eac:	bf00      	nop
 8006eae:	e00a      	b.n	8006ec6 <USBH_Process+0x3b6>
    break;
 8006eb0:	bf00      	nop
 8006eb2:	e008      	b.n	8006ec6 <USBH_Process+0x3b6>
      break;
 8006eb4:	bf00      	nop
 8006eb6:	e006      	b.n	8006ec6 <USBH_Process+0x3b6>
      break;
 8006eb8:	bf00      	nop
 8006eba:	e004      	b.n	8006ec6 <USBH_Process+0x3b6>
      break;
 8006ebc:	bf00      	nop
 8006ebe:	e002      	b.n	8006ec6 <USBH_Process+0x3b6>
      break;
 8006ec0:	bf00      	nop
 8006ec2:	e000      	b.n	8006ec6 <USBH_Process+0x3b6>
      break;
 8006ec4:	bf00      	nop
  }
  return USBH_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af04      	add	r7, sp, #16
 8006ed6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006edc:	2301      	movs	r3, #1
 8006ede:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	2b07      	cmp	r3, #7
 8006ee6:	f200 81c1 	bhi.w	800726c <USBH_HandleEnum+0x39c>
 8006eea:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <USBH_HandleEnum+0x20>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f11 	.word	0x08006f11
 8006ef4:	08006fcf 	.word	0x08006fcf
 8006ef8:	08007039 	.word	0x08007039
 8006efc:	080070c7 	.word	0x080070c7
 8006f00:	08007131 	.word	0x08007131
 8006f04:	080071a1 	.word	0x080071a1
 8006f08:	080071e7 	.word	0x080071e7
 8006f0c:	0800722d 	.word	0x0800722d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006f10:	2108      	movs	r1, #8
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa50 	bl	80073b8 <USBH_Get_DevDesc>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d130      	bne.n	8006f84 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	7919      	ldrb	r1, [r3, #4]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f46:	b292      	uxth	r2, r2
 8006f48:	9202      	str	r2, [sp, #8]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	9201      	str	r2, [sp, #4]
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	4603      	mov	r3, r0
 8006f52:	2280      	movs	r2, #128	; 0x80
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 ff77 	bl	8007e48 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	7959      	ldrb	r1, [r3, #5]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f6e:	b292      	uxth	r2, r2
 8006f70:	9202      	str	r2, [sp, #8]
 8006f72:	2200      	movs	r2, #0
 8006f74:	9201      	str	r2, [sp, #4]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 ff63 	bl	8007e48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f82:	e175      	b.n	8007270 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f84:	7bbb      	ldrb	r3, [r7, #14]
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	f040 8172 	bne.w	8007270 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f92:	3301      	adds	r3, #1
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d903      	bls.n	8006fae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	220d      	movs	r2, #13
 8006faa:	701a      	strb	r2, [r3, #0]
      break;
 8006fac:	e160      	b.n	8007270 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	795b      	ldrb	r3, [r3, #5]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 ff97 	bl	8007ee8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	791b      	ldrb	r3, [r3, #4]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 ff91 	bl	8007ee8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	701a      	strb	r2, [r3, #0]
      break;
 8006fcc:	e150      	b.n	8007270 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006fce:	2112      	movs	r1, #18
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f9f1 	bl	80073b8 <USBH_Get_DevDesc>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d103      	bne.n	8006fe8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006fe6:	e145      	b.n	8007274 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	f040 8142 	bne.w	8007274 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007006:	2b03      	cmp	r3, #3
 8007008:	d903      	bls.n	8007012 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	220d      	movs	r2, #13
 800700e:	701a      	strb	r2, [r3, #0]
      break;
 8007010:	e130      	b.n	8007274 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	795b      	ldrb	r3, [r3, #5]
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 ff65 	bl	8007ee8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	791b      	ldrb	r3, [r3, #4]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 ff5f 	bl	8007ee8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	701a      	strb	r2, [r3, #0]
      break;
 8007036:	e11d      	b.n	8007274 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007038:	2101      	movs	r1, #1
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fa68 	bl	8007510 <USBH_SetAddress>
 8007040:	4603      	mov	r3, r0
 8007042:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d132      	bne.n	80070b0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800704a:	2002      	movs	r0, #2
 800704c:	f001 fa42 	bl	80084d4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2203      	movs	r2, #3
 800705c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7919      	ldrb	r1, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007072:	b292      	uxth	r2, r2
 8007074:	9202      	str	r2, [sp, #8]
 8007076:	2200      	movs	r2, #0
 8007078:	9201      	str	r2, [sp, #4]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	4603      	mov	r3, r0
 800707e:	2280      	movs	r2, #128	; 0x80
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fee1 	bl	8007e48 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	7959      	ldrb	r1, [r3, #5]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800709a:	b292      	uxth	r2, r2
 800709c:	9202      	str	r2, [sp, #8]
 800709e:	2200      	movs	r2, #0
 80070a0:	9201      	str	r2, [sp, #4]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	4603      	mov	r3, r0
 80070a6:	2200      	movs	r2, #0
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fecd 	bl	8007e48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070ae:	e0e3      	b.n	8007278 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070b0:	7bbb      	ldrb	r3, [r7, #14]
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	f040 80e0 	bne.w	8007278 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	220d      	movs	r2, #13
 80070bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	705a      	strb	r2, [r3, #1]
      break;
 80070c4:	e0d8      	b.n	8007278 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80070c6:	2109      	movs	r1, #9
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f99d 	bl	8007408 <USBH_Get_CfgDesc>
 80070ce:	4603      	mov	r3, r0
 80070d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d103      	bne.n	80070e0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2204      	movs	r2, #4
 80070dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070de:	e0cd      	b.n	800727c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	f040 80ca 	bne.w	800727c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070ee:	3301      	adds	r3, #1
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d903      	bls.n	800710a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	220d      	movs	r2, #13
 8007106:	701a      	strb	r2, [r3, #0]
      break;
 8007108:	e0b8      	b.n	800727c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	795b      	ldrb	r3, [r3, #5]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fee9 	bl	8007ee8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	791b      	ldrb	r3, [r3, #4]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fee3 	bl	8007ee8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	701a      	strb	r2, [r3, #0]
      break;
 800712e:	e0a5      	b.n	800727c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f965 	bl	8007408 <USBH_Get_CfgDesc>
 800713e:	4603      	mov	r3, r0
 8007140:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d103      	bne.n	8007150 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2205      	movs	r2, #5
 800714c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800714e:	e097      	b.n	8007280 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b03      	cmp	r3, #3
 8007154:	f040 8094 	bne.w	8007280 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800715e:	3301      	adds	r3, #1
 8007160:	b2da      	uxtb	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800716e:	2b03      	cmp	r3, #3
 8007170:	d903      	bls.n	800717a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	220d      	movs	r2, #13
 8007176:	701a      	strb	r2, [r3, #0]
      break;
 8007178:	e082      	b.n	8007280 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	795b      	ldrb	r3, [r3, #5]
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 feb1 	bl	8007ee8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	791b      	ldrb	r3, [r3, #4]
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 feab 	bl	8007ee8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	701a      	strb	r2, [r3, #0]
      break;
 800719e:	e06f      	b.n	8007280 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d019      	beq.n	80071de <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071b6:	23ff      	movs	r3, #255	; 0xff
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f949 	bl	8007450 <USBH_Get_StringDesc>
 80071be:	4603      	mov	r3, r0
 80071c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d103      	bne.n	80071d0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2206      	movs	r2, #6
 80071cc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80071ce:	e059      	b.n	8007284 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d156      	bne.n	8007284 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2206      	movs	r2, #6
 80071da:	705a      	strb	r2, [r3, #1]
      break;
 80071dc:	e052      	b.n	8007284 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2206      	movs	r2, #6
 80071e2:	705a      	strb	r2, [r3, #1]
      break;
 80071e4:	e04e      	b.n	8007284 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d019      	beq.n	8007224 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80071fc:	23ff      	movs	r3, #255	; 0xff
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f926 	bl	8007450 <USBH_Get_StringDesc>
 8007204:	4603      	mov	r3, r0
 8007206:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007208:	7bbb      	ldrb	r3, [r7, #14]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d103      	bne.n	8007216 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2207      	movs	r2, #7
 8007212:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007214:	e038      	b.n	8007288 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	2b03      	cmp	r3, #3
 800721a:	d135      	bne.n	8007288 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2207      	movs	r2, #7
 8007220:	705a      	strb	r2, [r3, #1]
      break;
 8007222:	e031      	b.n	8007288 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2207      	movs	r2, #7
 8007228:	705a      	strb	r2, [r3, #1]
      break;
 800722a:	e02d      	b.n	8007288 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007232:	2b00      	cmp	r3, #0
 8007234:	d017      	beq.n	8007266 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007242:	23ff      	movs	r3, #255	; 0xff
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f903 	bl	8007450 <USBH_Get_StringDesc>
 800724a:	4603      	mov	r3, r0
 800724c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007258:	e018      	b.n	800728c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	2b03      	cmp	r3, #3
 800725e:	d115      	bne.n	800728c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	73fb      	strb	r3, [r7, #15]
      break;
 8007264:	e012      	b.n	800728c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	73fb      	strb	r3, [r7, #15]
      break;
 800726a:	e00f      	b.n	800728c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800726c:	bf00      	nop
 800726e:	e00e      	b.n	800728e <USBH_HandleEnum+0x3be>
      break;
 8007270:	bf00      	nop
 8007272:	e00c      	b.n	800728e <USBH_HandleEnum+0x3be>
      break;
 8007274:	bf00      	nop
 8007276:	e00a      	b.n	800728e <USBH_HandleEnum+0x3be>
      break;
 8007278:	bf00      	nop
 800727a:	e008      	b.n	800728e <USBH_HandleEnum+0x3be>
      break;
 800727c:	bf00      	nop
 800727e:	e006      	b.n	800728e <USBH_HandleEnum+0x3be>
      break;
 8007280:	bf00      	nop
 8007282:	e004      	b.n	800728e <USBH_HandleEnum+0x3be>
      break;
 8007284:	bf00      	nop
 8007286:	e002      	b.n	800728e <USBH_HandleEnum+0x3be>
      break;
 8007288:	bf00      	nop
 800728a:	e000      	b.n	800728e <USBH_HandleEnum+0x3be>
      break;
 800728c:	bf00      	nop
  }
  return Status;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f804 	bl	80072da <USBH_HandleSof>
}
 80072d2:	bf00      	nop
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b0b      	cmp	r3, #11
 80072ea:	d10a      	bne.n	8007302 <USBH_HandleSof+0x28>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	4798      	blx	r3
  }
}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800731a:	bf00      	nop
}
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007336:	bf00      	nop
}
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 ff56 	bl	8008242 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	791b      	ldrb	r3, [r3, #4]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fda3 	bl	8007ee8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	795b      	ldrb	r3, [r3, #5]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fd9d 	bl	8007ee8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af02      	add	r7, sp, #8
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	4613      	mov	r3, r2
 80073d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073d6:	2100      	movs	r1, #0
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f864 	bl	80074a6 <USBH_GetDescriptor>
 80073de:	4603      	mov	r3, r0
 80073e0:	73fb      	strb	r3, [r7, #15]
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f203 3026 	addw	r0, r3, #806	; 0x326
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80073f4:	78fa      	ldrb	r2, [r7, #3]
 80073f6:	b292      	uxth	r2, r2
 80073f8:	4619      	mov	r1, r3
 80073fa:	f000 f918 	bl	800762e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af02      	add	r7, sp, #8
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	331c      	adds	r3, #28
 8007418:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800741a:	887b      	ldrh	r3, [r7, #2]
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007424:	2100      	movs	r1, #0
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f83d 	bl	80074a6 <USBH_GetDescriptor>
 800742c:	4603      	mov	r3, r0
 800742e:	72fb      	strb	r3, [r7, #11]
 8007430:	7afb      	ldrb	r3, [r7, #11]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d107      	bne.n	8007446 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800743c:	887a      	ldrh	r2, [r7, #2]
 800743e:	68f9      	ldr	r1, [r7, #12]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 f964 	bl	800770e <USBH_ParseCfgDesc>
  }

  return status;
 8007446:	7afb      	ldrb	r3, [r7, #11]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af02      	add	r7, sp, #8
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	607a      	str	r2, [r7, #4]
 800745a:	461a      	mov	r2, r3
 800745c:	460b      	mov	r3, r1
 800745e:	72fb      	strb	r3, [r7, #11]
 8007460:	4613      	mov	r3, r2
 8007462:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007464:	7afb      	ldrb	r3, [r7, #11]
 8007466:	b29b      	uxth	r3, r3
 8007468:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800746c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007474:	893b      	ldrh	r3, [r7, #8]
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	460b      	mov	r3, r1
 800747a:	2100      	movs	r1, #0
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 f812 	bl	80074a6 <USBH_GetDescriptor>
 8007482:	4603      	mov	r3, r0
 8007484:	75fb      	strb	r3, [r7, #23]
 8007486:	7dfb      	ldrb	r3, [r7, #23]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d107      	bne.n	800749c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007492:	893a      	ldrh	r2, [r7, #8]
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fa37 	bl	800790a <USBH_ParseStringDesc>
  }

  return status;
 800749c:	7dfb      	ldrb	r3, [r7, #23]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	607b      	str	r3, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	72fb      	strb	r3, [r7, #11]
 80074b4:	4613      	mov	r3, r2
 80074b6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	789b      	ldrb	r3, [r3, #2]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d11c      	bne.n	80074fa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2206      	movs	r2, #6
 80074d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	893a      	ldrh	r2, [r7, #8]
 80074d6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80074d8:	893b      	ldrh	r3, [r7, #8]
 80074da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80074de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074e2:	d104      	bne.n	80074ee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f240 4209 	movw	r2, #1033	; 0x409
 80074ea:	829a      	strh	r2, [r3, #20]
 80074ec:	e002      	b.n	80074f4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8b3a      	ldrh	r2, [r7, #24]
 80074f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80074fa:	8b3b      	ldrh	r3, [r7, #24]
 80074fc:	461a      	mov	r2, r3
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 fa50 	bl	80079a6 <USBH_CtlReq>
 8007506:	4603      	mov	r3, r0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	789b      	ldrb	r3, [r3, #2]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d10f      	bne.n	8007544 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2205      	movs	r2, #5
 800752e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007530:	78fb      	ldrb	r3, [r7, #3]
 8007532:	b29a      	uxth	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007544:	2200      	movs	r2, #0
 8007546:	2100      	movs	r1, #0
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fa2c 	bl	80079a6 <USBH_CtlReq>
 800754e:	4603      	mov	r3, r0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	789b      	ldrb	r3, [r3, #2]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d10e      	bne.n	800758a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2209      	movs	r2, #9
 8007576:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	887a      	ldrh	r2, [r7, #2]
 800757c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800758a:	2200      	movs	r2, #0
 800758c:	2100      	movs	r1, #0
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fa09 	bl	80079a6 <USBH_CtlReq>
 8007594:	4603      	mov	r3, r0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	789b      	ldrb	r3, [r3, #2]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d10f      	bne.n	80075d2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2203      	movs	r2, #3
 80075bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80075be:	78fb      	ldrb	r3, [r7, #3]
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80075d2:	2200      	movs	r2, #0
 80075d4:	2100      	movs	r1, #0
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f9e5 	bl	80079a6 <USBH_CtlReq>
 80075dc:	4603      	mov	r3, r0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b082      	sub	sp, #8
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	460b      	mov	r3, r1
 80075f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	789b      	ldrb	r3, [r3, #2]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d10f      	bne.n	800761a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2202      	movs	r2, #2
 80075fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	b29a      	uxth	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800761a:	2200      	movs	r2, #0
 800761c:	2100      	movs	r1, #0
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9c1 	bl	80079a6 <USBH_CtlReq>
 8007624:	4603      	mov	r3, r0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800762e:	b480      	push	{r7}
 8007630:	b085      	sub	sp, #20
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	4613      	mov	r3, r2
 800763a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	781a      	ldrb	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	785a      	ldrb	r2, [r3, #1]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	3302      	adds	r3, #2
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	b29a      	uxth	r2, r3
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	3303      	adds	r3, #3
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	b29b      	uxth	r3, r3
 8007660:	4313      	orrs	r3, r2
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	791a      	ldrb	r2, [r3, #4]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	795a      	ldrb	r2, [r3, #5]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	799a      	ldrb	r2, [r3, #6]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	79da      	ldrb	r2, [r3, #7]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007688:	88fb      	ldrh	r3, [r7, #6]
 800768a:	2b08      	cmp	r3, #8
 800768c:	d939      	bls.n	8007702 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	3308      	adds	r3, #8
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	b29a      	uxth	r2, r3
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	3309      	adds	r3, #9
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	4313      	orrs	r3, r2
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	330a      	adds	r3, #10
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	330b      	adds	r3, #11
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	021b      	lsls	r3, r3, #8
 80076bc:	b29b      	uxth	r3, r3
 80076be:	4313      	orrs	r3, r2
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	330c      	adds	r3, #12
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	330d      	adds	r3, #13
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	021b      	lsls	r3, r3, #8
 80076d8:	b29b      	uxth	r3, r3
 80076da:	4313      	orrs	r3, r2
 80076dc:	b29a      	uxth	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	7b9a      	ldrb	r2, [r3, #14]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	7bda      	ldrb	r2, [r3, #15]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	7c1a      	ldrb	r2, [r3, #16]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	7c5a      	ldrb	r2, [r3, #17]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	745a      	strb	r2, [r3, #17]
  }
}
 8007702:	bf00      	nop
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b08a      	sub	sp, #40	; 0x28
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	4613      	mov	r3, r2
 800771a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	781a      	ldrb	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	785a      	ldrb	r2, [r3, #1]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	3302      	adds	r3, #2
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	b29a      	uxth	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	3303      	adds	r3, #3
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	b29b      	uxth	r3, r3
 8007750:	021b      	lsls	r3, r3, #8
 8007752:	b29b      	uxth	r3, r3
 8007754:	4313      	orrs	r3, r2
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	791a      	ldrb	r2, [r3, #4]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	795a      	ldrb	r2, [r3, #5]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	799a      	ldrb	r2, [r3, #6]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	79da      	ldrb	r2, [r3, #7]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	7a1a      	ldrb	r2, [r3, #8]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	2b09      	cmp	r3, #9
 8007788:	d95f      	bls.n	800784a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800778a:	2309      	movs	r3, #9
 800778c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800778e:	2300      	movs	r3, #0
 8007790:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007792:	e051      	b.n	8007838 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007794:	f107 0316 	add.w	r3, r7, #22
 8007798:	4619      	mov	r1, r3
 800779a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800779c:	f000 f8e8 	bl	8007970 <USBH_GetNextDesc>
 80077a0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d146      	bne.n	8007838 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80077aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ae:	221a      	movs	r2, #26
 80077b0:	fb02 f303 	mul.w	r3, r2, r3
 80077b4:	3308      	adds	r3, #8
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	4413      	add	r3, r2
 80077ba:	3302      	adds	r3, #2
 80077bc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80077be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077c0:	69f8      	ldr	r0, [r7, #28]
 80077c2:	f000 f846 	bl	8007852 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80077d0:	e022      	b.n	8007818 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80077d2:	f107 0316 	add.w	r3, r7, #22
 80077d6:	4619      	mov	r1, r3
 80077d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077da:	f000 f8c9 	bl	8007970 <USBH_GetNextDesc>
 80077de:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	785b      	ldrb	r3, [r3, #1]
 80077e4:	2b05      	cmp	r3, #5
 80077e6:	d117      	bne.n	8007818 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80077e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80077f0:	3201      	adds	r2, #1
 80077f2:	00d2      	lsls	r2, r2, #3
 80077f4:	211a      	movs	r1, #26
 80077f6:	fb01 f303 	mul.w	r3, r1, r3
 80077fa:	4413      	add	r3, r2
 80077fc:	3308      	adds	r3, #8
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4413      	add	r3, r2
 8007802:	3304      	adds	r3, #4
 8007804:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007808:	69b8      	ldr	r0, [r7, #24]
 800780a:	f000 f851 	bl	80078b0 <USBH_ParseEPDesc>
            ep_ix++;
 800780e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007812:	3301      	adds	r3, #1
 8007814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	791b      	ldrb	r3, [r3, #4]
 800781c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007820:	429a      	cmp	r2, r3
 8007822:	d204      	bcs.n	800782e <USBH_ParseCfgDesc+0x120>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	885a      	ldrh	r2, [r3, #2]
 8007828:	8afb      	ldrh	r3, [r7, #22]
 800782a:	429a      	cmp	r2, r3
 800782c:	d8d1      	bhi.n	80077d2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800782e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007832:	3301      	adds	r3, #1
 8007834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007838:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800783c:	2b01      	cmp	r3, #1
 800783e:	d804      	bhi.n	800784a <USBH_ParseCfgDesc+0x13c>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	885a      	ldrh	r2, [r3, #2]
 8007844:	8afb      	ldrh	r3, [r7, #22]
 8007846:	429a      	cmp	r2, r3
 8007848:	d8a4      	bhi.n	8007794 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800784a:	bf00      	nop
 800784c:	3728      	adds	r7, #40	; 0x28
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781a      	ldrb	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	785a      	ldrb	r2, [r3, #1]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	789a      	ldrb	r2, [r3, #2]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	78da      	ldrb	r2, [r3, #3]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	791a      	ldrb	r2, [r3, #4]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	795a      	ldrb	r2, [r3, #5]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	799a      	ldrb	r2, [r3, #6]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	79da      	ldrb	r2, [r3, #7]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	7a1a      	ldrb	r2, [r3, #8]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	721a      	strb	r2, [r3, #8]
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781a      	ldrb	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	785a      	ldrb	r2, [r3, #1]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	789a      	ldrb	r2, [r3, #2]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	78da      	ldrb	r2, [r3, #3]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	3304      	adds	r3, #4
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	3305      	adds	r3, #5
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	4313      	orrs	r3, r2
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	799a      	ldrb	r2, [r3, #6]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	719a      	strb	r2, [r3, #6]
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800790a:	b480      	push	{r7}
 800790c:	b087      	sub	sp, #28
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	4613      	mov	r3, r2
 8007916:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3301      	adds	r3, #1
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b03      	cmp	r3, #3
 8007920:	d120      	bne.n	8007964 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	1e9a      	subs	r2, r3, #2
 8007928:	88fb      	ldrh	r3, [r7, #6]
 800792a:	4293      	cmp	r3, r2
 800792c:	bf28      	it	cs
 800792e:	4613      	movcs	r3, r2
 8007930:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3302      	adds	r3, #2
 8007936:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007938:	2300      	movs	r3, #0
 800793a:	82fb      	strh	r3, [r7, #22]
 800793c:	e00b      	b.n	8007956 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800793e:	8afb      	ldrh	r3, [r7, #22]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	4413      	add	r3, r2
 8007944:	781a      	ldrb	r2, [r3, #0]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	701a      	strb	r2, [r3, #0]
      pdest++;
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	3301      	adds	r3, #1
 800794e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007950:	8afb      	ldrh	r3, [r7, #22]
 8007952:	3302      	adds	r3, #2
 8007954:	82fb      	strh	r3, [r7, #22]
 8007956:	8afa      	ldrh	r2, [r7, #22]
 8007958:	8abb      	ldrh	r3, [r7, #20]
 800795a:	429a      	cmp	r2, r3
 800795c:	d3ef      	bcc.n	800793e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2200      	movs	r2, #0
 8007962:	701a      	strb	r2, [r3, #0]
  }
}
 8007964:	bf00      	nop
 8007966:	371c      	adds	r7, #28
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	881a      	ldrh	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	4413      	add	r3, r2
 8007986:	b29a      	uxth	r2, r3
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4413      	add	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007998:	68fb      	ldr	r3, [r7, #12]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b086      	sub	sp, #24
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	4613      	mov	r3, r2
 80079b2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80079b4:	2301      	movs	r3, #1
 80079b6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	789b      	ldrb	r3, [r3, #2]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d002      	beq.n	80079c6 <USBH_CtlReq+0x20>
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d00f      	beq.n	80079e4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80079c4:	e027      	b.n	8007a16 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	88fa      	ldrh	r2, [r7, #6]
 80079d0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2202      	movs	r2, #2
 80079dc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80079de:	2301      	movs	r3, #1
 80079e0:	75fb      	strb	r3, [r7, #23]
      break;
 80079e2:	e018      	b.n	8007a16 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 f81b 	bl	8007a20 <USBH_HandleControl>
 80079ea:	4603      	mov	r3, r0
 80079ec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <USBH_CtlReq+0x54>
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d106      	bne.n	8007a08 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	761a      	strb	r2, [r3, #24]
      break;
 8007a06:	e005      	b.n	8007a14 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d102      	bne.n	8007a14 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	709a      	strb	r2, [r3, #2]
      break;
 8007a14:	bf00      	nop
  }
  return status;
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	7e1b      	ldrb	r3, [r3, #24]
 8007a34:	3b01      	subs	r3, #1
 8007a36:	2b0a      	cmp	r3, #10
 8007a38:	f200 8156 	bhi.w	8007ce8 <USBH_HandleControl+0x2c8>
 8007a3c:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <USBH_HandleControl+0x24>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a71 	.word	0x08007a71
 8007a48:	08007a8b 	.word	0x08007a8b
 8007a4c:	08007af5 	.word	0x08007af5
 8007a50:	08007b1b 	.word	0x08007b1b
 8007a54:	08007b53 	.word	0x08007b53
 8007a58:	08007b7d 	.word	0x08007b7d
 8007a5c:	08007bcf 	.word	0x08007bcf
 8007a60:	08007bf1 	.word	0x08007bf1
 8007a64:	08007c2d 	.word	0x08007c2d
 8007a68:	08007c53 	.word	0x08007c53
 8007a6c:	08007c91 	.word	0x08007c91
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f103 0110 	add.w	r1, r3, #16
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	795b      	ldrb	r3, [r3, #5]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f943 	bl	8007d08 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2202      	movs	r2, #2
 8007a86:	761a      	strb	r2, [r3, #24]
      break;
 8007a88:	e139      	b.n	8007cfe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	795b      	ldrb	r3, [r3, #5]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fcc5 	bl	8008420 <USBH_LL_GetURBState>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d11e      	bne.n	8007ade <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7c1b      	ldrb	r3, [r3, #16]
 8007aa4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007aa8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	8adb      	ldrh	r3, [r3, #22]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007ab2:	7b7b      	ldrb	r3, [r7, #13]
 8007ab4:	2b80      	cmp	r3, #128	; 0x80
 8007ab6:	d103      	bne.n	8007ac0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2203      	movs	r2, #3
 8007abc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007abe:	e115      	b.n	8007cec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2205      	movs	r2, #5
 8007ac4:	761a      	strb	r2, [r3, #24]
      break;
 8007ac6:	e111      	b.n	8007cec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007ac8:	7b7b      	ldrb	r3, [r7, #13]
 8007aca:	2b80      	cmp	r3, #128	; 0x80
 8007acc:	d103      	bne.n	8007ad6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2209      	movs	r2, #9
 8007ad2:	761a      	strb	r2, [r3, #24]
      break;
 8007ad4:	e10a      	b.n	8007cec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2207      	movs	r2, #7
 8007ada:	761a      	strb	r2, [r3, #24]
      break;
 8007adc:	e106      	b.n	8007cec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b04      	cmp	r3, #4
 8007ae2:	d003      	beq.n	8007aec <USBH_HandleControl+0xcc>
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	f040 8100 	bne.w	8007cec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	220b      	movs	r2, #11
 8007af0:	761a      	strb	r2, [r3, #24]
      break;
 8007af2:	e0fb      	b.n	8007cec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6899      	ldr	r1, [r3, #8]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	899a      	ldrh	r2, [r3, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	791b      	ldrb	r3, [r3, #4]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f93a 	bl	8007d86 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2204      	movs	r2, #4
 8007b16:	761a      	strb	r2, [r3, #24]
      break;
 8007b18:	e0f1      	b.n	8007cfe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	791b      	ldrb	r3, [r3, #4]
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fc7d 	bl	8008420 <USBH_LL_GetURBState>
 8007b26:	4603      	mov	r3, r0
 8007b28:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d102      	bne.n	8007b36 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2209      	movs	r2, #9
 8007b34:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b05      	cmp	r3, #5
 8007b3a:	d102      	bne.n	8007b42 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b40:	e0d6      	b.n	8007cf0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	f040 80d3 	bne.w	8007cf0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	220b      	movs	r2, #11
 8007b4e:	761a      	strb	r2, [r3, #24]
      break;
 8007b50:	e0ce      	b.n	8007cf0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6899      	ldr	r1, [r3, #8]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	899a      	ldrh	r2, [r3, #12]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	795b      	ldrb	r3, [r3, #5]
 8007b5e:	2001      	movs	r0, #1
 8007b60:	9000      	str	r0, [sp, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f8ea 	bl	8007d3c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2206      	movs	r2, #6
 8007b78:	761a      	strb	r2, [r3, #24]
      break;
 8007b7a:	e0c0      	b.n	8007cfe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	795b      	ldrb	r3, [r3, #5]
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fc4c 	bl	8008420 <USBH_LL_GetURBState>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d103      	bne.n	8007b9a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2207      	movs	r2, #7
 8007b96:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b98:	e0ac      	b.n	8007cf4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	2b05      	cmp	r3, #5
 8007b9e:	d105      	bne.n	8007bac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	220c      	movs	r2, #12
 8007ba4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8007baa:	e0a3      	b.n	8007cf4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d103      	bne.n	8007bba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2205      	movs	r2, #5
 8007bb6:	761a      	strb	r2, [r3, #24]
      break;
 8007bb8:	e09c      	b.n	8007cf4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	f040 8099 	bne.w	8007cf4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	220b      	movs	r2, #11
 8007bc6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007bc8:	2302      	movs	r3, #2
 8007bca:	73fb      	strb	r3, [r7, #15]
      break;
 8007bcc:	e092      	b.n	8007cf4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	791b      	ldrb	r3, [r3, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f8d5 	bl	8007d86 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2208      	movs	r2, #8
 8007bec:	761a      	strb	r2, [r3, #24]

      break;
 8007bee:	e086      	b.n	8007cfe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	791b      	ldrb	r3, [r3, #4]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fc12 	bl	8008420 <USBH_LL_GetURBState>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d105      	bne.n	8007c12 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	220d      	movs	r2, #13
 8007c0a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c10:	e072      	b.n	8007cf8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d103      	bne.n	8007c20 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	220b      	movs	r2, #11
 8007c1c:	761a      	strb	r2, [r3, #24]
      break;
 8007c1e:	e06b      	b.n	8007cf8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	2b05      	cmp	r3, #5
 8007c24:	d168      	bne.n	8007cf8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007c26:	2303      	movs	r3, #3
 8007c28:	73fb      	strb	r3, [r7, #15]
      break;
 8007c2a:	e065      	b.n	8007cf8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	795b      	ldrb	r3, [r3, #5]
 8007c30:	2201      	movs	r2, #1
 8007c32:	9200      	str	r2, [sp, #0]
 8007c34:	2200      	movs	r2, #0
 8007c36:	2100      	movs	r1, #0
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f87f 	bl	8007d3c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	220a      	movs	r2, #10
 8007c4e:	761a      	strb	r2, [r3, #24]
      break;
 8007c50:	e055      	b.n	8007cfe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	795b      	ldrb	r3, [r3, #5]
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fbe1 	bl	8008420 <USBH_LL_GetURBState>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d105      	bne.n	8007c74 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	220d      	movs	r2, #13
 8007c70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c72:	e043      	b.n	8007cfc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d103      	bne.n	8007c82 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2209      	movs	r2, #9
 8007c7e:	761a      	strb	r2, [r3, #24]
      break;
 8007c80:	e03c      	b.n	8007cfc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d139      	bne.n	8007cfc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	220b      	movs	r2, #11
 8007c8c:	761a      	strb	r2, [r3, #24]
      break;
 8007c8e:	e035      	b.n	8007cfc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	7e5b      	ldrb	r3, [r3, #25]
 8007c94:	3301      	adds	r3, #1
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	765a      	strb	r2, [r3, #25]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	7e5b      	ldrb	r3, [r3, #25]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d806      	bhi.n	8007cb2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007cb0:	e025      	b.n	8007cfe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007cb8:	2106      	movs	r1, #6
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	795b      	ldrb	r3, [r3, #5]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f90c 	bl	8007ee8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	791b      	ldrb	r3, [r3, #4]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f906 	bl	8007ee8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce6:	e00a      	b.n	8007cfe <USBH_HandleControl+0x2de>

    default:
      break;
 8007ce8:	bf00      	nop
 8007cea:	e008      	b.n	8007cfe <USBH_HandleControl+0x2de>
      break;
 8007cec:	bf00      	nop
 8007cee:	e006      	b.n	8007cfe <USBH_HandleControl+0x2de>
      break;
 8007cf0:	bf00      	nop
 8007cf2:	e004      	b.n	8007cfe <USBH_HandleControl+0x2de>
      break;
 8007cf4:	bf00      	nop
 8007cf6:	e002      	b.n	8007cfe <USBH_HandleControl+0x2de>
      break;
 8007cf8:	bf00      	nop
 8007cfa:	e000      	b.n	8007cfe <USBH_HandleControl+0x2de>
      break;
 8007cfc:	bf00      	nop
  }

  return status;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af04      	add	r7, sp, #16
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	4613      	mov	r3, r2
 8007d14:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d16:	79f9      	ldrb	r1, [r7, #7]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9303      	str	r3, [sp, #12]
 8007d1c:	2308      	movs	r3, #8
 8007d1e:	9302      	str	r3, [sp, #8]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	9301      	str	r3, [sp, #4]
 8007d24:	2300      	movs	r3, #0
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 fb46 	bl	80083be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af04      	add	r7, sp, #16
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	4611      	mov	r1, r2
 8007d48:	461a      	mov	r2, r3
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	80fb      	strh	r3, [r7, #6]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d60:	7979      	ldrb	r1, [r7, #5]
 8007d62:	7e3b      	ldrb	r3, [r7, #24]
 8007d64:	9303      	str	r3, [sp, #12]
 8007d66:	88fb      	ldrh	r3, [r7, #6]
 8007d68:	9302      	str	r3, [sp, #8]
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	2301      	movs	r3, #1
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	2300      	movs	r3, #0
 8007d74:	2200      	movs	r2, #0
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 fb21 	bl	80083be <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b088      	sub	sp, #32
 8007d8a:	af04      	add	r7, sp, #16
 8007d8c:	60f8      	str	r0, [r7, #12]
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	4611      	mov	r1, r2
 8007d92:	461a      	mov	r2, r3
 8007d94:	460b      	mov	r3, r1
 8007d96:	80fb      	strh	r3, [r7, #6]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d9c:	7979      	ldrb	r1, [r7, #5]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	9303      	str	r3, [sp, #12]
 8007da2:	88fb      	ldrh	r3, [r7, #6]
 8007da4:	9302      	str	r3, [sp, #8]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	9301      	str	r3, [sp, #4]
 8007daa:	2301      	movs	r3, #1
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	2300      	movs	r3, #0
 8007db0:	2201      	movs	r2, #1
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f000 fb03 	bl	80083be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007db8:	2300      	movs	r3, #0

}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b088      	sub	sp, #32
 8007dc6:	af04      	add	r7, sp, #16
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	4611      	mov	r1, r2
 8007dce:	461a      	mov	r2, r3
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	80fb      	strh	r3, [r7, #6]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007de6:	7979      	ldrb	r1, [r7, #5]
 8007de8:	7e3b      	ldrb	r3, [r7, #24]
 8007dea:	9303      	str	r3, [sp, #12]
 8007dec:	88fb      	ldrh	r3, [r7, #6]
 8007dee:	9302      	str	r3, [sp, #8]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	9301      	str	r3, [sp, #4]
 8007df4:	2301      	movs	r3, #1
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	2302      	movs	r3, #2
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 fade 	bl	80083be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af04      	add	r7, sp, #16
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	4611      	mov	r1, r2
 8007e18:	461a      	mov	r2, r3
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	80fb      	strh	r3, [r7, #6]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e22:	7979      	ldrb	r1, [r7, #5]
 8007e24:	2300      	movs	r3, #0
 8007e26:	9303      	str	r3, [sp, #12]
 8007e28:	88fb      	ldrh	r3, [r7, #6]
 8007e2a:	9302      	str	r3, [sp, #8]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	2301      	movs	r3, #1
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	2302      	movs	r3, #2
 8007e36:	2201      	movs	r2, #1
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f000 fac0 	bl	80083be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af04      	add	r7, sp, #16
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	4608      	mov	r0, r1
 8007e52:	4611      	mov	r1, r2
 8007e54:	461a      	mov	r2, r3
 8007e56:	4603      	mov	r3, r0
 8007e58:	70fb      	strb	r3, [r7, #3]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	70bb      	strb	r3, [r7, #2]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007e62:	7878      	ldrb	r0, [r7, #1]
 8007e64:	78ba      	ldrb	r2, [r7, #2]
 8007e66:	78f9      	ldrb	r1, [r7, #3]
 8007e68:	8b3b      	ldrh	r3, [r7, #24]
 8007e6a:	9302      	str	r3, [sp, #8]
 8007e6c:	7d3b      	ldrb	r3, [r7, #20]
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	7c3b      	ldrb	r3, [r7, #16]
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	4603      	mov	r3, r0
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fa53 	bl	8008322 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007e92:	78fb      	ldrb	r3, [r7, #3]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fa72 	bl	8008380 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f836 	bl	8007f24 <USBH_GetFreePipe>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007ebc:	89fb      	ldrh	r3, [r7, #14]
 8007ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d00a      	beq.n	8007edc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	89fb      	ldrh	r3, [r7, #14]
 8007eca:	f003 030f 	and.w	r3, r3, #15
 8007ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	33e0      	adds	r3, #224	; 0xe0
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	440b      	add	r3, r1
 8007eda:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007edc:	89fb      	ldrh	r3, [r7, #14]
 8007ede:	b2db      	uxtb	r3, r3
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	2b0a      	cmp	r3, #10
 8007ef8:	d80d      	bhi.n	8007f16 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	33e0      	adds	r3, #224	; 0xe0
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	33e0      	adds	r3, #224	; 0xe0
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	440b      	add	r3, r1
 8007f14:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]
 8007f34:	e00f      	b.n	8007f56 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	33e0      	adds	r3, #224	; 0xe0
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d102      	bne.n	8007f50 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	e007      	b.n	8007f60 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	3301      	adds	r3, #1
 8007f54:	73fb      	strb	r3, [r7, #15]
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	2b0a      	cmp	r3, #10
 8007f5a:	d9ec      	bls.n	8007f36 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007f70:	2201      	movs	r2, #1
 8007f72:	490e      	ldr	r1, [pc, #56]	; (8007fac <MX_USB_HOST_Init+0x40>)
 8007f74:	480e      	ldr	r0, [pc, #56]	; (8007fb0 <MX_USB_HOST_Init+0x44>)
 8007f76:	f7fe fca1 	bl	80068bc <USBH_Init>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007f80:	f7f8 fd4c 	bl	8000a1c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007f84:	490b      	ldr	r1, [pc, #44]	; (8007fb4 <MX_USB_HOST_Init+0x48>)
 8007f86:	480a      	ldr	r0, [pc, #40]	; (8007fb0 <MX_USB_HOST_Init+0x44>)
 8007f88:	f7fe fd26 	bl	80069d8 <USBH_RegisterClass>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007f92:	f7f8 fd43 	bl	8000a1c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007f96:	4806      	ldr	r0, [pc, #24]	; (8007fb0 <MX_USB_HOST_Init+0x44>)
 8007f98:	f7fe fdaa 	bl	8006af0 <USBH_Start>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007fa2:	f7f8 fd3b 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007fa6:	bf00      	nop
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	08007fcd 	.word	0x08007fcd
 8007fb0:	200001fc 	.word	0x200001fc
 8007fb4:	2000000c 	.word	0x2000000c

08007fb8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007fbc:	4802      	ldr	r0, [pc, #8]	; (8007fc8 <MX_USB_HOST_Process+0x10>)
 8007fbe:	f7fe fda7 	bl	8006b10 <USBH_Process>
}
 8007fc2:	bf00      	nop
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	200001fc 	.word	0x200001fc

08007fcc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d819      	bhi.n	8008014 <USBH_UserProcess+0x48>
 8007fe0:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <USBH_UserProcess+0x1c>)
 8007fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe6:	bf00      	nop
 8007fe8:	08008015 	.word	0x08008015
 8007fec:	08008005 	.word	0x08008005
 8007ff0:	08008015 	.word	0x08008015
 8007ff4:	0800800d 	.word	0x0800800d
 8007ff8:	08007ffd 	.word	0x08007ffd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007ffc:	4b09      	ldr	r3, [pc, #36]	; (8008024 <USBH_UserProcess+0x58>)
 8007ffe:	2203      	movs	r2, #3
 8008000:	701a      	strb	r2, [r3, #0]
  break;
 8008002:	e008      	b.n	8008016 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008004:	4b07      	ldr	r3, [pc, #28]	; (8008024 <USBH_UserProcess+0x58>)
 8008006:	2202      	movs	r2, #2
 8008008:	701a      	strb	r2, [r3, #0]
  break;
 800800a:	e004      	b.n	8008016 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <USBH_UserProcess+0x58>)
 800800e:	2201      	movs	r2, #1
 8008010:	701a      	strb	r2, [r3, #0]
  break;
 8008012:	e000      	b.n	8008016 <USBH_UserProcess+0x4a>

  default:
  break;
 8008014:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	200000b0 	.word	0x200000b0

08008028 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08a      	sub	sp, #40	; 0x28
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008030:	f107 0314 	add.w	r3, r7, #20
 8008034:	2200      	movs	r2, #0
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	605a      	str	r2, [r3, #4]
 800803a:	609a      	str	r2, [r3, #8]
 800803c:	60da      	str	r2, [r3, #12]
 800803e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008048:	d147      	bne.n	80080da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800804a:	2300      	movs	r3, #0
 800804c:	613b      	str	r3, [r7, #16]
 800804e:	4b25      	ldr	r3, [pc, #148]	; (80080e4 <HAL_HCD_MspInit+0xbc>)
 8008050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008052:	4a24      	ldr	r2, [pc, #144]	; (80080e4 <HAL_HCD_MspInit+0xbc>)
 8008054:	f043 0301 	orr.w	r3, r3, #1
 8008058:	6313      	str	r3, [r2, #48]	; 0x30
 800805a:	4b22      	ldr	r3, [pc, #136]	; (80080e4 <HAL_HCD_MspInit+0xbc>)
 800805c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	613b      	str	r3, [r7, #16]
 8008064:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800806a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800806c:	2300      	movs	r3, #0
 800806e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008070:	2300      	movs	r3, #0
 8008072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008074:	f107 0314 	add.w	r3, r7, #20
 8008078:	4619      	mov	r1, r3
 800807a:	481b      	ldr	r0, [pc, #108]	; (80080e8 <HAL_HCD_MspInit+0xc0>)
 800807c:	f7f9 f89e 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008080:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008086:	2302      	movs	r3, #2
 8008088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800808a:	2300      	movs	r3, #0
 800808c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800808e:	2300      	movs	r3, #0
 8008090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008092:	230a      	movs	r3, #10
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008096:	f107 0314 	add.w	r3, r7, #20
 800809a:	4619      	mov	r1, r3
 800809c:	4812      	ldr	r0, [pc, #72]	; (80080e8 <HAL_HCD_MspInit+0xc0>)
 800809e:	f7f9 f88d 	bl	80011bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080a2:	4b10      	ldr	r3, [pc, #64]	; (80080e4 <HAL_HCD_MspInit+0xbc>)
 80080a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a6:	4a0f      	ldr	r2, [pc, #60]	; (80080e4 <HAL_HCD_MspInit+0xbc>)
 80080a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ac:	6353      	str	r3, [r2, #52]	; 0x34
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	4b0c      	ldr	r3, [pc, #48]	; (80080e4 <HAL_HCD_MspInit+0xbc>)
 80080b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b6:	4a0b      	ldr	r2, [pc, #44]	; (80080e4 <HAL_HCD_MspInit+0xbc>)
 80080b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080bc:	6453      	str	r3, [r2, #68]	; 0x44
 80080be:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <HAL_HCD_MspInit+0xbc>)
 80080c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80080ca:	2200      	movs	r2, #0
 80080cc:	2100      	movs	r1, #0
 80080ce:	2043      	movs	r0, #67	; 0x43
 80080d0:	f7f9 f83d 	bl	800114e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080d4:	2043      	movs	r0, #67	; 0x43
 80080d6:	f7f9 f856 	bl	8001186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80080da:	bf00      	nop
 80080dc:	3728      	adds	r7, #40	; 0x28
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	40023800 	.word	0x40023800
 80080e8:	40020000 	.word	0x40020000

080080ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7ff f8db 	bl	80072b6 <USBH_LL_IncTimer>
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff f913 	bl	8007342 <USBH_LL_Connect>
}
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008132:	4618      	mov	r0, r3
 8008134:	f7ff f91c 	bl	8007370 <USBH_LL_Disconnect>
}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
 800814c:	4613      	mov	r3, r2
 800814e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff f8cd 	bl	800730a <USBH_LL_PortEnabled>
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff f8cd 	bl	8007326 <USBH_LL_PortDisabled>
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d12a      	bne.n	80081fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80081a6:	4a18      	ldr	r2, [pc, #96]	; (8008208 <USBH_LL_Init+0x74>)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a15      	ldr	r2, [pc, #84]	; (8008208 <USBH_LL_Init+0x74>)
 80081b2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081b6:	4b14      	ldr	r3, [pc, #80]	; (8008208 <USBH_LL_Init+0x74>)
 80081b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80081be:	4b12      	ldr	r3, [pc, #72]	; (8008208 <USBH_LL_Init+0x74>)
 80081c0:	2208      	movs	r2, #8
 80081c2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80081c4:	4b10      	ldr	r3, [pc, #64]	; (8008208 <USBH_LL_Init+0x74>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80081ca:	4b0f      	ldr	r3, [pc, #60]	; (8008208 <USBH_LL_Init+0x74>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80081d0:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <USBH_LL_Init+0x74>)
 80081d2:	2202      	movs	r2, #2
 80081d4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <USBH_LL_Init+0x74>)
 80081d8:	2200      	movs	r2, #0
 80081da:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80081dc:	480a      	ldr	r0, [pc, #40]	; (8008208 <USBH_LL_Init+0x74>)
 80081de:	f7f9 f9a2 	bl	8001526 <HAL_HCD_Init>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80081e8:	f7f8 fc18 	bl	8000a1c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80081ec:	4806      	ldr	r0, [pc, #24]	; (8008208 <USBH_LL_Init+0x74>)
 80081ee:	f7f9 fd7f 	bl	8001cf0 <HAL_HCD_GetCurrentFrame>
 80081f2:	4603      	mov	r3, r0
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7ff f84e 	bl	8007298 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	200005d4 	.word	0x200005d4

0800820c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008222:	4618      	mov	r0, r3
 8008224:	f7f9 fcee 	bl	8001c04 <HAL_HCD_Start>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	4618      	mov	r0, r3
 8008230:	f000 f95c 	bl	80084ec <USBH_Get_USB_Status>
 8008234:	4603      	mov	r3, r0
 8008236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008238:	7bbb      	ldrb	r3, [r7, #14]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008258:	4618      	mov	r0, r3
 800825a:	f7f9 fcf6 	bl	8001c4a <HAL_HCD_Stop>
 800825e:	4603      	mov	r3, r0
 8008260:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	4618      	mov	r0, r3
 8008266:	f000 f941 	bl	80084ec <USBH_Get_USB_Status>
 800826a:	4603      	mov	r3, r0
 800826c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800826e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008280:	2301      	movs	r3, #1
 8008282:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800828a:	4618      	mov	r0, r3
 800828c:	f7f9 fd3e 	bl	8001d0c <HAL_HCD_GetCurrentSpeed>
 8008290:	4603      	mov	r3, r0
 8008292:	2b02      	cmp	r3, #2
 8008294:	d00c      	beq.n	80082b0 <USBH_LL_GetSpeed+0x38>
 8008296:	2b02      	cmp	r3, #2
 8008298:	d80d      	bhi.n	80082b6 <USBH_LL_GetSpeed+0x3e>
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <USBH_LL_GetSpeed+0x2c>
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d003      	beq.n	80082aa <USBH_LL_GetSpeed+0x32>
 80082a2:	e008      	b.n	80082b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80082a4:	2300      	movs	r3, #0
 80082a6:	73fb      	strb	r3, [r7, #15]
    break;
 80082a8:	e008      	b.n	80082bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80082aa:	2301      	movs	r3, #1
 80082ac:	73fb      	strb	r3, [r7, #15]
    break;
 80082ae:	e005      	b.n	80082bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80082b0:	2302      	movs	r3, #2
 80082b2:	73fb      	strb	r3, [r7, #15]
    break;
 80082b4:	e002      	b.n	80082bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80082b6:	2301      	movs	r3, #1
 80082b8:	73fb      	strb	r3, [r7, #15]
    break;
 80082ba:	bf00      	nop
  }
  return  speed;
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082dc:	4618      	mov	r0, r3
 80082de:	f7f9 fcd1 	bl	8001c84 <HAL_HCD_ResetPort>
 80082e2:	4603      	mov	r3, r0
 80082e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 f8ff 	bl	80084ec <USBH_Get_USB_Status>
 80082ee:	4603      	mov	r3, r0
 80082f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800830e:	78fa      	ldrb	r2, [r7, #3]
 8008310:	4611      	mov	r1, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f7f9 fcd8 	bl	8001cc8 <HAL_HCD_HC_GetXferCount>
 8008318:	4603      	mov	r3, r0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008322:	b590      	push	{r4, r7, lr}
 8008324:	b089      	sub	sp, #36	; 0x24
 8008326:	af04      	add	r7, sp, #16
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	4608      	mov	r0, r1
 800832c:	4611      	mov	r1, r2
 800832e:	461a      	mov	r2, r3
 8008330:	4603      	mov	r3, r0
 8008332:	70fb      	strb	r3, [r7, #3]
 8008334:	460b      	mov	r3, r1
 8008336:	70bb      	strb	r3, [r7, #2]
 8008338:	4613      	mov	r3, r2
 800833a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800834a:	787c      	ldrb	r4, [r7, #1]
 800834c:	78ba      	ldrb	r2, [r7, #2]
 800834e:	78f9      	ldrb	r1, [r7, #3]
 8008350:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008352:	9302      	str	r3, [sp, #8]
 8008354:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	4623      	mov	r3, r4
 8008362:	f7f9 f942 	bl	80015ea <HAL_HCD_HC_Init>
 8008366:	4603      	mov	r3, r0
 8008368:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800836a:	7bfb      	ldrb	r3, [r7, #15]
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f8bd 	bl	80084ec <USBH_Get_USB_Status>
 8008372:	4603      	mov	r3, r0
 8008374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008376:	7bbb      	ldrb	r3, [r7, #14]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	bd90      	pop	{r4, r7, pc}

08008380 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800839a:	78fa      	ldrb	r2, [r7, #3]
 800839c:	4611      	mov	r1, r2
 800839e:	4618      	mov	r0, r3
 80083a0:	f7f9 f9b2 	bl	8001708 <HAL_HCD_HC_Halt>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 f89e 	bl	80084ec <USBH_Get_USB_Status>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80083be:	b590      	push	{r4, r7, lr}
 80083c0:	b089      	sub	sp, #36	; 0x24
 80083c2:	af04      	add	r7, sp, #16
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	4608      	mov	r0, r1
 80083c8:	4611      	mov	r1, r2
 80083ca:	461a      	mov	r2, r3
 80083cc:	4603      	mov	r3, r0
 80083ce:	70fb      	strb	r3, [r7, #3]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70bb      	strb	r3, [r7, #2]
 80083d4:	4613      	mov	r3, r2
 80083d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80083e6:	787c      	ldrb	r4, [r7, #1]
 80083e8:	78ba      	ldrb	r2, [r7, #2]
 80083ea:	78f9      	ldrb	r1, [r7, #3]
 80083ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083f0:	9303      	str	r3, [sp, #12]
 80083f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083f4:	9302      	str	r3, [sp, #8]
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	4623      	mov	r3, r4
 8008402:	f7f9 f9a5 	bl	8001750 <HAL_HCD_HC_SubmitRequest>
 8008406:	4603      	mov	r3, r0
 8008408:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800840a:	7bfb      	ldrb	r3, [r7, #15]
 800840c:	4618      	mov	r0, r3
 800840e:	f000 f86d 	bl	80084ec <USBH_Get_USB_Status>
 8008412:	4603      	mov	r3, r0
 8008414:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008416:	7bbb      	ldrb	r3, [r7, #14]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	bd90      	pop	{r4, r7, pc}

08008420 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008432:	78fa      	ldrb	r2, [r7, #3]
 8008434:	4611      	mov	r1, r2
 8008436:	4618      	mov	r0, r3
 8008438:	f7f9 fc32 	bl	8001ca0 <HAL_HCD_HC_GetURBState>
 800843c:	4603      	mov	r3, r0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	460b      	mov	r3, r1
 8008450:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008458:	2b01      	cmp	r3, #1
 800845a:	d103      	bne.n	8008464 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	4618      	mov	r0, r3
 8008460:	f000 f870 	bl	8008544 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008464:	20c8      	movs	r0, #200	; 0xc8
 8008466:	f7f8 fd73 	bl	8000f50 <HAL_Delay>
  return USBH_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
 8008480:	4613      	mov	r3, r2
 8008482:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800848a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	212c      	movs	r1, #44	; 0x2c
 8008492:	fb01 f303 	mul.w	r3, r1, r3
 8008496:	4413      	add	r3, r2
 8008498:	333b      	adds	r3, #59	; 0x3b
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d009      	beq.n	80084b4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	212c      	movs	r1, #44	; 0x2c
 80084a6:	fb01 f303 	mul.w	r3, r1, r3
 80084aa:	4413      	add	r3, r2
 80084ac:	3354      	adds	r3, #84	; 0x54
 80084ae:	78ba      	ldrb	r2, [r7, #2]
 80084b0:	701a      	strb	r2, [r3, #0]
 80084b2:	e008      	b.n	80084c6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	212c      	movs	r1, #44	; 0x2c
 80084ba:	fb01 f303 	mul.w	r3, r1, r3
 80084be:	4413      	add	r3, r2
 80084c0:	3355      	adds	r3, #85	; 0x55
 80084c2:	78ba      	ldrb	r2, [r7, #2]
 80084c4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7f8 fd37 	bl	8000f50 <HAL_Delay>
}
 80084e2:	bf00      	nop
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d817      	bhi.n	8008530 <USBH_Get_USB_Status+0x44>
 8008500:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <USBH_Get_USB_Status+0x1c>)
 8008502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008506:	bf00      	nop
 8008508:	08008519 	.word	0x08008519
 800850c:	0800851f 	.word	0x0800851f
 8008510:	08008525 	.word	0x08008525
 8008514:	0800852b 	.word	0x0800852b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
    break;
 800851c:	e00b      	b.n	8008536 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800851e:	2302      	movs	r3, #2
 8008520:	73fb      	strb	r3, [r7, #15]
    break;
 8008522:	e008      	b.n	8008536 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008524:	2301      	movs	r3, #1
 8008526:	73fb      	strb	r3, [r7, #15]
    break;
 8008528:	e005      	b.n	8008536 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800852a:	2302      	movs	r3, #2
 800852c:	73fb      	strb	r3, [r7, #15]
    break;
 800852e:	e002      	b.n	8008536 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008530:	2302      	movs	r3, #2
 8008532:	73fb      	strb	r3, [r7, #15]
    break;
 8008534:	bf00      	nop
  }
  return usb_status;
 8008536:	7bfb      	ldrb	r3, [r7, #15]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d102      	bne.n	800855e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008558:	2301      	movs	r3, #1
 800855a:	73fb      	strb	r3, [r7, #15]
 800855c:	e001      	b.n	8008562 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	461a      	mov	r2, r3
 8008566:	2101      	movs	r1, #1
 8008568:	4803      	ldr	r0, [pc, #12]	; (8008578 <MX_DriverVbusFS+0x34>)
 800856a:	f7f8 ffc3 	bl	80014f4 <HAL_GPIO_WritePin>
}
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	40020800 	.word	0x40020800

0800857c <__errno>:
 800857c:	4b01      	ldr	r3, [pc, #4]	; (8008584 <__errno+0x8>)
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	2000002c 	.word	0x2000002c

08008588 <__libc_init_array>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	4d0d      	ldr	r5, [pc, #52]	; (80085c0 <__libc_init_array+0x38>)
 800858c:	4c0d      	ldr	r4, [pc, #52]	; (80085c4 <__libc_init_array+0x3c>)
 800858e:	1b64      	subs	r4, r4, r5
 8008590:	10a4      	asrs	r4, r4, #2
 8008592:	2600      	movs	r6, #0
 8008594:	42a6      	cmp	r6, r4
 8008596:	d109      	bne.n	80085ac <__libc_init_array+0x24>
 8008598:	4d0b      	ldr	r5, [pc, #44]	; (80085c8 <__libc_init_array+0x40>)
 800859a:	4c0c      	ldr	r4, [pc, #48]	; (80085cc <__libc_init_array+0x44>)
 800859c:	f000 f8f8 	bl	8008790 <_init>
 80085a0:	1b64      	subs	r4, r4, r5
 80085a2:	10a4      	asrs	r4, r4, #2
 80085a4:	2600      	movs	r6, #0
 80085a6:	42a6      	cmp	r6, r4
 80085a8:	d105      	bne.n	80085b6 <__libc_init_array+0x2e>
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b0:	4798      	blx	r3
 80085b2:	3601      	adds	r6, #1
 80085b4:	e7ee      	b.n	8008594 <__libc_init_array+0xc>
 80085b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ba:	4798      	blx	r3
 80085bc:	3601      	adds	r6, #1
 80085be:	e7f2      	b.n	80085a6 <__libc_init_array+0x1e>
 80085c0:	080087cc 	.word	0x080087cc
 80085c4:	080087cc 	.word	0x080087cc
 80085c8:	080087cc 	.word	0x080087cc
 80085cc:	080087d0 	.word	0x080087d0

080085d0 <malloc>:
 80085d0:	4b02      	ldr	r3, [pc, #8]	; (80085dc <malloc+0xc>)
 80085d2:	4601      	mov	r1, r0
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	f000 b863 	b.w	80086a0 <_malloc_r>
 80085da:	bf00      	nop
 80085dc:	2000002c 	.word	0x2000002c

080085e0 <free>:
 80085e0:	4b02      	ldr	r3, [pc, #8]	; (80085ec <free+0xc>)
 80085e2:	4601      	mov	r1, r0
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	f000 b80b 	b.w	8008600 <_free_r>
 80085ea:	bf00      	nop
 80085ec:	2000002c 	.word	0x2000002c

080085f0 <memset>:
 80085f0:	4402      	add	r2, r0
 80085f2:	4603      	mov	r3, r0
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d100      	bne.n	80085fa <memset+0xa>
 80085f8:	4770      	bx	lr
 80085fa:	f803 1b01 	strb.w	r1, [r3], #1
 80085fe:	e7f9      	b.n	80085f4 <memset+0x4>

08008600 <_free_r>:
 8008600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008602:	2900      	cmp	r1, #0
 8008604:	d048      	beq.n	8008698 <_free_r+0x98>
 8008606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800860a:	9001      	str	r0, [sp, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	f1a1 0404 	sub.w	r4, r1, #4
 8008612:	bfb8      	it	lt
 8008614:	18e4      	addlt	r4, r4, r3
 8008616:	f000 f8ad 	bl	8008774 <__malloc_lock>
 800861a:	4a20      	ldr	r2, [pc, #128]	; (800869c <_free_r+0x9c>)
 800861c:	9801      	ldr	r0, [sp, #4]
 800861e:	6813      	ldr	r3, [r2, #0]
 8008620:	4615      	mov	r5, r2
 8008622:	b933      	cbnz	r3, 8008632 <_free_r+0x32>
 8008624:	6063      	str	r3, [r4, #4]
 8008626:	6014      	str	r4, [r2, #0]
 8008628:	b003      	add	sp, #12
 800862a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800862e:	f000 b8a7 	b.w	8008780 <__malloc_unlock>
 8008632:	42a3      	cmp	r3, r4
 8008634:	d90b      	bls.n	800864e <_free_r+0x4e>
 8008636:	6821      	ldr	r1, [r4, #0]
 8008638:	1862      	adds	r2, r4, r1
 800863a:	4293      	cmp	r3, r2
 800863c:	bf04      	itt	eq
 800863e:	681a      	ldreq	r2, [r3, #0]
 8008640:	685b      	ldreq	r3, [r3, #4]
 8008642:	6063      	str	r3, [r4, #4]
 8008644:	bf04      	itt	eq
 8008646:	1852      	addeq	r2, r2, r1
 8008648:	6022      	streq	r2, [r4, #0]
 800864a:	602c      	str	r4, [r5, #0]
 800864c:	e7ec      	b.n	8008628 <_free_r+0x28>
 800864e:	461a      	mov	r2, r3
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	b10b      	cbz	r3, 8008658 <_free_r+0x58>
 8008654:	42a3      	cmp	r3, r4
 8008656:	d9fa      	bls.n	800864e <_free_r+0x4e>
 8008658:	6811      	ldr	r1, [r2, #0]
 800865a:	1855      	adds	r5, r2, r1
 800865c:	42a5      	cmp	r5, r4
 800865e:	d10b      	bne.n	8008678 <_free_r+0x78>
 8008660:	6824      	ldr	r4, [r4, #0]
 8008662:	4421      	add	r1, r4
 8008664:	1854      	adds	r4, r2, r1
 8008666:	42a3      	cmp	r3, r4
 8008668:	6011      	str	r1, [r2, #0]
 800866a:	d1dd      	bne.n	8008628 <_free_r+0x28>
 800866c:	681c      	ldr	r4, [r3, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	6053      	str	r3, [r2, #4]
 8008672:	4421      	add	r1, r4
 8008674:	6011      	str	r1, [r2, #0]
 8008676:	e7d7      	b.n	8008628 <_free_r+0x28>
 8008678:	d902      	bls.n	8008680 <_free_r+0x80>
 800867a:	230c      	movs	r3, #12
 800867c:	6003      	str	r3, [r0, #0]
 800867e:	e7d3      	b.n	8008628 <_free_r+0x28>
 8008680:	6825      	ldr	r5, [r4, #0]
 8008682:	1961      	adds	r1, r4, r5
 8008684:	428b      	cmp	r3, r1
 8008686:	bf04      	itt	eq
 8008688:	6819      	ldreq	r1, [r3, #0]
 800868a:	685b      	ldreq	r3, [r3, #4]
 800868c:	6063      	str	r3, [r4, #4]
 800868e:	bf04      	itt	eq
 8008690:	1949      	addeq	r1, r1, r5
 8008692:	6021      	streq	r1, [r4, #0]
 8008694:	6054      	str	r4, [r2, #4]
 8008696:	e7c7      	b.n	8008628 <_free_r+0x28>
 8008698:	b003      	add	sp, #12
 800869a:	bd30      	pop	{r4, r5, pc}
 800869c:	200000b4 	.word	0x200000b4

080086a0 <_malloc_r>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	1ccd      	adds	r5, r1, #3
 80086a4:	f025 0503 	bic.w	r5, r5, #3
 80086a8:	3508      	adds	r5, #8
 80086aa:	2d0c      	cmp	r5, #12
 80086ac:	bf38      	it	cc
 80086ae:	250c      	movcc	r5, #12
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	4606      	mov	r6, r0
 80086b4:	db01      	blt.n	80086ba <_malloc_r+0x1a>
 80086b6:	42a9      	cmp	r1, r5
 80086b8:	d903      	bls.n	80086c2 <_malloc_r+0x22>
 80086ba:	230c      	movs	r3, #12
 80086bc:	6033      	str	r3, [r6, #0]
 80086be:	2000      	movs	r0, #0
 80086c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c2:	f000 f857 	bl	8008774 <__malloc_lock>
 80086c6:	4921      	ldr	r1, [pc, #132]	; (800874c <_malloc_r+0xac>)
 80086c8:	680a      	ldr	r2, [r1, #0]
 80086ca:	4614      	mov	r4, r2
 80086cc:	b99c      	cbnz	r4, 80086f6 <_malloc_r+0x56>
 80086ce:	4f20      	ldr	r7, [pc, #128]	; (8008750 <_malloc_r+0xb0>)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	b923      	cbnz	r3, 80086de <_malloc_r+0x3e>
 80086d4:	4621      	mov	r1, r4
 80086d6:	4630      	mov	r0, r6
 80086d8:	f000 f83c 	bl	8008754 <_sbrk_r>
 80086dc:	6038      	str	r0, [r7, #0]
 80086de:	4629      	mov	r1, r5
 80086e0:	4630      	mov	r0, r6
 80086e2:	f000 f837 	bl	8008754 <_sbrk_r>
 80086e6:	1c43      	adds	r3, r0, #1
 80086e8:	d123      	bne.n	8008732 <_malloc_r+0x92>
 80086ea:	230c      	movs	r3, #12
 80086ec:	6033      	str	r3, [r6, #0]
 80086ee:	4630      	mov	r0, r6
 80086f0:	f000 f846 	bl	8008780 <__malloc_unlock>
 80086f4:	e7e3      	b.n	80086be <_malloc_r+0x1e>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	1b5b      	subs	r3, r3, r5
 80086fa:	d417      	bmi.n	800872c <_malloc_r+0x8c>
 80086fc:	2b0b      	cmp	r3, #11
 80086fe:	d903      	bls.n	8008708 <_malloc_r+0x68>
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	441c      	add	r4, r3
 8008704:	6025      	str	r5, [r4, #0]
 8008706:	e004      	b.n	8008712 <_malloc_r+0x72>
 8008708:	6863      	ldr	r3, [r4, #4]
 800870a:	42a2      	cmp	r2, r4
 800870c:	bf0c      	ite	eq
 800870e:	600b      	streq	r3, [r1, #0]
 8008710:	6053      	strne	r3, [r2, #4]
 8008712:	4630      	mov	r0, r6
 8008714:	f000 f834 	bl	8008780 <__malloc_unlock>
 8008718:	f104 000b 	add.w	r0, r4, #11
 800871c:	1d23      	adds	r3, r4, #4
 800871e:	f020 0007 	bic.w	r0, r0, #7
 8008722:	1ac2      	subs	r2, r0, r3
 8008724:	d0cc      	beq.n	80086c0 <_malloc_r+0x20>
 8008726:	1a1b      	subs	r3, r3, r0
 8008728:	50a3      	str	r3, [r4, r2]
 800872a:	e7c9      	b.n	80086c0 <_malloc_r+0x20>
 800872c:	4622      	mov	r2, r4
 800872e:	6864      	ldr	r4, [r4, #4]
 8008730:	e7cc      	b.n	80086cc <_malloc_r+0x2c>
 8008732:	1cc4      	adds	r4, r0, #3
 8008734:	f024 0403 	bic.w	r4, r4, #3
 8008738:	42a0      	cmp	r0, r4
 800873a:	d0e3      	beq.n	8008704 <_malloc_r+0x64>
 800873c:	1a21      	subs	r1, r4, r0
 800873e:	4630      	mov	r0, r6
 8008740:	f000 f808 	bl	8008754 <_sbrk_r>
 8008744:	3001      	adds	r0, #1
 8008746:	d1dd      	bne.n	8008704 <_malloc_r+0x64>
 8008748:	e7cf      	b.n	80086ea <_malloc_r+0x4a>
 800874a:	bf00      	nop
 800874c:	200000b4 	.word	0x200000b4
 8008750:	200000b8 	.word	0x200000b8

08008754 <_sbrk_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4d06      	ldr	r5, [pc, #24]	; (8008770 <_sbrk_r+0x1c>)
 8008758:	2300      	movs	r3, #0
 800875a:	4604      	mov	r4, r0
 800875c:	4608      	mov	r0, r1
 800875e:	602b      	str	r3, [r5, #0]
 8008760:	f7f8 fb12 	bl	8000d88 <_sbrk>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_sbrk_r+0x1a>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_sbrk_r+0x1a>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	200008d8 	.word	0x200008d8

08008774 <__malloc_lock>:
 8008774:	4801      	ldr	r0, [pc, #4]	; (800877c <__malloc_lock+0x8>)
 8008776:	f000 b809 	b.w	800878c <__retarget_lock_acquire_recursive>
 800877a:	bf00      	nop
 800877c:	200008e0 	.word	0x200008e0

08008780 <__malloc_unlock>:
 8008780:	4801      	ldr	r0, [pc, #4]	; (8008788 <__malloc_unlock+0x8>)
 8008782:	f000 b804 	b.w	800878e <__retarget_lock_release_recursive>
 8008786:	bf00      	nop
 8008788:	200008e0 	.word	0x200008e0

0800878c <__retarget_lock_acquire_recursive>:
 800878c:	4770      	bx	lr

0800878e <__retarget_lock_release_recursive>:
 800878e:	4770      	bx	lr

08008790 <_init>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	bf00      	nop
 8008794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008796:	bc08      	pop	{r3}
 8008798:	469e      	mov	lr, r3
 800879a:	4770      	bx	lr

0800879c <_fini>:
 800879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879e:	bf00      	nop
 80087a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a2:	bc08      	pop	{r3}
 80087a4:	469e      	mov	lr, r3
 80087a6:	4770      	bx	lr
