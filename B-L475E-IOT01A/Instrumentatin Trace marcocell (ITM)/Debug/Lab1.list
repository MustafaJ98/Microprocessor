
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08004390  08004390  00014390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004560  08004560  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004560  08004560  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004560  08004560  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000074  080045dc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080045dc  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   00006a15  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000080b3  00000000  00000000  00026ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017b0  00000000  00000000  0002eb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000650  00000000  00000000  00030320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e4b29  00000000  00000000  00030970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000580  00000000  00000000  001154a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003023  00000000  00000000  00115a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  00118a43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002440  00000000  00000000  00118b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000392  00000000  00000000  0011af44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004374 	.word	0x08004374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004374 	.word	0x08004374

080001d0 <asmDev>:
// .global exports the label asmDev, which is expected by lab1math.h
.global asmDev

asmDev:

	PUSH {R4}								// saving context according to calling convention
 80001d0:	b410      	push	{r4}
	VSUB.F32 S0, S0, S0					    // Clear registers for stable result
 80001d2:	ee30 0a40 	vsub.f32	s0, s0, s0
	VSUB.F32 S1, S1, S1
 80001d6:	ee70 0ae0 	vsub.f32	s1, s1, s1
	VSUB.F32 S2, S2, S2
 80001da:	ee31 1a41 	vsub.f32	s2, s2, s2
	VSUB.F32 S3, S3, S3
 80001de:	ee71 1ae1 	vsub.f32	s3, s3, s3


	MOV R3, R0								// R3 = base address
 80001e2:	4603      	mov	r3, r0
	MOV R4, R1								// R4 = size
 80001e4:	460c      	mov	r4, r1
	MOV R5 , R4
 80001e6:	4625      	mov	r5, r4

080001e8 <sum>:


sum:
	SUBS R4, R4, #1						    //	size = size-1
 80001e8:	3c01      	subs	r4, #1
	BLT mean							    //	loop finishes when R4 < 0
 80001ea:	db06      	blt.n	80001fa <mean>
	VLDR.F32 S0, [R3]					    //	move matrix value to S0
 80001ec:	ed93 0a00 	vldr	s0, [r3]
	VADD.F32 S1, S1, S0				 	    //	Sum
 80001f0:	ee70 0a80 	vadd.f32	s1, s1, s0
	ADD R3, R3, #4						    //	next index
 80001f4:	f103 0304 	add.w	r3, r3, #4
	B sum
 80001f8:	e7f6      	b.n	80001e8 <sum>

080001fa <mean>:

mean:
	VMOV.F32 S0, R1							// S0 = size
 80001fa:	ee00 1a10 	vmov	s0, r1
	VCVT.F32.U32 S0, S0 					// S0 type float
 80001fe:	eeb8 0a40 	vcvt.f32.u32	s0, s0
	VDIV.F32 S1, S1, S0						// S1 = sum/size
 8000202:	eec0 0a80 	vdiv.f32	s1, s1, s0

08000206 <var_num>:

var_num:
	SUBS R1, R1, #1							//	size = size-1
 8000206:	3901      	subs	r1, #1
	BLT var									//	loop finishes when R1 < 0
 8000208:	db08      	blt.n	800021c <var>
	VLDR.F32 S2, [R0]						//	S2 = current element
 800020a:	ed90 1a00 	vldr	s2, [r0]
	VSUB.F32 S2, S2, S1						//  S2 = S2-mean
 800020e:	ee31 1a60 	vsub.f32	s2, s2, s1
	VMLA.F32 S3, S2, S2						//	S3 += (S2-mean)^2
 8000212:	ee41 1a01 	vmla.f32	s3, s2, s2
	ADD R0, R0, #4							// next index
 8000216:	f100 0004 	add.w	r0, r0, #4
	B var_num
 800021a:	e7f4      	b.n	8000206 <var_num>

0800021c <var>:

var:
	SUBS R5,R5,#1							// size = size -1
 800021c:	3d01      	subs	r5, #1
	VMOV.F32 S0, R5							// S0 = size
 800021e:	ee00 5a10 	vmov	s0, r5
	VCVT.F32.U32 S0, S0 					// S0 type float
 8000222:	eeb8 0a40 	vcvt.f32.u32	s0, s0
	VDIV.F32 S3, S3, S0						// S3 = variance
 8000226:	eec1 1a80 	vdiv.f32	s3, s3, s0

0800022a <done>:

done:
	VSQRT.F32 S3, S3
 800022a:	eef1 1ae1 	vsqrt.f32	s3, s3
	VSTR.F32 S3, [R2]               		// store std dev value
 800022e:	edc2 1a00 	vstr	s3, [r2]
	POP {R4}								// restore context
 8000232:	bc10      	pop	{r4}
	BX LR
 8000234:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <cSDev>:
 */

#include "main.h"
#include "math.h"

void cSDev(float *A, uint32_t size, float *std){
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
	float sum = 0;
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
	float mean = 0;
 8000c6a:	f04f 0300 	mov.w	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
	float var = 0;
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]

	for(uint32_t i = 0; i < size; i++){
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	e00e      	b.n	8000c9a <cSDev+0x42>
		sum += A[i];
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(uint32_t i = 0; i < size; i++){
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	3301      	adds	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	69fa      	ldr	r2, [r7, #28]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d3ec      	bcc.n	8000c7c <cSDev+0x24>
	}
	mean = sum/size;
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	ee07 3a90 	vmov	s15, r3
 8000ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8000cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb4:	edc7 7a05 	vstr	s15, [r7, #20]

	for(uint32_t i = 0; i < size; i++){
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	e02b      	b.n	8000d16 <cSDev+0xbe>
			var  += pow((A[i]-mean),2);
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	ed93 7a00 	vldr	s14, [r3]
 8000cca:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cd2:	ee17 0a90 	vmov	r0, s15
 8000cd6:	f7ff fc67 	bl	80005a8 <__aeabi_f2d>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8000d60 <cSDev+0x108>
 8000ce2:	ec43 2b10 	vmov	d0, r2, r3
 8000ce6:	f002 fb31 	bl	800334c <pow>
 8000cea:	ec55 4b10 	vmov	r4, r5, d0
 8000cee:	6a38      	ldr	r0, [r7, #32]
 8000cf0:	f7ff fc5a 	bl	80005a8 <__aeabi_f2d>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	f7ff faf6 	bl	80002ec <__adddf3>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4610      	mov	r0, r2
 8000d06:	4619      	mov	r1, r3
 8000d08:	f7ff ff56 	bl	8000bb8 <__aeabi_d2f>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	623b      	str	r3, [r7, #32]
	for(uint32_t i = 0; i < size; i++){
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	3301      	adds	r3, #1
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d3cf      	bcc.n	8000cbe <cSDev+0x66>
		}
	*std = sqrt(var/(size-1));
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d2a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000d2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d32:	ee16 0a90 	vmov	r0, s13
 8000d36:	f7ff fc37 	bl	80005a8 <__aeabi_f2d>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	ec43 2b10 	vmov	d0, r2, r3
 8000d42:	f002 fbb1 	bl	80034a8 <sqrt>
 8000d46:	ec53 2b10 	vmov	r2, r3, d0
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f7ff ff33 	bl	8000bb8 <__aeabi_d2f>
 8000d52:	4602      	mov	r2, r0
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d60:	00000000 	.word	0x00000000
 8000d64:	40000000 	.word	0x40000000

08000d68 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	f5ad 4d9c 	sub.w	sp, sp, #19968	; 0x4e00
 8000d6e:	b090      	sub	sp, #64	; 0x40
 8000d70:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d72:	f000 fad0 	bl	8001316 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d76:	f000 f8e3 	bl	8000f40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d7a:	f000 f933 	bl	8000fe4 <MX_GPIO_Init>
	float mul_A_B_C[1000];
	float mul_A_B_ASM[1000];

	float A[1000];
	float B[1000];
	for (int i = 0; i < 1000; i++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000d84:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e03e      	b.n	8000e0a <main+0xa2>
		A[i] = ((float) rand() / (float) (RAND_MAX)) * 10;
 8000d8c:	f001 fadc 	bl	8002348 <rand>
 8000d90:	ee07 0a90 	vmov	s15, r0
 8000d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d98:	eddf 6a67 	vldr	s13, [pc, #412]	; 8000f38 <main+0x1d0>
 8000d9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000da0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da8:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8000dac:	3b10      	subs	r3, #16
 8000dae:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000db2:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	edc3 7a00 	vstr	s15, [r3]
		B[i] = ((float) rand() / (float) (RAND_MAX)) * 10;
 8000dc0:	f001 fac2 	bl	8002348 <rand>
 8000dc4:	ee07 0a90 	vmov	s15, r0
 8000dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dcc:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8000f38 <main+0x1d0>
 8000dd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ddc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000de0:	3b30      	subs	r3, #48	; 0x30
 8000de2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000de6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	0092      	lsls	r2, r2, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 8000df4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000df8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000e04:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000e0e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e18:	dbb8      	blt.n	8000d8c <main+0x24>
	}

	float std_C = 0;
 8000e1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e1e:	3b34      	subs	r3, #52	; 0x34
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
	float std_ASM = 0;
 8000e26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e2a:	3b38      	subs	r3, #56	; 0x38
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
	float std_CMSIS = 0;
 8000e32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e36:	3b3c      	subs	r3, #60	; 0x3c
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
//		for (uint32_t i=0; i<1000; i++)
//			arm_mult_f32(&A, &B, &mul_A_B_CMSIS, 1000);
//		ITM_Port32(31) = 4;


			ITM_Port32(31) = 1;
 8000e3e:	4b3f      	ldr	r3, [pc, #252]	; (8000f3c <main+0x1d4>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
			for (uint32_t i = 0; i < 1000; i++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000e4a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e015      	b.n	8000e7e <main+0x116>
				cSDev(&A, 1000, &std_C);
 8000e52:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e56:	3a34      	subs	r2, #52	; 0x34
 8000e58:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8000e5c:	3b10      	subs	r3, #16
 8000e5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fef8 	bl	8000c58 <cSDev>
			for (uint32_t i = 0; i < 1000; i++)
 8000e68:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000e6c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000e78:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000e82:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e8c:	d3e1      	bcc.n	8000e52 <main+0xea>
			ITM_Port32(31) = 2;
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <main+0x1d4>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	601a      	str	r2, [r3, #0]
			for (uint32_t i = 0; i < 1000; i++)
 8000e94:	2300      	movs	r3, #0
 8000e96:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000e9a:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	e015      	b.n	8000ece <main+0x166>
				asmDev(&A, 1000, &std_ASM);
 8000ea2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ea6:	3a38      	subs	r2, #56	; 0x38
 8000ea8:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8000eac:	3b10      	subs	r3, #16
 8000eae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff f98c 	bl	80001d0 <asmDev>
			for (uint32_t i = 0; i < 1000; i++)
 8000eb8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000ebc:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000ec8:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000ed2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000edc:	d3e1      	bcc.n	8000ea2 <main+0x13a>
			ITM_Port32(31) = 3;
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <main+0x1d4>)
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	601a      	str	r2, [r3, #0]
			for (uint32_t i=0; i<1000; i++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000eea:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e015      	b.n	8000f1e <main+0x1b6>
				arm_std_f32(&A, 1000, &std_CMSIS);
 8000ef2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ef6:	3a3c      	subs	r2, #60	; 0x3c
 8000ef8:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8000efc:	3b10      	subs	r3, #16
 8000efe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 f97a 	bl	80021fc <arm_std_f32>
			for (uint32_t i=0; i<1000; i++)
 8000f08:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000f0c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000f18:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000f22:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f2c:	d3e1      	bcc.n	8000ef2 <main+0x18a>
			ITM_Port32(31) = 4;
 8000f2e:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <main+0x1d4>)
 8000f30:	2204      	movs	r2, #4
 8000f32:	601a      	str	r2, [r3, #0]
			ITM_Port32(31) = 1;
 8000f34:	e783      	b.n	8000e3e <main+0xd6>
 8000f36:	bf00      	nop
 8000f38:	4f000000 	.word	0x4f000000
 8000f3c:	e000007c 	.word	0xe000007c

08000f40 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b096      	sub	sp, #88	; 0x58
 8000f44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2244      	movs	r2, #68	; 0x44
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 f9f2 	bl	8002338 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f62:	2310      	movs	r3, #16
 8000f64:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f66:	2301      	movs	r3, #1
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f6e:	2360      	movs	r3, #96	; 0x60
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f72:	2302      	movs	r3, #2
 8000f74:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f76:	2301      	movs	r3, #1
 8000f78:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000f7e:	2328      	movs	r3, #40	; 0x28
 8000f80:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f82:	2307      	movs	r3, #7
 8000f84:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f86:	2302      	movs	r3, #2
 8000f88:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fb7e 	bl	8001694 <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x62>
		Error_Handler();
 8000f9e:	f000 f845 	bl	800102c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2104      	movs	r1, #4
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 ff50 	bl	8001e60 <HAL_RCC_ClockConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x8a>
		Error_Handler();
 8000fc6:	f000 f831 	bl	800102c <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fce:	f000 fb0b 	bl	80015e8 <HAL_PWREx_ControlVoltageScaling>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8000fd8:	f000 f828 	bl	800102c <Error_Handler>
	}
}
 8000fdc:	bf00      	nop
 8000fde:	3758      	adds	r7, #88	; 0x58
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_GPIO_Init+0x44>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <MX_GPIO_Init+0x44>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_GPIO_Init+0x44>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_GPIO_Init+0x44>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <MX_GPIO_Init+0x44>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_GPIO_Init+0x44>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000

0800102c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_MspInit+0x44>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_MspInit+0x44>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6613      	str	r3, [r2, #96]	; 0x60
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_MspInit+0x44>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_MspInit+0x44>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_MspInit+0x44>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001060:	6593      	str	r3, [r2, #88]	; 0x58
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_MspInit+0x44>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <NMI_Handler+0x4>

08001086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <MemManage_Handler+0x4>

08001092 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <UsageFault_Handler+0x4>

0800109e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010cc:	f000 f978 	bl	80013c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
	return 1;
 80010d8:	2301      	movs	r3, #1
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <_kill>:

int _kill(int pid, int sig)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010ee:	f001 f8f9 	bl	80022e4 <__errno>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2216      	movs	r2, #22
 80010f6:	601a      	str	r2, [r3, #0]
	return -1;
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_exit>:

void _exit (int status)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ffe7 	bl	80010e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001116:	e7fe      	b.n	8001116 <_exit+0x12>

08001118 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	e00a      	b.n	8001140 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800112a:	f3af 8000 	nop.w
 800112e:	4601      	mov	r1, r0
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	b2ca      	uxtb	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	dbf0      	blt.n	800112a <_read+0x12>
	}

return len;
 8001148:	687b      	ldr	r3, [r7, #4]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e009      	b.n	8001178 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	60ba      	str	r2, [r7, #8]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	dbf1      	blt.n	8001164 <_write+0x12>
	}
	return len;
 8001180:	687b      	ldr	r3, [r7, #4]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_close>:

int _close(int file)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	return -1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b2:	605a      	str	r2, [r3, #4]
	return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_isatty>:

int _isatty(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	return 1;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
	return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011fc:	4a14      	ldr	r2, [pc, #80]	; (8001250 <_sbrk+0x5c>)
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <_sbrk+0x60>)
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <_sbrk+0x64>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <_sbrk+0x68>)
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	429a      	cmp	r2, r3
 8001222:	d207      	bcs.n	8001234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001224:	f001 f85e 	bl	80022e4 <__errno>
 8001228:	4603      	mov	r3, r0
 800122a:	220c      	movs	r2, #12
 800122c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	e009      	b.n	8001248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <_sbrk+0x64>)
 8001244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20018000 	.word	0x20018000
 8001254:	00000400 	.word	0x00000400
 8001258:	20000090 	.word	0x20000090
 800125c:	200000b0 	.word	0x200000b0

08001260 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <SystemInit+0x5c>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126a:	4a14      	ldr	r2, [pc, #80]	; (80012bc <SystemInit+0x5c>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <SystemInit+0x60>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <SystemInit+0x60>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <SystemInit+0x60>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <SystemInit+0x60>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <SystemInit+0x60>)
 800128c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001290:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001294:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <SystemInit+0x60>)
 8001298:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800129c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <SystemInit+0x60>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <SystemInit+0x60>)
 80012a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SystemInit+0x60>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00
 80012c0:	40021000 	.word	0x40021000

080012c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c8:	f7ff ffca 	bl	8001260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012ce:	e003      	b.n	80012d8 <LoopCopyDataInit>

080012d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012d6:	3104      	adds	r1, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012d8:	480a      	ldr	r0, [pc, #40]	; (8001304 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012e0:	d3f6      	bcc.n	80012d0 <CopyDataInit>
	ldr	r2, =_sbss
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <LoopForever+0x12>)
	b	LoopFillZerobss
 80012e4:	e002      	b.n	80012ec <LoopFillZerobss>

080012e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012e8:	f842 3b04 	str.w	r3, [r2], #4

080012ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <LoopForever+0x16>)
	cmp	r2, r3
 80012ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012f0:	d3f9      	bcc.n	80012e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f2:	f000 fffd 	bl	80022f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012f6:	f7ff fd37 	bl	8000d68 <main>

080012fa <LoopForever>:

LoopForever:
    b LoopForever
 80012fa:	e7fe      	b.n	80012fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012fc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001300:	08004568 	.word	0x08004568
	ldr	r0, =_sdata
 8001304:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001308:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 800130c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001310:	200000b0 	.word	0x200000b0

08001314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>

08001316 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 f91f 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001326:	2000      	movs	r0, #0
 8001328:	f000 f80e 	bl	8001348 <HAL_InitTick>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	e001      	b.n	800133c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001338:	f7ff fe7e 	bl	8001038 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800133c:	79fb      	ldrb	r3, [r7, #7]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_InitTick+0x6c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d023      	beq.n	80013a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_InitTick+0x70>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_InitTick+0x6c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	fbb3 f3f1 	udiv	r3, r3, r1
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f91d 	bl	80015b2 <HAL_SYSTICK_Config>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10f      	bne.n	800139e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d809      	bhi.n	8001398 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f000 f8f5 	bl	800157a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001390:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <HAL_InitTick+0x74>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e007      	b.n	80013a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e004      	b.n	80013a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	e001      	b.n	80013a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000004 	.word	0x20000004

080013c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_IncTick+0x20>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x24>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <HAL_IncTick+0x24>)
 80013d2:	6013      	str	r3, [r2, #0]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000008 	.word	0x20000008
 80013e4:	2000009c 	.word	0x2000009c

080013e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_GetTick+0x14>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	2000009c 	.word	0x2000009c

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff47 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff5c 	bl	8001448 <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff8e 	bl	80014b8 <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5d 	bl	8001464 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffb0 	bl	8001520 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40007000 	.word	0x40007000

080015e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f6:	d130      	bne.n	800165a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001604:	d038      	beq.n	8001678 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800160e:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001614:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2232      	movs	r2, #50	; 0x32
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9b      	lsrs	r3, r3, #18
 8001628:	3301      	adds	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162c:	e002      	b.n	8001634 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	3b01      	subs	r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001640:	d102      	bne.n	8001648 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f2      	bne.n	800162e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001654:	d110      	bne.n	8001678 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e00f      	b.n	800167a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001666:	d007      	beq.n	8001678 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001670:	4a05      	ldr	r2, [pc, #20]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001676:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40007000 	.word	0x40007000
 800168c:	20000000 	.word	0x20000000
 8001690:	431bde83 	.word	0x431bde83

08001694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e3d4      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a6:	4ba1      	ldr	r3, [pc, #644]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b0:	4b9e      	ldr	r3, [pc, #632]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80e4 	beq.w	8001890 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <HAL_RCC_OscConfig+0x4a>
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	f040 808b 	bne.w	80017ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	f040 8087 	bne.w	80017ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016de:	4b93      	ldr	r3, [pc, #588]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d005      	beq.n	80016f6 <HAL_RCC_OscConfig+0x62>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e3ac      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1a      	ldr	r2, [r3, #32]
 80016fa:	4b8c      	ldr	r3, [pc, #560]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <HAL_RCC_OscConfig+0x7c>
 8001706:	4b89      	ldr	r3, [pc, #548]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800170e:	e005      	b.n	800171c <HAL_RCC_OscConfig+0x88>
 8001710:	4b86      	ldr	r3, [pc, #536]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800171c:	4293      	cmp	r3, r2
 800171e:	d223      	bcs.n	8001768 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4618      	mov	r0, r3
 8001726:	f000 fd09 	bl	800213c <RCC_SetFlashLatencyFromMSIRange>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e38d      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001734:	4b7d      	ldr	r3, [pc, #500]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a7c      	ldr	r2, [pc, #496]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b7a      	ldr	r3, [pc, #488]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4977      	ldr	r1, [pc, #476]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001752:	4b76      	ldr	r3, [pc, #472]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	4972      	ldr	r1, [pc, #456]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]
 8001766:	e025      	b.n	80017b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001768:	4b70      	ldr	r3, [pc, #448]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a6f      	ldr	r2, [pc, #444]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800176e:	f043 0308 	orr.w	r3, r3, #8
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b6d      	ldr	r3, [pc, #436]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	496a      	ldr	r1, [pc, #424]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001786:	4b69      	ldr	r3, [pc, #420]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	4965      	ldr	r1, [pc, #404]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fcc9 	bl	800213c <RCC_SetFlashLatencyFromMSIRange>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e34d      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017b4:	f000 fc36 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 80017b8:	4602      	mov	r2, r0
 80017ba:	4b5c      	ldr	r3, [pc, #368]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	495a      	ldr	r1, [pc, #360]	; (8001930 <HAL_RCC_OscConfig+0x29c>)
 80017c6:	5ccb      	ldrb	r3, [r1, r3]
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	fa22 f303 	lsr.w	r3, r2, r3
 80017d0:	4a58      	ldr	r2, [pc, #352]	; (8001934 <HAL_RCC_OscConfig+0x2a0>)
 80017d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017d4:	4b58      	ldr	r3, [pc, #352]	; (8001938 <HAL_RCC_OscConfig+0x2a4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fdb5 	bl	8001348 <HAL_InitTick>
 80017de:	4603      	mov	r3, r0
 80017e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d052      	beq.n	800188e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	e331      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d032      	beq.n	800185a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017f4:	4b4d      	ldr	r3, [pc, #308]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001800:	f7ff fdf2 	bl	80013e8 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001808:	f7ff fdee 	bl	80013e8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e31a      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800181a:	4b44      	ldr	r3, [pc, #272]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001826:	4b41      	ldr	r3, [pc, #260]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a40      	ldr	r2, [pc, #256]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b3e      	ldr	r3, [pc, #248]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	493b      	ldr	r1, [pc, #236]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001844:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	4936      	ldr	r1, [pc, #216]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
 8001858:	e01a      	b.n	8001890 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800185a:	4b34      	ldr	r3, [pc, #208]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a33      	ldr	r2, [pc, #204]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001866:	f7ff fdbf 	bl	80013e8 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800186e:	f7ff fdbb 	bl	80013e8 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e2e7      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x1da>
 800188c:	e000      	b.n	8001890 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800188e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d074      	beq.n	8001986 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d005      	beq.n	80018ae <HAL_RCC_OscConfig+0x21a>
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d10e      	bne.n	80018c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d10b      	bne.n	80018c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d064      	beq.n	8001984 <HAL_RCC_OscConfig+0x2f0>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d160      	bne.n	8001984 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e2c4      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x24a>
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a15      	ldr	r2, [pc, #84]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e01d      	b.n	800191a <HAL_RCC_OscConfig+0x286>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e6:	d10c      	bne.n	8001902 <HAL_RCC_OscConfig+0x26e>
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0f      	ldr	r2, [pc, #60]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0c      	ldr	r2, [pc, #48]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e00b      	b.n	800191a <HAL_RCC_OscConfig+0x286>
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a06      	ldr	r2, [pc, #24]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d01c      	beq.n	800195c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff fd61 	bl	80013e8 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001928:	e011      	b.n	800194e <HAL_RCC_OscConfig+0x2ba>
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	08004390 	.word	0x08004390
 8001934:	20000000 	.word	0x20000000
 8001938:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fd54 	bl	80013e8 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e280      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800194e:	4baf      	ldr	r3, [pc, #700]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x2a8>
 800195a:	e014      	b.n	8001986 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff fd44 	bl	80013e8 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fd40 	bl	80013e8 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e26c      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001976:	4ba5      	ldr	r3, [pc, #660]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x2d0>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d060      	beq.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b04      	cmp	r3, #4
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_OscConfig+0x310>
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d119      	bne.n	80019d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d116      	bne.n	80019d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a4:	4b99      	ldr	r3, [pc, #612]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_OscConfig+0x328>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e249      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4b93      	ldr	r3, [pc, #588]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	061b      	lsls	r3, r3, #24
 80019ca:	4990      	ldr	r1, [pc, #576]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d0:	e040      	b.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d023      	beq.n	8001a22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019da:	4b8c      	ldr	r3, [pc, #560]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a8b      	ldr	r2, [pc, #556]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff fcff 	bl	80013e8 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff fcfb 	bl	80013e8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e227      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a00:	4b82      	ldr	r3, [pc, #520]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	061b      	lsls	r3, r3, #24
 8001a1a:	497c      	ldr	r1, [pc, #496]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
 8001a20:	e018      	b.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a22:	4b7a      	ldr	r3, [pc, #488]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a79      	ldr	r2, [pc, #484]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fcdb 	bl	80013e8 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fcd7 	bl	80013e8 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e203      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a48:	4b70      	ldr	r3, [pc, #448]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f0      	bne.n	8001a36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d03c      	beq.n	8001ada <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01c      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a68:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6e:	4a67      	ldr	r2, [pc, #412]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff fcb6 	bl	80013e8 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff fcb2 	bl	80013e8 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1de      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a92:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ef      	beq.n	8001a80 <HAL_RCC_OscConfig+0x3ec>
 8001aa0:	e01b      	b.n	8001ada <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa2:	4b5a      	ldr	r3, [pc, #360]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa8:	4a58      	ldr	r2, [pc, #352]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fc99 	bl	80013e8 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aba:	f7ff fc95 	bl	80013e8 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e1c1      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001acc:	4b4f      	ldr	r3, [pc, #316]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ef      	bne.n	8001aba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80a6 	beq.w	8001c34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001aec:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10d      	bne.n	8001b14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af8:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	4a43      	ldr	r2, [pc, #268]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b02:	6593      	str	r3, [r2, #88]	; 0x58
 8001b04:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b10:	2301      	movs	r3, #1
 8001b12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b14:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <HAL_RCC_OscConfig+0x57c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d118      	bne.n	8001b52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b20:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <HAL_RCC_OscConfig+0x57c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a3a      	ldr	r2, [pc, #232]	; (8001c10 <HAL_RCC_OscConfig+0x57c>)
 8001b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2c:	f7ff fc5c 	bl	80013e8 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b34:	f7ff fc58 	bl	80013e8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e184      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <HAL_RCC_OscConfig+0x57c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d108      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4d8>
 8001b5a:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b60:	4a2a      	ldr	r2, [pc, #168]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b6a:	e024      	b.n	8001bb6 <HAL_RCC_OscConfig+0x522>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d110      	bne.n	8001b96 <HAL_RCC_OscConfig+0x502>
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7a:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	4a20      	ldr	r2, [pc, #128]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b94:	e00f      	b.n	8001bb6 <HAL_RCC_OscConfig+0x522>
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bac:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001bae:	f023 0304 	bic.w	r3, r3, #4
 8001bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d016      	beq.n	8001bec <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fc13 	bl	80013e8 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f7ff fc0f 	bl	80013e8 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e139      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0ed      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x532>
 8001bea:	e01a      	b.n	8001c22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7ff fbfc 	bl	80013e8 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf2:	e00f      	b.n	8001c14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fbf8 	bl	80013e8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d906      	bls.n	8001c14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e122      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c14:	4b90      	ldr	r3, [pc, #576]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1e8      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c22:	7ffb      	ldrb	r3, [r7, #31]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d105      	bne.n	8001c34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c28:	4b8b      	ldr	r3, [pc, #556]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	4a8a      	ldr	r2, [pc, #552]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8108 	beq.w	8001e4e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	f040 80d0 	bne.w	8001de8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c48:	4b83      	ldr	r3, [pc, #524]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d130      	bne.n	8001cbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	3b01      	subs	r3, #1
 8001c68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d127      	bne.n	8001cbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d11f      	bne.n	8001cbe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c88:	2a07      	cmp	r2, #7
 8001c8a:	bf14      	ite	ne
 8001c8c:	2201      	movne	r2, #1
 8001c8e:	2200      	moveq	r2, #0
 8001c90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d113      	bne.n	8001cbe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d109      	bne.n	8001cbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	085b      	lsrs	r3, r3, #1
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d06e      	beq.n	8001d9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	d069      	beq.n	8001d98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cc4:	4b64      	ldr	r3, [pc, #400]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cd0:	4b61      	ldr	r3, [pc, #388]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0b7      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ce0:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5c      	ldr	r2, [pc, #368]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cec:	f7ff fb7c 	bl	80013e8 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff fb78 	bl	80013e8 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e0a4      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d06:	4b54      	ldr	r3, [pc, #336]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d12:	4b51      	ldr	r3, [pc, #324]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <HAL_RCC_OscConfig+0x7c8>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d22:	3a01      	subs	r2, #1
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	4311      	orrs	r1, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d2c:	0212      	lsls	r2, r2, #8
 8001d2e:	4311      	orrs	r1, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d34:	0852      	lsrs	r2, r2, #1
 8001d36:	3a01      	subs	r2, #1
 8001d38:	0552      	lsls	r2, r2, #21
 8001d3a:	4311      	orrs	r1, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d40:	0852      	lsrs	r2, r2, #1
 8001d42:	3a01      	subs	r2, #1
 8001d44:	0652      	lsls	r2, r2, #25
 8001d46:	4311      	orrs	r1, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d4c:	0912      	lsrs	r2, r2, #4
 8001d4e:	0452      	lsls	r2, r2, #17
 8001d50:	430a      	orrs	r2, r1
 8001d52:	4941      	ldr	r1, [pc, #260]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d58:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a3e      	ldr	r2, [pc, #248]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d64:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4a3b      	ldr	r2, [pc, #236]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d70:	f7ff fb3a 	bl	80013e8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d78:	f7ff fb36 	bl	80013e8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e062      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8a:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d96:	e05a      	b.n	8001e4e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e059      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d152      	bne.n	8001e4e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001da8:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2a      	ldr	r2, [pc, #168]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a27      	ldr	r2, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dc0:	f7ff fb12 	bl	80013e8 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff fb0e 	bl	80013e8 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e03a      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x734>
 8001de6:	e032      	b.n	8001e4e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	d02d      	beq.n	8001e4a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d105      	bne.n	8001e12 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001e0c:	f023 0303 	bic.w	r3, r3, #3
 8001e10:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001e18:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e20:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff fae1 	bl	80013e8 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7ff fadd 	bl	80013e8 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e009      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x796>
 8001e48:	e001      	b.n	8001e4e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	f99d808c 	.word	0xf99d808c

08001e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0c8      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b66      	ldr	r3, [pc, #408]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d910      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	4961      	ldr	r1, [pc, #388]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b5f      	ldr	r3, [pc, #380]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0b0      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d04c      	beq.n	8001f4a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb8:	4b56      	ldr	r3, [pc, #344]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d121      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e09e      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed0:	4b50      	ldr	r3, [pc, #320]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d115      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e092      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ee8:	4b4a      	ldr	r3, [pc, #296]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e086      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef8:	4b46      	ldr	r3, [pc, #280]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e07e      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f08:	4b42      	ldr	r3, [pc, #264]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 0203 	bic.w	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	493f      	ldr	r1, [pc, #252]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f1a:	f7ff fa65 	bl	80013e8 <HAL_GetTick>
 8001f1e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f7ff fa61 	bl	80013e8 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e066      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 020c 	and.w	r2, r3, #12
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d1eb      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f56:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	492c      	ldr	r1, [pc, #176]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d210      	bcs.n	8001f98 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 0207 	bic.w	r2, r3, #7
 8001f7e:	4924      	ldr	r1, [pc, #144]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e036      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4918      	ldr	r1, [pc, #96]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4910      	ldr	r1, [pc, #64]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fd6:	f000 f825 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	490c      	ldr	r1, [pc, #48]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	5ccb      	ldrb	r3, [r1, r3]
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff f9a4 	bl	8001348 <HAL_InitTick>
 8002000:	4603      	mov	r3, r0
 8002002:	72fb      	strb	r3, [r7, #11]

  return status;
 8002004:	7afb      	ldrb	r3, [r7, #11]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000
 8002014:	40021000 	.word	0x40021000
 8002018:	08004390 	.word	0x08004390
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002032:	4b3e      	ldr	r3, [pc, #248]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800203c:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x34>
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d121      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d11e      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002058:	4b34      	ldr	r3, [pc, #208]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002064:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 8002066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e005      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002080:	4a2b      	ldr	r2, [pc, #172]	; (8002130 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002088:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10d      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b04      	cmp	r3, #4
 800209a:	d102      	bne.n	80020a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_RCC_GetSysClockFreq+0x110>)
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	e004      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020a8:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_RCC_GetSysClockFreq+0x114>)
 80020aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b0c      	cmp	r3, #12
 80020b0:	d134      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020b2:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0xa6>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d003      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0xac>
 80020c8:	e005      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_RCC_GetSysClockFreq+0x110>)
 80020cc:	617b      	str	r3, [r7, #20]
      break;
 80020ce:	e005      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCC_GetSysClockFreq+0x114>)
 80020d2:	617b      	str	r3, [r7, #20]
      break;
 80020d4:	e002      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	617b      	str	r3, [r7, #20]
      break;
 80020da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	3301      	adds	r3, #1
 80020e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	fb02 f203 	mul.w	r2, r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	0e5b      	lsrs	r3, r3, #25
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	3301      	adds	r3, #1
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	fbb2 f3f3 	udiv	r3, r2, r3
 800211a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800211c:	69bb      	ldr	r3, [r7, #24]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	080043a0 	.word	0x080043a0
 8002134:	00f42400 	.word	0x00f42400
 8002138:	007a1200 	.word	0x007a1200

0800213c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002154:	f7ff fa3a 	bl	80015cc <HAL_PWREx_GetVoltageRange>
 8002158:	6178      	str	r0, [r7, #20]
 800215a:	e014      	b.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002166:	6593      	str	r3, [r2, #88]	; 0x58
 8002168:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002174:	f7ff fa2a 	bl	80015cc <HAL_PWREx_GetVoltageRange>
 8002178:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002184:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800218c:	d10b      	bne.n	80021a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b80      	cmp	r3, #128	; 0x80
 8002192:	d919      	bls.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2ba0      	cmp	r3, #160	; 0xa0
 8002198:	d902      	bls.n	80021a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800219a:	2302      	movs	r3, #2
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	e013      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021a0:	2301      	movs	r3, #1
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	e010      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b80      	cmp	r3, #128	; 0x80
 80021aa:	d902      	bls.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021ac:	2303      	movs	r3, #3
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	e00a      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b80      	cmp	r3, #128	; 0x80
 80021b6:	d102      	bne.n	80021be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021b8:	2302      	movs	r3, #2
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e004      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b70      	cmp	r3, #112	; 0x70
 80021c2:	d101      	bne.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021c4:	2301      	movs	r3, #1
 80021c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 0207 	bic.w	r2, r3, #7
 80021d0:	4909      	ldr	r1, [pc, #36]	; (80021f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d001      	beq.n	80021ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40022000 	.word	0x40022000

080021fc <arm_std_f32>:
 80021fc:	2901      	cmp	r1, #1
 80021fe:	d065      	beq.n	80022cc <arm_std_f32+0xd0>
 8002200:	b530      	push	{r4, r5, lr}
 8002202:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80022e0 <arm_std_f32+0xe4>
 8002206:	088d      	lsrs	r5, r1, #2
 8002208:	b083      	sub	sp, #12
 800220a:	eeb0 6a47 	vmov.f32	s12, s14
 800220e:	d028      	beq.n	8002262 <arm_std_f32+0x66>
 8002210:	f100 0310 	add.w	r3, r0, #16
 8002214:	462c      	mov	r4, r5
 8002216:	ed53 7a04 	vldr	s15, [r3, #-16]
 800221a:	ed53 4a03 	vldr	s9, [r3, #-12]
 800221e:	ed13 5a02 	vldr	s10, [r3, #-8]
 8002222:	ed53 5a01 	vldr	s11, [r3, #-4]
 8002226:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800222a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800222e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8002232:	ee64 6aa4 	vmul.f32	s13, s9, s9
 8002236:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800223a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800223e:	ee65 6a05 	vmul.f32	s13, s10, s10
 8002242:	ee77 7a85 	vadd.f32	s15, s15, s10
 8002246:	ee36 7a87 	vadd.f32	s14, s13, s14
 800224a:	ee65 6aa5 	vmul.f32	s13, s11, s11
 800224e:	3c01      	subs	r4, #1
 8002250:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8002254:	ee36 7a87 	vadd.f32	s14, s13, s14
 8002258:	f103 0310 	add.w	r3, r3, #16
 800225c:	d1db      	bne.n	8002216 <arm_std_f32+0x1a>
 800225e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8002262:	f011 0303 	ands.w	r3, r1, #3
 8002266:	d009      	beq.n	800227c <arm_std_f32+0x80>
 8002268:	ecf0 7a01 	vldmia	r0!, {s15}
 800226c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002270:	3b01      	subs	r3, #1
 8002272:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002276:	ee37 7a26 	vadd.f32	s14, s14, s13
 800227a:	d1f5      	bne.n	8002268 <arm_std_f32+0x6c>
 800227c:	ee07 1a90 	vmov	s15, r1
 8002280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002284:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002288:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800228c:	ee37 6ae5 	vsub.f32	s12, s15, s11
 8002290:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8002294:	ee87 0a86 	vdiv.f32	s0, s15, s12
 8002298:	eec7 7a06 	vdiv.f32	s15, s14, s12
 800229c:	ee66 6a80 	vmul.f32	s13, s13, s0
 80022a0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80022a4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80022a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ac:	db0a      	blt.n	80022c4 <arm_std_f32+0xc8>
 80022ae:	eeb1 0ae6 	vsqrt.f32	s0, s13
 80022b2:	eeb4 0a40 	vcmp.f32	s0, s0
 80022b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ba:	d10a      	bne.n	80022d2 <arm_std_f32+0xd6>
 80022bc:	ed82 0a00 	vstr	s0, [r2]
 80022c0:	b003      	add	sp, #12
 80022c2:	bd30      	pop	{r4, r5, pc}
 80022c4:	2300      	movs	r3, #0
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	b003      	add	sp, #12
 80022ca:	bd30      	pop	{r4, r5, pc}
 80022cc:	2300      	movs	r3, #0
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4770      	bx	lr
 80022d2:	eeb0 0a66 	vmov.f32	s0, s13
 80022d6:	9201      	str	r2, [sp, #4]
 80022d8:	f001 f91a 	bl	8003510 <sqrtf>
 80022dc:	9a01      	ldr	r2, [sp, #4]
 80022de:	e7ed      	b.n	80022bc <arm_std_f32+0xc0>
 80022e0:	00000000 	.word	0x00000000

080022e4 <__errno>:
 80022e4:	4b01      	ldr	r3, [pc, #4]	; (80022ec <__errno+0x8>)
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	2000000c 	.word	0x2000000c

080022f0 <__libc_init_array>:
 80022f0:	b570      	push	{r4, r5, r6, lr}
 80022f2:	4d0d      	ldr	r5, [pc, #52]	; (8002328 <__libc_init_array+0x38>)
 80022f4:	4c0d      	ldr	r4, [pc, #52]	; (800232c <__libc_init_array+0x3c>)
 80022f6:	1b64      	subs	r4, r4, r5
 80022f8:	10a4      	asrs	r4, r4, #2
 80022fa:	2600      	movs	r6, #0
 80022fc:	42a6      	cmp	r6, r4
 80022fe:	d109      	bne.n	8002314 <__libc_init_array+0x24>
 8002300:	4d0b      	ldr	r5, [pc, #44]	; (8002330 <__libc_init_array+0x40>)
 8002302:	4c0c      	ldr	r4, [pc, #48]	; (8002334 <__libc_init_array+0x44>)
 8002304:	f002 f836 	bl	8004374 <_init>
 8002308:	1b64      	subs	r4, r4, r5
 800230a:	10a4      	asrs	r4, r4, #2
 800230c:	2600      	movs	r6, #0
 800230e:	42a6      	cmp	r6, r4
 8002310:	d105      	bne.n	800231e <__libc_init_array+0x2e>
 8002312:	bd70      	pop	{r4, r5, r6, pc}
 8002314:	f855 3b04 	ldr.w	r3, [r5], #4
 8002318:	4798      	blx	r3
 800231a:	3601      	adds	r6, #1
 800231c:	e7ee      	b.n	80022fc <__libc_init_array+0xc>
 800231e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002322:	4798      	blx	r3
 8002324:	3601      	adds	r6, #1
 8002326:	e7f2      	b.n	800230e <__libc_init_array+0x1e>
 8002328:	08004560 	.word	0x08004560
 800232c:	08004560 	.word	0x08004560
 8002330:	08004560 	.word	0x08004560
 8002334:	08004564 	.word	0x08004564

08002338 <memset>:
 8002338:	4402      	add	r2, r0
 800233a:	4603      	mov	r3, r0
 800233c:	4293      	cmp	r3, r2
 800233e:	d100      	bne.n	8002342 <memset+0xa>
 8002340:	4770      	bx	lr
 8002342:	f803 1b01 	strb.w	r1, [r3], #1
 8002346:	e7f9      	b.n	800233c <memset+0x4>

08002348 <rand>:
 8002348:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <rand+0x60>)
 800234a:	b510      	push	{r4, lr}
 800234c:	681c      	ldr	r4, [r3, #0]
 800234e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002350:	b9b3      	cbnz	r3, 8002380 <rand+0x38>
 8002352:	2018      	movs	r0, #24
 8002354:	f000 f868 	bl	8002428 <malloc>
 8002358:	63a0      	str	r0, [r4, #56]	; 0x38
 800235a:	b928      	cbnz	r0, 8002368 <rand+0x20>
 800235c:	4602      	mov	r2, r0
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <rand+0x64>)
 8002360:	4813      	ldr	r0, [pc, #76]	; (80023b0 <rand+0x68>)
 8002362:	214e      	movs	r1, #78	; 0x4e
 8002364:	f000 f830 	bl	80023c8 <__assert_func>
 8002368:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <rand+0x6c>)
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <rand+0x70>)
 800236c:	e9c0 2300 	strd	r2, r3, [r0]
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <rand+0x74>)
 8002372:	6083      	str	r3, [r0, #8]
 8002374:	230b      	movs	r3, #11
 8002376:	8183      	strh	r3, [r0, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	2300      	movs	r3, #0
 800237c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002380:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002382:	480f      	ldr	r0, [pc, #60]	; (80023c0 <rand+0x78>)
 8002384:	690a      	ldr	r2, [r1, #16]
 8002386:	694b      	ldr	r3, [r1, #20]
 8002388:	4c0e      	ldr	r4, [pc, #56]	; (80023c4 <rand+0x7c>)
 800238a:	4350      	muls	r0, r2
 800238c:	fb04 0003 	mla	r0, r4, r3, r0
 8002390:	fba2 3404 	umull	r3, r4, r2, r4
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	4404      	add	r4, r0
 8002398:	f144 0000 	adc.w	r0, r4, #0
 800239c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80023a0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80023a4:	bd10      	pop	{r4, pc}
 80023a6:	bf00      	nop
 80023a8:	2000000c 	.word	0x2000000c
 80023ac:	080043d4 	.word	0x080043d4
 80023b0:	080043eb 	.word	0x080043eb
 80023b4:	abcd330e 	.word	0xabcd330e
 80023b8:	e66d1234 	.word	0xe66d1234
 80023bc:	0005deec 	.word	0x0005deec
 80023c0:	5851f42d 	.word	0x5851f42d
 80023c4:	4c957f2d 	.word	0x4c957f2d

080023c8 <__assert_func>:
 80023c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80023ca:	4614      	mov	r4, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <__assert_func+0x2c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4605      	mov	r5, r0
 80023d4:	68d8      	ldr	r0, [r3, #12]
 80023d6:	b14c      	cbz	r4, 80023ec <__assert_func+0x24>
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <__assert_func+0x30>)
 80023da:	9100      	str	r1, [sp, #0]
 80023dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80023e0:	4906      	ldr	r1, [pc, #24]	; (80023fc <__assert_func+0x34>)
 80023e2:	462b      	mov	r3, r5
 80023e4:	f000 f80e 	bl	8002404 <fiprintf>
 80023e8:	f000 fc8e 	bl	8002d08 <abort>
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <__assert_func+0x38>)
 80023ee:	461c      	mov	r4, r3
 80023f0:	e7f3      	b.n	80023da <__assert_func+0x12>
 80023f2:	bf00      	nop
 80023f4:	2000000c 	.word	0x2000000c
 80023f8:	0800444a 	.word	0x0800444a
 80023fc:	08004457 	.word	0x08004457
 8002400:	08004485 	.word	0x08004485

08002404 <fiprintf>:
 8002404:	b40e      	push	{r1, r2, r3}
 8002406:	b503      	push	{r0, r1, lr}
 8002408:	4601      	mov	r1, r0
 800240a:	ab03      	add	r3, sp, #12
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <fiprintf+0x20>)
 800240e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002412:	6800      	ldr	r0, [r0, #0]
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	f000 f8e3 	bl	80025e0 <_vfiprintf_r>
 800241a:	b002      	add	sp, #8
 800241c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002420:	b003      	add	sp, #12
 8002422:	4770      	bx	lr
 8002424:	2000000c 	.word	0x2000000c

08002428 <malloc>:
 8002428:	4b02      	ldr	r3, [pc, #8]	; (8002434 <malloc+0xc>)
 800242a:	4601      	mov	r1, r0
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	f000 b853 	b.w	80024d8 <_malloc_r>
 8002432:	bf00      	nop
 8002434:	2000000c 	.word	0x2000000c

08002438 <_free_r>:
 8002438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800243a:	2900      	cmp	r1, #0
 800243c:	d048      	beq.n	80024d0 <_free_r+0x98>
 800243e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002442:	9001      	str	r0, [sp, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f1a1 0404 	sub.w	r4, r1, #4
 800244a:	bfb8      	it	lt
 800244c:	18e4      	addlt	r4, r4, r3
 800244e:	f000 fe81 	bl	8003154 <__malloc_lock>
 8002452:	4a20      	ldr	r2, [pc, #128]	; (80024d4 <_free_r+0x9c>)
 8002454:	9801      	ldr	r0, [sp, #4]
 8002456:	6813      	ldr	r3, [r2, #0]
 8002458:	4615      	mov	r5, r2
 800245a:	b933      	cbnz	r3, 800246a <_free_r+0x32>
 800245c:	6063      	str	r3, [r4, #4]
 800245e:	6014      	str	r4, [r2, #0]
 8002460:	b003      	add	sp, #12
 8002462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002466:	f000 be7b 	b.w	8003160 <__malloc_unlock>
 800246a:	42a3      	cmp	r3, r4
 800246c:	d90b      	bls.n	8002486 <_free_r+0x4e>
 800246e:	6821      	ldr	r1, [r4, #0]
 8002470:	1862      	adds	r2, r4, r1
 8002472:	4293      	cmp	r3, r2
 8002474:	bf04      	itt	eq
 8002476:	681a      	ldreq	r2, [r3, #0]
 8002478:	685b      	ldreq	r3, [r3, #4]
 800247a:	6063      	str	r3, [r4, #4]
 800247c:	bf04      	itt	eq
 800247e:	1852      	addeq	r2, r2, r1
 8002480:	6022      	streq	r2, [r4, #0]
 8002482:	602c      	str	r4, [r5, #0]
 8002484:	e7ec      	b.n	8002460 <_free_r+0x28>
 8002486:	461a      	mov	r2, r3
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	b10b      	cbz	r3, 8002490 <_free_r+0x58>
 800248c:	42a3      	cmp	r3, r4
 800248e:	d9fa      	bls.n	8002486 <_free_r+0x4e>
 8002490:	6811      	ldr	r1, [r2, #0]
 8002492:	1855      	adds	r5, r2, r1
 8002494:	42a5      	cmp	r5, r4
 8002496:	d10b      	bne.n	80024b0 <_free_r+0x78>
 8002498:	6824      	ldr	r4, [r4, #0]
 800249a:	4421      	add	r1, r4
 800249c:	1854      	adds	r4, r2, r1
 800249e:	42a3      	cmp	r3, r4
 80024a0:	6011      	str	r1, [r2, #0]
 80024a2:	d1dd      	bne.n	8002460 <_free_r+0x28>
 80024a4:	681c      	ldr	r4, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	6053      	str	r3, [r2, #4]
 80024aa:	4421      	add	r1, r4
 80024ac:	6011      	str	r1, [r2, #0]
 80024ae:	e7d7      	b.n	8002460 <_free_r+0x28>
 80024b0:	d902      	bls.n	80024b8 <_free_r+0x80>
 80024b2:	230c      	movs	r3, #12
 80024b4:	6003      	str	r3, [r0, #0]
 80024b6:	e7d3      	b.n	8002460 <_free_r+0x28>
 80024b8:	6825      	ldr	r5, [r4, #0]
 80024ba:	1961      	adds	r1, r4, r5
 80024bc:	428b      	cmp	r3, r1
 80024be:	bf04      	itt	eq
 80024c0:	6819      	ldreq	r1, [r3, #0]
 80024c2:	685b      	ldreq	r3, [r3, #4]
 80024c4:	6063      	str	r3, [r4, #4]
 80024c6:	bf04      	itt	eq
 80024c8:	1949      	addeq	r1, r1, r5
 80024ca:	6021      	streq	r1, [r4, #0]
 80024cc:	6054      	str	r4, [r2, #4]
 80024ce:	e7c7      	b.n	8002460 <_free_r+0x28>
 80024d0:	b003      	add	sp, #12
 80024d2:	bd30      	pop	{r4, r5, pc}
 80024d4:	20000094 	.word	0x20000094

080024d8 <_malloc_r>:
 80024d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024da:	1ccd      	adds	r5, r1, #3
 80024dc:	f025 0503 	bic.w	r5, r5, #3
 80024e0:	3508      	adds	r5, #8
 80024e2:	2d0c      	cmp	r5, #12
 80024e4:	bf38      	it	cc
 80024e6:	250c      	movcc	r5, #12
 80024e8:	2d00      	cmp	r5, #0
 80024ea:	4606      	mov	r6, r0
 80024ec:	db01      	blt.n	80024f2 <_malloc_r+0x1a>
 80024ee:	42a9      	cmp	r1, r5
 80024f0:	d903      	bls.n	80024fa <_malloc_r+0x22>
 80024f2:	230c      	movs	r3, #12
 80024f4:	6033      	str	r3, [r6, #0]
 80024f6:	2000      	movs	r0, #0
 80024f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024fa:	f000 fe2b 	bl	8003154 <__malloc_lock>
 80024fe:	4921      	ldr	r1, [pc, #132]	; (8002584 <_malloc_r+0xac>)
 8002500:	680a      	ldr	r2, [r1, #0]
 8002502:	4614      	mov	r4, r2
 8002504:	b99c      	cbnz	r4, 800252e <_malloc_r+0x56>
 8002506:	4f20      	ldr	r7, [pc, #128]	; (8002588 <_malloc_r+0xb0>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	b923      	cbnz	r3, 8002516 <_malloc_r+0x3e>
 800250c:	4621      	mov	r1, r4
 800250e:	4630      	mov	r0, r6
 8002510:	f000 fb2a 	bl	8002b68 <_sbrk_r>
 8002514:	6038      	str	r0, [r7, #0]
 8002516:	4629      	mov	r1, r5
 8002518:	4630      	mov	r0, r6
 800251a:	f000 fb25 	bl	8002b68 <_sbrk_r>
 800251e:	1c43      	adds	r3, r0, #1
 8002520:	d123      	bne.n	800256a <_malloc_r+0x92>
 8002522:	230c      	movs	r3, #12
 8002524:	6033      	str	r3, [r6, #0]
 8002526:	4630      	mov	r0, r6
 8002528:	f000 fe1a 	bl	8003160 <__malloc_unlock>
 800252c:	e7e3      	b.n	80024f6 <_malloc_r+0x1e>
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	1b5b      	subs	r3, r3, r5
 8002532:	d417      	bmi.n	8002564 <_malloc_r+0x8c>
 8002534:	2b0b      	cmp	r3, #11
 8002536:	d903      	bls.n	8002540 <_malloc_r+0x68>
 8002538:	6023      	str	r3, [r4, #0]
 800253a:	441c      	add	r4, r3
 800253c:	6025      	str	r5, [r4, #0]
 800253e:	e004      	b.n	800254a <_malloc_r+0x72>
 8002540:	6863      	ldr	r3, [r4, #4]
 8002542:	42a2      	cmp	r2, r4
 8002544:	bf0c      	ite	eq
 8002546:	600b      	streq	r3, [r1, #0]
 8002548:	6053      	strne	r3, [r2, #4]
 800254a:	4630      	mov	r0, r6
 800254c:	f000 fe08 	bl	8003160 <__malloc_unlock>
 8002550:	f104 000b 	add.w	r0, r4, #11
 8002554:	1d23      	adds	r3, r4, #4
 8002556:	f020 0007 	bic.w	r0, r0, #7
 800255a:	1ac2      	subs	r2, r0, r3
 800255c:	d0cc      	beq.n	80024f8 <_malloc_r+0x20>
 800255e:	1a1b      	subs	r3, r3, r0
 8002560:	50a3      	str	r3, [r4, r2]
 8002562:	e7c9      	b.n	80024f8 <_malloc_r+0x20>
 8002564:	4622      	mov	r2, r4
 8002566:	6864      	ldr	r4, [r4, #4]
 8002568:	e7cc      	b.n	8002504 <_malloc_r+0x2c>
 800256a:	1cc4      	adds	r4, r0, #3
 800256c:	f024 0403 	bic.w	r4, r4, #3
 8002570:	42a0      	cmp	r0, r4
 8002572:	d0e3      	beq.n	800253c <_malloc_r+0x64>
 8002574:	1a21      	subs	r1, r4, r0
 8002576:	4630      	mov	r0, r6
 8002578:	f000 faf6 	bl	8002b68 <_sbrk_r>
 800257c:	3001      	adds	r0, #1
 800257e:	d1dd      	bne.n	800253c <_malloc_r+0x64>
 8002580:	e7cf      	b.n	8002522 <_malloc_r+0x4a>
 8002582:	bf00      	nop
 8002584:	20000094 	.word	0x20000094
 8002588:	20000098 	.word	0x20000098

0800258c <__sfputc_r>:
 800258c:	6893      	ldr	r3, [r2, #8]
 800258e:	3b01      	subs	r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	b410      	push	{r4}
 8002594:	6093      	str	r3, [r2, #8]
 8002596:	da08      	bge.n	80025aa <__sfputc_r+0x1e>
 8002598:	6994      	ldr	r4, [r2, #24]
 800259a:	42a3      	cmp	r3, r4
 800259c:	db01      	blt.n	80025a2 <__sfputc_r+0x16>
 800259e:	290a      	cmp	r1, #10
 80025a0:	d103      	bne.n	80025aa <__sfputc_r+0x1e>
 80025a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025a6:	f000 baef 	b.w	8002b88 <__swbuf_r>
 80025aa:	6813      	ldr	r3, [r2, #0]
 80025ac:	1c58      	adds	r0, r3, #1
 80025ae:	6010      	str	r0, [r2, #0]
 80025b0:	7019      	strb	r1, [r3, #0]
 80025b2:	4608      	mov	r0, r1
 80025b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <__sfputs_r>:
 80025ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025bc:	4606      	mov	r6, r0
 80025be:	460f      	mov	r7, r1
 80025c0:	4614      	mov	r4, r2
 80025c2:	18d5      	adds	r5, r2, r3
 80025c4:	42ac      	cmp	r4, r5
 80025c6:	d101      	bne.n	80025cc <__sfputs_r+0x12>
 80025c8:	2000      	movs	r0, #0
 80025ca:	e007      	b.n	80025dc <__sfputs_r+0x22>
 80025cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025d0:	463a      	mov	r2, r7
 80025d2:	4630      	mov	r0, r6
 80025d4:	f7ff ffda 	bl	800258c <__sfputc_r>
 80025d8:	1c43      	adds	r3, r0, #1
 80025da:	d1f3      	bne.n	80025c4 <__sfputs_r+0xa>
 80025dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025e0 <_vfiprintf_r>:
 80025e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025e4:	460d      	mov	r5, r1
 80025e6:	b09d      	sub	sp, #116	; 0x74
 80025e8:	4614      	mov	r4, r2
 80025ea:	4698      	mov	r8, r3
 80025ec:	4606      	mov	r6, r0
 80025ee:	b118      	cbz	r0, 80025f8 <_vfiprintf_r+0x18>
 80025f0:	6983      	ldr	r3, [r0, #24]
 80025f2:	b90b      	cbnz	r3, 80025f8 <_vfiprintf_r+0x18>
 80025f4:	f000 fcaa 	bl	8002f4c <__sinit>
 80025f8:	4b89      	ldr	r3, [pc, #548]	; (8002820 <_vfiprintf_r+0x240>)
 80025fa:	429d      	cmp	r5, r3
 80025fc:	d11b      	bne.n	8002636 <_vfiprintf_r+0x56>
 80025fe:	6875      	ldr	r5, [r6, #4]
 8002600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002602:	07d9      	lsls	r1, r3, #31
 8002604:	d405      	bmi.n	8002612 <_vfiprintf_r+0x32>
 8002606:	89ab      	ldrh	r3, [r5, #12]
 8002608:	059a      	lsls	r2, r3, #22
 800260a:	d402      	bmi.n	8002612 <_vfiprintf_r+0x32>
 800260c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800260e:	f000 fd3b 	bl	8003088 <__retarget_lock_acquire_recursive>
 8002612:	89ab      	ldrh	r3, [r5, #12]
 8002614:	071b      	lsls	r3, r3, #28
 8002616:	d501      	bpl.n	800261c <_vfiprintf_r+0x3c>
 8002618:	692b      	ldr	r3, [r5, #16]
 800261a:	b9eb      	cbnz	r3, 8002658 <_vfiprintf_r+0x78>
 800261c:	4629      	mov	r1, r5
 800261e:	4630      	mov	r0, r6
 8002620:	f000 fb04 	bl	8002c2c <__swsetup_r>
 8002624:	b1c0      	cbz	r0, 8002658 <_vfiprintf_r+0x78>
 8002626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002628:	07dc      	lsls	r4, r3, #31
 800262a:	d50e      	bpl.n	800264a <_vfiprintf_r+0x6a>
 800262c:	f04f 30ff 	mov.w	r0, #4294967295
 8002630:	b01d      	add	sp, #116	; 0x74
 8002632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002636:	4b7b      	ldr	r3, [pc, #492]	; (8002824 <_vfiprintf_r+0x244>)
 8002638:	429d      	cmp	r5, r3
 800263a:	d101      	bne.n	8002640 <_vfiprintf_r+0x60>
 800263c:	68b5      	ldr	r5, [r6, #8]
 800263e:	e7df      	b.n	8002600 <_vfiprintf_r+0x20>
 8002640:	4b79      	ldr	r3, [pc, #484]	; (8002828 <_vfiprintf_r+0x248>)
 8002642:	429d      	cmp	r5, r3
 8002644:	bf08      	it	eq
 8002646:	68f5      	ldreq	r5, [r6, #12]
 8002648:	e7da      	b.n	8002600 <_vfiprintf_r+0x20>
 800264a:	89ab      	ldrh	r3, [r5, #12]
 800264c:	0598      	lsls	r0, r3, #22
 800264e:	d4ed      	bmi.n	800262c <_vfiprintf_r+0x4c>
 8002650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002652:	f000 fd1a 	bl	800308a <__retarget_lock_release_recursive>
 8002656:	e7e9      	b.n	800262c <_vfiprintf_r+0x4c>
 8002658:	2300      	movs	r3, #0
 800265a:	9309      	str	r3, [sp, #36]	; 0x24
 800265c:	2320      	movs	r3, #32
 800265e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002662:	f8cd 800c 	str.w	r8, [sp, #12]
 8002666:	2330      	movs	r3, #48	; 0x30
 8002668:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800282c <_vfiprintf_r+0x24c>
 800266c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002670:	f04f 0901 	mov.w	r9, #1
 8002674:	4623      	mov	r3, r4
 8002676:	469a      	mov	sl, r3
 8002678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800267c:	b10a      	cbz	r2, 8002682 <_vfiprintf_r+0xa2>
 800267e:	2a25      	cmp	r2, #37	; 0x25
 8002680:	d1f9      	bne.n	8002676 <_vfiprintf_r+0x96>
 8002682:	ebba 0b04 	subs.w	fp, sl, r4
 8002686:	d00b      	beq.n	80026a0 <_vfiprintf_r+0xc0>
 8002688:	465b      	mov	r3, fp
 800268a:	4622      	mov	r2, r4
 800268c:	4629      	mov	r1, r5
 800268e:	4630      	mov	r0, r6
 8002690:	f7ff ff93 	bl	80025ba <__sfputs_r>
 8002694:	3001      	adds	r0, #1
 8002696:	f000 80aa 	beq.w	80027ee <_vfiprintf_r+0x20e>
 800269a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800269c:	445a      	add	r2, fp
 800269e:	9209      	str	r2, [sp, #36]	; 0x24
 80026a0:	f89a 3000 	ldrb.w	r3, [sl]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80a2 	beq.w	80027ee <_vfiprintf_r+0x20e>
 80026aa:	2300      	movs	r3, #0
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295
 80026b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026b4:	f10a 0a01 	add.w	sl, sl, #1
 80026b8:	9304      	str	r3, [sp, #16]
 80026ba:	9307      	str	r3, [sp, #28]
 80026bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026c0:	931a      	str	r3, [sp, #104]	; 0x68
 80026c2:	4654      	mov	r4, sl
 80026c4:	2205      	movs	r2, #5
 80026c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026ca:	4858      	ldr	r0, [pc, #352]	; (800282c <_vfiprintf_r+0x24c>)
 80026cc:	f7fd fdb8 	bl	8000240 <memchr>
 80026d0:	9a04      	ldr	r2, [sp, #16]
 80026d2:	b9d8      	cbnz	r0, 800270c <_vfiprintf_r+0x12c>
 80026d4:	06d1      	lsls	r1, r2, #27
 80026d6:	bf44      	itt	mi
 80026d8:	2320      	movmi	r3, #32
 80026da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026de:	0713      	lsls	r3, r2, #28
 80026e0:	bf44      	itt	mi
 80026e2:	232b      	movmi	r3, #43	; 0x2b
 80026e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026e8:	f89a 3000 	ldrb.w	r3, [sl]
 80026ec:	2b2a      	cmp	r3, #42	; 0x2a
 80026ee:	d015      	beq.n	800271c <_vfiprintf_r+0x13c>
 80026f0:	9a07      	ldr	r2, [sp, #28]
 80026f2:	4654      	mov	r4, sl
 80026f4:	2000      	movs	r0, #0
 80026f6:	f04f 0c0a 	mov.w	ip, #10
 80026fa:	4621      	mov	r1, r4
 80026fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002700:	3b30      	subs	r3, #48	; 0x30
 8002702:	2b09      	cmp	r3, #9
 8002704:	d94e      	bls.n	80027a4 <_vfiprintf_r+0x1c4>
 8002706:	b1b0      	cbz	r0, 8002736 <_vfiprintf_r+0x156>
 8002708:	9207      	str	r2, [sp, #28]
 800270a:	e014      	b.n	8002736 <_vfiprintf_r+0x156>
 800270c:	eba0 0308 	sub.w	r3, r0, r8
 8002710:	fa09 f303 	lsl.w	r3, r9, r3
 8002714:	4313      	orrs	r3, r2
 8002716:	9304      	str	r3, [sp, #16]
 8002718:	46a2      	mov	sl, r4
 800271a:	e7d2      	b.n	80026c2 <_vfiprintf_r+0xe2>
 800271c:	9b03      	ldr	r3, [sp, #12]
 800271e:	1d19      	adds	r1, r3, #4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	9103      	str	r1, [sp, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	bfbb      	ittet	lt
 8002728:	425b      	neglt	r3, r3
 800272a:	f042 0202 	orrlt.w	r2, r2, #2
 800272e:	9307      	strge	r3, [sp, #28]
 8002730:	9307      	strlt	r3, [sp, #28]
 8002732:	bfb8      	it	lt
 8002734:	9204      	strlt	r2, [sp, #16]
 8002736:	7823      	ldrb	r3, [r4, #0]
 8002738:	2b2e      	cmp	r3, #46	; 0x2e
 800273a:	d10c      	bne.n	8002756 <_vfiprintf_r+0x176>
 800273c:	7863      	ldrb	r3, [r4, #1]
 800273e:	2b2a      	cmp	r3, #42	; 0x2a
 8002740:	d135      	bne.n	80027ae <_vfiprintf_r+0x1ce>
 8002742:	9b03      	ldr	r3, [sp, #12]
 8002744:	1d1a      	adds	r2, r3, #4
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	9203      	str	r2, [sp, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	bfb8      	it	lt
 800274e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002752:	3402      	adds	r4, #2
 8002754:	9305      	str	r3, [sp, #20]
 8002756:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800283c <_vfiprintf_r+0x25c>
 800275a:	7821      	ldrb	r1, [r4, #0]
 800275c:	2203      	movs	r2, #3
 800275e:	4650      	mov	r0, sl
 8002760:	f7fd fd6e 	bl	8000240 <memchr>
 8002764:	b140      	cbz	r0, 8002778 <_vfiprintf_r+0x198>
 8002766:	2340      	movs	r3, #64	; 0x40
 8002768:	eba0 000a 	sub.w	r0, r0, sl
 800276c:	fa03 f000 	lsl.w	r0, r3, r0
 8002770:	9b04      	ldr	r3, [sp, #16]
 8002772:	4303      	orrs	r3, r0
 8002774:	3401      	adds	r4, #1
 8002776:	9304      	str	r3, [sp, #16]
 8002778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800277c:	482c      	ldr	r0, [pc, #176]	; (8002830 <_vfiprintf_r+0x250>)
 800277e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002782:	2206      	movs	r2, #6
 8002784:	f7fd fd5c 	bl	8000240 <memchr>
 8002788:	2800      	cmp	r0, #0
 800278a:	d03f      	beq.n	800280c <_vfiprintf_r+0x22c>
 800278c:	4b29      	ldr	r3, [pc, #164]	; (8002834 <_vfiprintf_r+0x254>)
 800278e:	bb1b      	cbnz	r3, 80027d8 <_vfiprintf_r+0x1f8>
 8002790:	9b03      	ldr	r3, [sp, #12]
 8002792:	3307      	adds	r3, #7
 8002794:	f023 0307 	bic.w	r3, r3, #7
 8002798:	3308      	adds	r3, #8
 800279a:	9303      	str	r3, [sp, #12]
 800279c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800279e:	443b      	add	r3, r7
 80027a0:	9309      	str	r3, [sp, #36]	; 0x24
 80027a2:	e767      	b.n	8002674 <_vfiprintf_r+0x94>
 80027a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80027a8:	460c      	mov	r4, r1
 80027aa:	2001      	movs	r0, #1
 80027ac:	e7a5      	b.n	80026fa <_vfiprintf_r+0x11a>
 80027ae:	2300      	movs	r3, #0
 80027b0:	3401      	adds	r4, #1
 80027b2:	9305      	str	r3, [sp, #20]
 80027b4:	4619      	mov	r1, r3
 80027b6:	f04f 0c0a 	mov.w	ip, #10
 80027ba:	4620      	mov	r0, r4
 80027bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027c0:	3a30      	subs	r2, #48	; 0x30
 80027c2:	2a09      	cmp	r2, #9
 80027c4:	d903      	bls.n	80027ce <_vfiprintf_r+0x1ee>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0c5      	beq.n	8002756 <_vfiprintf_r+0x176>
 80027ca:	9105      	str	r1, [sp, #20]
 80027cc:	e7c3      	b.n	8002756 <_vfiprintf_r+0x176>
 80027ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80027d2:	4604      	mov	r4, r0
 80027d4:	2301      	movs	r3, #1
 80027d6:	e7f0      	b.n	80027ba <_vfiprintf_r+0x1da>
 80027d8:	ab03      	add	r3, sp, #12
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	462a      	mov	r2, r5
 80027de:	4b16      	ldr	r3, [pc, #88]	; (8002838 <_vfiprintf_r+0x258>)
 80027e0:	a904      	add	r1, sp, #16
 80027e2:	4630      	mov	r0, r6
 80027e4:	f3af 8000 	nop.w
 80027e8:	4607      	mov	r7, r0
 80027ea:	1c78      	adds	r0, r7, #1
 80027ec:	d1d6      	bne.n	800279c <_vfiprintf_r+0x1bc>
 80027ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027f0:	07d9      	lsls	r1, r3, #31
 80027f2:	d405      	bmi.n	8002800 <_vfiprintf_r+0x220>
 80027f4:	89ab      	ldrh	r3, [r5, #12]
 80027f6:	059a      	lsls	r2, r3, #22
 80027f8:	d402      	bmi.n	8002800 <_vfiprintf_r+0x220>
 80027fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027fc:	f000 fc45 	bl	800308a <__retarget_lock_release_recursive>
 8002800:	89ab      	ldrh	r3, [r5, #12]
 8002802:	065b      	lsls	r3, r3, #25
 8002804:	f53f af12 	bmi.w	800262c <_vfiprintf_r+0x4c>
 8002808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800280a:	e711      	b.n	8002630 <_vfiprintf_r+0x50>
 800280c:	ab03      	add	r3, sp, #12
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	462a      	mov	r2, r5
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <_vfiprintf_r+0x258>)
 8002814:	a904      	add	r1, sp, #16
 8002816:	4630      	mov	r0, r6
 8002818:	f000 f880 	bl	800291c <_printf_i>
 800281c:	e7e4      	b.n	80027e8 <_vfiprintf_r+0x208>
 800281e:	bf00      	nop
 8002820:	080044dc 	.word	0x080044dc
 8002824:	080044fc 	.word	0x080044fc
 8002828:	080044bc 	.word	0x080044bc
 800282c:	08004486 	.word	0x08004486
 8002830:	08004490 	.word	0x08004490
 8002834:	00000000 	.word	0x00000000
 8002838:	080025bb 	.word	0x080025bb
 800283c:	0800448c 	.word	0x0800448c

08002840 <_printf_common>:
 8002840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002844:	4616      	mov	r6, r2
 8002846:	4699      	mov	r9, r3
 8002848:	688a      	ldr	r2, [r1, #8]
 800284a:	690b      	ldr	r3, [r1, #16]
 800284c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002850:	4293      	cmp	r3, r2
 8002852:	bfb8      	it	lt
 8002854:	4613      	movlt	r3, r2
 8002856:	6033      	str	r3, [r6, #0]
 8002858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800285c:	4607      	mov	r7, r0
 800285e:	460c      	mov	r4, r1
 8002860:	b10a      	cbz	r2, 8002866 <_printf_common+0x26>
 8002862:	3301      	adds	r3, #1
 8002864:	6033      	str	r3, [r6, #0]
 8002866:	6823      	ldr	r3, [r4, #0]
 8002868:	0699      	lsls	r1, r3, #26
 800286a:	bf42      	ittt	mi
 800286c:	6833      	ldrmi	r3, [r6, #0]
 800286e:	3302      	addmi	r3, #2
 8002870:	6033      	strmi	r3, [r6, #0]
 8002872:	6825      	ldr	r5, [r4, #0]
 8002874:	f015 0506 	ands.w	r5, r5, #6
 8002878:	d106      	bne.n	8002888 <_printf_common+0x48>
 800287a:	f104 0a19 	add.w	sl, r4, #25
 800287e:	68e3      	ldr	r3, [r4, #12]
 8002880:	6832      	ldr	r2, [r6, #0]
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	42ab      	cmp	r3, r5
 8002886:	dc26      	bgt.n	80028d6 <_printf_common+0x96>
 8002888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800288c:	1e13      	subs	r3, r2, #0
 800288e:	6822      	ldr	r2, [r4, #0]
 8002890:	bf18      	it	ne
 8002892:	2301      	movne	r3, #1
 8002894:	0692      	lsls	r2, r2, #26
 8002896:	d42b      	bmi.n	80028f0 <_printf_common+0xb0>
 8002898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800289c:	4649      	mov	r1, r9
 800289e:	4638      	mov	r0, r7
 80028a0:	47c0      	blx	r8
 80028a2:	3001      	adds	r0, #1
 80028a4:	d01e      	beq.n	80028e4 <_printf_common+0xa4>
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	68e5      	ldr	r5, [r4, #12]
 80028aa:	6832      	ldr	r2, [r6, #0]
 80028ac:	f003 0306 	and.w	r3, r3, #6
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	bf08      	it	eq
 80028b4:	1aad      	subeq	r5, r5, r2
 80028b6:	68a3      	ldr	r3, [r4, #8]
 80028b8:	6922      	ldr	r2, [r4, #16]
 80028ba:	bf0c      	ite	eq
 80028bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028c0:	2500      	movne	r5, #0
 80028c2:	4293      	cmp	r3, r2
 80028c4:	bfc4      	itt	gt
 80028c6:	1a9b      	subgt	r3, r3, r2
 80028c8:	18ed      	addgt	r5, r5, r3
 80028ca:	2600      	movs	r6, #0
 80028cc:	341a      	adds	r4, #26
 80028ce:	42b5      	cmp	r5, r6
 80028d0:	d11a      	bne.n	8002908 <_printf_common+0xc8>
 80028d2:	2000      	movs	r0, #0
 80028d4:	e008      	b.n	80028e8 <_printf_common+0xa8>
 80028d6:	2301      	movs	r3, #1
 80028d8:	4652      	mov	r2, sl
 80028da:	4649      	mov	r1, r9
 80028dc:	4638      	mov	r0, r7
 80028de:	47c0      	blx	r8
 80028e0:	3001      	adds	r0, #1
 80028e2:	d103      	bne.n	80028ec <_printf_common+0xac>
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028ec:	3501      	adds	r5, #1
 80028ee:	e7c6      	b.n	800287e <_printf_common+0x3e>
 80028f0:	18e1      	adds	r1, r4, r3
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	2030      	movs	r0, #48	; 0x30
 80028f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028fa:	4422      	add	r2, r4
 80028fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002904:	3302      	adds	r3, #2
 8002906:	e7c7      	b.n	8002898 <_printf_common+0x58>
 8002908:	2301      	movs	r3, #1
 800290a:	4622      	mov	r2, r4
 800290c:	4649      	mov	r1, r9
 800290e:	4638      	mov	r0, r7
 8002910:	47c0      	blx	r8
 8002912:	3001      	adds	r0, #1
 8002914:	d0e6      	beq.n	80028e4 <_printf_common+0xa4>
 8002916:	3601      	adds	r6, #1
 8002918:	e7d9      	b.n	80028ce <_printf_common+0x8e>
	...

0800291c <_printf_i>:
 800291c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002920:	460c      	mov	r4, r1
 8002922:	4691      	mov	r9, r2
 8002924:	7e27      	ldrb	r7, [r4, #24]
 8002926:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002928:	2f78      	cmp	r7, #120	; 0x78
 800292a:	4680      	mov	r8, r0
 800292c:	469a      	mov	sl, r3
 800292e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002932:	d807      	bhi.n	8002944 <_printf_i+0x28>
 8002934:	2f62      	cmp	r7, #98	; 0x62
 8002936:	d80a      	bhi.n	800294e <_printf_i+0x32>
 8002938:	2f00      	cmp	r7, #0
 800293a:	f000 80d8 	beq.w	8002aee <_printf_i+0x1d2>
 800293e:	2f58      	cmp	r7, #88	; 0x58
 8002940:	f000 80a3 	beq.w	8002a8a <_printf_i+0x16e>
 8002944:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800294c:	e03a      	b.n	80029c4 <_printf_i+0xa8>
 800294e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002952:	2b15      	cmp	r3, #21
 8002954:	d8f6      	bhi.n	8002944 <_printf_i+0x28>
 8002956:	a001      	add	r0, pc, #4	; (adr r0, 800295c <_printf_i+0x40>)
 8002958:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800295c:	080029b5 	.word	0x080029b5
 8002960:	080029c9 	.word	0x080029c9
 8002964:	08002945 	.word	0x08002945
 8002968:	08002945 	.word	0x08002945
 800296c:	08002945 	.word	0x08002945
 8002970:	08002945 	.word	0x08002945
 8002974:	080029c9 	.word	0x080029c9
 8002978:	08002945 	.word	0x08002945
 800297c:	08002945 	.word	0x08002945
 8002980:	08002945 	.word	0x08002945
 8002984:	08002945 	.word	0x08002945
 8002988:	08002ad5 	.word	0x08002ad5
 800298c:	080029f9 	.word	0x080029f9
 8002990:	08002ab7 	.word	0x08002ab7
 8002994:	08002945 	.word	0x08002945
 8002998:	08002945 	.word	0x08002945
 800299c:	08002af7 	.word	0x08002af7
 80029a0:	08002945 	.word	0x08002945
 80029a4:	080029f9 	.word	0x080029f9
 80029a8:	08002945 	.word	0x08002945
 80029ac:	08002945 	.word	0x08002945
 80029b0:	08002abf 	.word	0x08002abf
 80029b4:	680b      	ldr	r3, [r1, #0]
 80029b6:	1d1a      	adds	r2, r3, #4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	600a      	str	r2, [r1, #0]
 80029bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80029c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0a3      	b.n	8002b10 <_printf_i+0x1f4>
 80029c8:	6825      	ldr	r5, [r4, #0]
 80029ca:	6808      	ldr	r0, [r1, #0]
 80029cc:	062e      	lsls	r6, r5, #24
 80029ce:	f100 0304 	add.w	r3, r0, #4
 80029d2:	d50a      	bpl.n	80029ea <_printf_i+0xce>
 80029d4:	6805      	ldr	r5, [r0, #0]
 80029d6:	600b      	str	r3, [r1, #0]
 80029d8:	2d00      	cmp	r5, #0
 80029da:	da03      	bge.n	80029e4 <_printf_i+0xc8>
 80029dc:	232d      	movs	r3, #45	; 0x2d
 80029de:	426d      	negs	r5, r5
 80029e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029e4:	485e      	ldr	r0, [pc, #376]	; (8002b60 <_printf_i+0x244>)
 80029e6:	230a      	movs	r3, #10
 80029e8:	e019      	b.n	8002a1e <_printf_i+0x102>
 80029ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80029ee:	6805      	ldr	r5, [r0, #0]
 80029f0:	600b      	str	r3, [r1, #0]
 80029f2:	bf18      	it	ne
 80029f4:	b22d      	sxthne	r5, r5
 80029f6:	e7ef      	b.n	80029d8 <_printf_i+0xbc>
 80029f8:	680b      	ldr	r3, [r1, #0]
 80029fa:	6825      	ldr	r5, [r4, #0]
 80029fc:	1d18      	adds	r0, r3, #4
 80029fe:	6008      	str	r0, [r1, #0]
 8002a00:	0628      	lsls	r0, r5, #24
 8002a02:	d501      	bpl.n	8002a08 <_printf_i+0xec>
 8002a04:	681d      	ldr	r5, [r3, #0]
 8002a06:	e002      	b.n	8002a0e <_printf_i+0xf2>
 8002a08:	0669      	lsls	r1, r5, #25
 8002a0a:	d5fb      	bpl.n	8002a04 <_printf_i+0xe8>
 8002a0c:	881d      	ldrh	r5, [r3, #0]
 8002a0e:	4854      	ldr	r0, [pc, #336]	; (8002b60 <_printf_i+0x244>)
 8002a10:	2f6f      	cmp	r7, #111	; 0x6f
 8002a12:	bf0c      	ite	eq
 8002a14:	2308      	moveq	r3, #8
 8002a16:	230a      	movne	r3, #10
 8002a18:	2100      	movs	r1, #0
 8002a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a1e:	6866      	ldr	r6, [r4, #4]
 8002a20:	60a6      	str	r6, [r4, #8]
 8002a22:	2e00      	cmp	r6, #0
 8002a24:	bfa2      	ittt	ge
 8002a26:	6821      	ldrge	r1, [r4, #0]
 8002a28:	f021 0104 	bicge.w	r1, r1, #4
 8002a2c:	6021      	strge	r1, [r4, #0]
 8002a2e:	b90d      	cbnz	r5, 8002a34 <_printf_i+0x118>
 8002a30:	2e00      	cmp	r6, #0
 8002a32:	d04d      	beq.n	8002ad0 <_printf_i+0x1b4>
 8002a34:	4616      	mov	r6, r2
 8002a36:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a3a:	fb03 5711 	mls	r7, r3, r1, r5
 8002a3e:	5dc7      	ldrb	r7, [r0, r7]
 8002a40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002a44:	462f      	mov	r7, r5
 8002a46:	42bb      	cmp	r3, r7
 8002a48:	460d      	mov	r5, r1
 8002a4a:	d9f4      	bls.n	8002a36 <_printf_i+0x11a>
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d10b      	bne.n	8002a68 <_printf_i+0x14c>
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	07df      	lsls	r7, r3, #31
 8002a54:	d508      	bpl.n	8002a68 <_printf_i+0x14c>
 8002a56:	6923      	ldr	r3, [r4, #16]
 8002a58:	6861      	ldr	r1, [r4, #4]
 8002a5a:	4299      	cmp	r1, r3
 8002a5c:	bfde      	ittt	le
 8002a5e:	2330      	movle	r3, #48	; 0x30
 8002a60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002a68:	1b92      	subs	r2, r2, r6
 8002a6a:	6122      	str	r2, [r4, #16]
 8002a6c:	f8cd a000 	str.w	sl, [sp]
 8002a70:	464b      	mov	r3, r9
 8002a72:	aa03      	add	r2, sp, #12
 8002a74:	4621      	mov	r1, r4
 8002a76:	4640      	mov	r0, r8
 8002a78:	f7ff fee2 	bl	8002840 <_printf_common>
 8002a7c:	3001      	adds	r0, #1
 8002a7e:	d14c      	bne.n	8002b1a <_printf_i+0x1fe>
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	b004      	add	sp, #16
 8002a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a8a:	4835      	ldr	r0, [pc, #212]	; (8002b60 <_printf_i+0x244>)
 8002a8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	680e      	ldr	r6, [r1, #0]
 8002a94:	061f      	lsls	r7, r3, #24
 8002a96:	f856 5b04 	ldr.w	r5, [r6], #4
 8002a9a:	600e      	str	r6, [r1, #0]
 8002a9c:	d514      	bpl.n	8002ac8 <_printf_i+0x1ac>
 8002a9e:	07d9      	lsls	r1, r3, #31
 8002aa0:	bf44      	itt	mi
 8002aa2:	f043 0320 	orrmi.w	r3, r3, #32
 8002aa6:	6023      	strmi	r3, [r4, #0]
 8002aa8:	b91d      	cbnz	r5, 8002ab2 <_printf_i+0x196>
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	f023 0320 	bic.w	r3, r3, #32
 8002ab0:	6023      	str	r3, [r4, #0]
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	e7b0      	b.n	8002a18 <_printf_i+0xfc>
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	f043 0320 	orr.w	r3, r3, #32
 8002abc:	6023      	str	r3, [r4, #0]
 8002abe:	2378      	movs	r3, #120	; 0x78
 8002ac0:	4828      	ldr	r0, [pc, #160]	; (8002b64 <_printf_i+0x248>)
 8002ac2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ac6:	e7e3      	b.n	8002a90 <_printf_i+0x174>
 8002ac8:	065e      	lsls	r6, r3, #25
 8002aca:	bf48      	it	mi
 8002acc:	b2ad      	uxthmi	r5, r5
 8002ace:	e7e6      	b.n	8002a9e <_printf_i+0x182>
 8002ad0:	4616      	mov	r6, r2
 8002ad2:	e7bb      	b.n	8002a4c <_printf_i+0x130>
 8002ad4:	680b      	ldr	r3, [r1, #0]
 8002ad6:	6826      	ldr	r6, [r4, #0]
 8002ad8:	6960      	ldr	r0, [r4, #20]
 8002ada:	1d1d      	adds	r5, r3, #4
 8002adc:	600d      	str	r5, [r1, #0]
 8002ade:	0635      	lsls	r5, r6, #24
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	d501      	bpl.n	8002ae8 <_printf_i+0x1cc>
 8002ae4:	6018      	str	r0, [r3, #0]
 8002ae6:	e002      	b.n	8002aee <_printf_i+0x1d2>
 8002ae8:	0671      	lsls	r1, r6, #25
 8002aea:	d5fb      	bpl.n	8002ae4 <_printf_i+0x1c8>
 8002aec:	8018      	strh	r0, [r3, #0]
 8002aee:	2300      	movs	r3, #0
 8002af0:	6123      	str	r3, [r4, #16]
 8002af2:	4616      	mov	r6, r2
 8002af4:	e7ba      	b.n	8002a6c <_printf_i+0x150>
 8002af6:	680b      	ldr	r3, [r1, #0]
 8002af8:	1d1a      	adds	r2, r3, #4
 8002afa:	600a      	str	r2, [r1, #0]
 8002afc:	681e      	ldr	r6, [r3, #0]
 8002afe:	6862      	ldr	r2, [r4, #4]
 8002b00:	2100      	movs	r1, #0
 8002b02:	4630      	mov	r0, r6
 8002b04:	f7fd fb9c 	bl	8000240 <memchr>
 8002b08:	b108      	cbz	r0, 8002b0e <_printf_i+0x1f2>
 8002b0a:	1b80      	subs	r0, r0, r6
 8002b0c:	6060      	str	r0, [r4, #4]
 8002b0e:	6863      	ldr	r3, [r4, #4]
 8002b10:	6123      	str	r3, [r4, #16]
 8002b12:	2300      	movs	r3, #0
 8002b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b18:	e7a8      	b.n	8002a6c <_printf_i+0x150>
 8002b1a:	6923      	ldr	r3, [r4, #16]
 8002b1c:	4632      	mov	r2, r6
 8002b1e:	4649      	mov	r1, r9
 8002b20:	4640      	mov	r0, r8
 8002b22:	47d0      	blx	sl
 8002b24:	3001      	adds	r0, #1
 8002b26:	d0ab      	beq.n	8002a80 <_printf_i+0x164>
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	079b      	lsls	r3, r3, #30
 8002b2c:	d413      	bmi.n	8002b56 <_printf_i+0x23a>
 8002b2e:	68e0      	ldr	r0, [r4, #12]
 8002b30:	9b03      	ldr	r3, [sp, #12]
 8002b32:	4298      	cmp	r0, r3
 8002b34:	bfb8      	it	lt
 8002b36:	4618      	movlt	r0, r3
 8002b38:	e7a4      	b.n	8002a84 <_printf_i+0x168>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	4632      	mov	r2, r6
 8002b3e:	4649      	mov	r1, r9
 8002b40:	4640      	mov	r0, r8
 8002b42:	47d0      	blx	sl
 8002b44:	3001      	adds	r0, #1
 8002b46:	d09b      	beq.n	8002a80 <_printf_i+0x164>
 8002b48:	3501      	adds	r5, #1
 8002b4a:	68e3      	ldr	r3, [r4, #12]
 8002b4c:	9903      	ldr	r1, [sp, #12]
 8002b4e:	1a5b      	subs	r3, r3, r1
 8002b50:	42ab      	cmp	r3, r5
 8002b52:	dcf2      	bgt.n	8002b3a <_printf_i+0x21e>
 8002b54:	e7eb      	b.n	8002b2e <_printf_i+0x212>
 8002b56:	2500      	movs	r5, #0
 8002b58:	f104 0619 	add.w	r6, r4, #25
 8002b5c:	e7f5      	b.n	8002b4a <_printf_i+0x22e>
 8002b5e:	bf00      	nop
 8002b60:	08004497 	.word	0x08004497
 8002b64:	080044a8 	.word	0x080044a8

08002b68 <_sbrk_r>:
 8002b68:	b538      	push	{r3, r4, r5, lr}
 8002b6a:	4d06      	ldr	r5, [pc, #24]	; (8002b84 <_sbrk_r+0x1c>)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	4604      	mov	r4, r0
 8002b70:	4608      	mov	r0, r1
 8002b72:	602b      	str	r3, [r5, #0]
 8002b74:	f7fe fb3e 	bl	80011f4 <_sbrk>
 8002b78:	1c43      	adds	r3, r0, #1
 8002b7a:	d102      	bne.n	8002b82 <_sbrk_r+0x1a>
 8002b7c:	682b      	ldr	r3, [r5, #0]
 8002b7e:	b103      	cbz	r3, 8002b82 <_sbrk_r+0x1a>
 8002b80:	6023      	str	r3, [r4, #0]
 8002b82:	bd38      	pop	{r3, r4, r5, pc}
 8002b84:	200000ac 	.word	0x200000ac

08002b88 <__swbuf_r>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	460e      	mov	r6, r1
 8002b8c:	4614      	mov	r4, r2
 8002b8e:	4605      	mov	r5, r0
 8002b90:	b118      	cbz	r0, 8002b9a <__swbuf_r+0x12>
 8002b92:	6983      	ldr	r3, [r0, #24]
 8002b94:	b90b      	cbnz	r3, 8002b9a <__swbuf_r+0x12>
 8002b96:	f000 f9d9 	bl	8002f4c <__sinit>
 8002b9a:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <__swbuf_r+0x98>)
 8002b9c:	429c      	cmp	r4, r3
 8002b9e:	d12b      	bne.n	8002bf8 <__swbuf_r+0x70>
 8002ba0:	686c      	ldr	r4, [r5, #4]
 8002ba2:	69a3      	ldr	r3, [r4, #24]
 8002ba4:	60a3      	str	r3, [r4, #8]
 8002ba6:	89a3      	ldrh	r3, [r4, #12]
 8002ba8:	071a      	lsls	r2, r3, #28
 8002baa:	d52f      	bpl.n	8002c0c <__swbuf_r+0x84>
 8002bac:	6923      	ldr	r3, [r4, #16]
 8002bae:	b36b      	cbz	r3, 8002c0c <__swbuf_r+0x84>
 8002bb0:	6923      	ldr	r3, [r4, #16]
 8002bb2:	6820      	ldr	r0, [r4, #0]
 8002bb4:	1ac0      	subs	r0, r0, r3
 8002bb6:	6963      	ldr	r3, [r4, #20]
 8002bb8:	b2f6      	uxtb	r6, r6
 8002bba:	4283      	cmp	r3, r0
 8002bbc:	4637      	mov	r7, r6
 8002bbe:	dc04      	bgt.n	8002bca <__swbuf_r+0x42>
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	f000 f92e 	bl	8002e24 <_fflush_r>
 8002bc8:	bb30      	cbnz	r0, 8002c18 <__swbuf_r+0x90>
 8002bca:	68a3      	ldr	r3, [r4, #8]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	60a3      	str	r3, [r4, #8]
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	6022      	str	r2, [r4, #0]
 8002bd6:	701e      	strb	r6, [r3, #0]
 8002bd8:	6963      	ldr	r3, [r4, #20]
 8002bda:	3001      	adds	r0, #1
 8002bdc:	4283      	cmp	r3, r0
 8002bde:	d004      	beq.n	8002bea <__swbuf_r+0x62>
 8002be0:	89a3      	ldrh	r3, [r4, #12]
 8002be2:	07db      	lsls	r3, r3, #31
 8002be4:	d506      	bpl.n	8002bf4 <__swbuf_r+0x6c>
 8002be6:	2e0a      	cmp	r6, #10
 8002be8:	d104      	bne.n	8002bf4 <__swbuf_r+0x6c>
 8002bea:	4621      	mov	r1, r4
 8002bec:	4628      	mov	r0, r5
 8002bee:	f000 f919 	bl	8002e24 <_fflush_r>
 8002bf2:	b988      	cbnz	r0, 8002c18 <__swbuf_r+0x90>
 8002bf4:	4638      	mov	r0, r7
 8002bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <__swbuf_r+0x9c>)
 8002bfa:	429c      	cmp	r4, r3
 8002bfc:	d101      	bne.n	8002c02 <__swbuf_r+0x7a>
 8002bfe:	68ac      	ldr	r4, [r5, #8]
 8002c00:	e7cf      	b.n	8002ba2 <__swbuf_r+0x1a>
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <__swbuf_r+0xa0>)
 8002c04:	429c      	cmp	r4, r3
 8002c06:	bf08      	it	eq
 8002c08:	68ec      	ldreq	r4, [r5, #12]
 8002c0a:	e7ca      	b.n	8002ba2 <__swbuf_r+0x1a>
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	4628      	mov	r0, r5
 8002c10:	f000 f80c 	bl	8002c2c <__swsetup_r>
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d0cb      	beq.n	8002bb0 <__swbuf_r+0x28>
 8002c18:	f04f 37ff 	mov.w	r7, #4294967295
 8002c1c:	e7ea      	b.n	8002bf4 <__swbuf_r+0x6c>
 8002c1e:	bf00      	nop
 8002c20:	080044dc 	.word	0x080044dc
 8002c24:	080044fc 	.word	0x080044fc
 8002c28:	080044bc 	.word	0x080044bc

08002c2c <__swsetup_r>:
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <__swsetup_r+0xcc>)
 8002c2e:	b570      	push	{r4, r5, r6, lr}
 8002c30:	681d      	ldr	r5, [r3, #0]
 8002c32:	4606      	mov	r6, r0
 8002c34:	460c      	mov	r4, r1
 8002c36:	b125      	cbz	r5, 8002c42 <__swsetup_r+0x16>
 8002c38:	69ab      	ldr	r3, [r5, #24]
 8002c3a:	b913      	cbnz	r3, 8002c42 <__swsetup_r+0x16>
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f000 f985 	bl	8002f4c <__sinit>
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <__swsetup_r+0xd0>)
 8002c44:	429c      	cmp	r4, r3
 8002c46:	d10f      	bne.n	8002c68 <__swsetup_r+0x3c>
 8002c48:	686c      	ldr	r4, [r5, #4]
 8002c4a:	89a3      	ldrh	r3, [r4, #12]
 8002c4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c50:	0719      	lsls	r1, r3, #28
 8002c52:	d42c      	bmi.n	8002cae <__swsetup_r+0x82>
 8002c54:	06dd      	lsls	r5, r3, #27
 8002c56:	d411      	bmi.n	8002c7c <__swsetup_r+0x50>
 8002c58:	2309      	movs	r3, #9
 8002c5a:	6033      	str	r3, [r6, #0]
 8002c5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c60:	81a3      	strh	r3, [r4, #12]
 8002c62:	f04f 30ff 	mov.w	r0, #4294967295
 8002c66:	e03e      	b.n	8002ce6 <__swsetup_r+0xba>
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <__swsetup_r+0xd4>)
 8002c6a:	429c      	cmp	r4, r3
 8002c6c:	d101      	bne.n	8002c72 <__swsetup_r+0x46>
 8002c6e:	68ac      	ldr	r4, [r5, #8]
 8002c70:	e7eb      	b.n	8002c4a <__swsetup_r+0x1e>
 8002c72:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <__swsetup_r+0xd8>)
 8002c74:	429c      	cmp	r4, r3
 8002c76:	bf08      	it	eq
 8002c78:	68ec      	ldreq	r4, [r5, #12]
 8002c7a:	e7e6      	b.n	8002c4a <__swsetup_r+0x1e>
 8002c7c:	0758      	lsls	r0, r3, #29
 8002c7e:	d512      	bpl.n	8002ca6 <__swsetup_r+0x7a>
 8002c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c82:	b141      	cbz	r1, 8002c96 <__swsetup_r+0x6a>
 8002c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c88:	4299      	cmp	r1, r3
 8002c8a:	d002      	beq.n	8002c92 <__swsetup_r+0x66>
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	f7ff fbd3 	bl	8002438 <_free_r>
 8002c92:	2300      	movs	r3, #0
 8002c94:	6363      	str	r3, [r4, #52]	; 0x34
 8002c96:	89a3      	ldrh	r3, [r4, #12]
 8002c98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c9c:	81a3      	strh	r3, [r4, #12]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	6063      	str	r3, [r4, #4]
 8002ca2:	6923      	ldr	r3, [r4, #16]
 8002ca4:	6023      	str	r3, [r4, #0]
 8002ca6:	89a3      	ldrh	r3, [r4, #12]
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	81a3      	strh	r3, [r4, #12]
 8002cae:	6923      	ldr	r3, [r4, #16]
 8002cb0:	b94b      	cbnz	r3, 8002cc6 <__swsetup_r+0x9a>
 8002cb2:	89a3      	ldrh	r3, [r4, #12]
 8002cb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cbc:	d003      	beq.n	8002cc6 <__swsetup_r+0x9a>
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	4630      	mov	r0, r6
 8002cc2:	f000 fa07 	bl	80030d4 <__smakebuf_r>
 8002cc6:	89a0      	ldrh	r0, [r4, #12]
 8002cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ccc:	f010 0301 	ands.w	r3, r0, #1
 8002cd0:	d00a      	beq.n	8002ce8 <__swsetup_r+0xbc>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60a3      	str	r3, [r4, #8]
 8002cd6:	6963      	ldr	r3, [r4, #20]
 8002cd8:	425b      	negs	r3, r3
 8002cda:	61a3      	str	r3, [r4, #24]
 8002cdc:	6923      	ldr	r3, [r4, #16]
 8002cde:	b943      	cbnz	r3, 8002cf2 <__swsetup_r+0xc6>
 8002ce0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ce4:	d1ba      	bne.n	8002c5c <__swsetup_r+0x30>
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	0781      	lsls	r1, r0, #30
 8002cea:	bf58      	it	pl
 8002cec:	6963      	ldrpl	r3, [r4, #20]
 8002cee:	60a3      	str	r3, [r4, #8]
 8002cf0:	e7f4      	b.n	8002cdc <__swsetup_r+0xb0>
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	e7f7      	b.n	8002ce6 <__swsetup_r+0xba>
 8002cf6:	bf00      	nop
 8002cf8:	2000000c 	.word	0x2000000c
 8002cfc:	080044dc 	.word	0x080044dc
 8002d00:	080044fc 	.word	0x080044fc
 8002d04:	080044bc 	.word	0x080044bc

08002d08 <abort>:
 8002d08:	b508      	push	{r3, lr}
 8002d0a:	2006      	movs	r0, #6
 8002d0c:	f000 fa56 	bl	80031bc <raise>
 8002d10:	2001      	movs	r0, #1
 8002d12:	f7fe f9f7 	bl	8001104 <_exit>
	...

08002d18 <__sflush_r>:
 8002d18:	898a      	ldrh	r2, [r1, #12]
 8002d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d1e:	4605      	mov	r5, r0
 8002d20:	0710      	lsls	r0, r2, #28
 8002d22:	460c      	mov	r4, r1
 8002d24:	d458      	bmi.n	8002dd8 <__sflush_r+0xc0>
 8002d26:	684b      	ldr	r3, [r1, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	dc05      	bgt.n	8002d38 <__sflush_r+0x20>
 8002d2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	dc02      	bgt.n	8002d38 <__sflush_r+0x20>
 8002d32:	2000      	movs	r0, #0
 8002d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d3a:	2e00      	cmp	r6, #0
 8002d3c:	d0f9      	beq.n	8002d32 <__sflush_r+0x1a>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d44:	682f      	ldr	r7, [r5, #0]
 8002d46:	602b      	str	r3, [r5, #0]
 8002d48:	d032      	beq.n	8002db0 <__sflush_r+0x98>
 8002d4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	075a      	lsls	r2, r3, #29
 8002d50:	d505      	bpl.n	8002d5e <__sflush_r+0x46>
 8002d52:	6863      	ldr	r3, [r4, #4]
 8002d54:	1ac0      	subs	r0, r0, r3
 8002d56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d58:	b10b      	cbz	r3, 8002d5e <__sflush_r+0x46>
 8002d5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d5c:	1ac0      	subs	r0, r0, r3
 8002d5e:	2300      	movs	r3, #0
 8002d60:	4602      	mov	r2, r0
 8002d62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d64:	6a21      	ldr	r1, [r4, #32]
 8002d66:	4628      	mov	r0, r5
 8002d68:	47b0      	blx	r6
 8002d6a:	1c43      	adds	r3, r0, #1
 8002d6c:	89a3      	ldrh	r3, [r4, #12]
 8002d6e:	d106      	bne.n	8002d7e <__sflush_r+0x66>
 8002d70:	6829      	ldr	r1, [r5, #0]
 8002d72:	291d      	cmp	r1, #29
 8002d74:	d82c      	bhi.n	8002dd0 <__sflush_r+0xb8>
 8002d76:	4a2a      	ldr	r2, [pc, #168]	; (8002e20 <__sflush_r+0x108>)
 8002d78:	40ca      	lsrs	r2, r1
 8002d7a:	07d6      	lsls	r6, r2, #31
 8002d7c:	d528      	bpl.n	8002dd0 <__sflush_r+0xb8>
 8002d7e:	2200      	movs	r2, #0
 8002d80:	6062      	str	r2, [r4, #4]
 8002d82:	04d9      	lsls	r1, r3, #19
 8002d84:	6922      	ldr	r2, [r4, #16]
 8002d86:	6022      	str	r2, [r4, #0]
 8002d88:	d504      	bpl.n	8002d94 <__sflush_r+0x7c>
 8002d8a:	1c42      	adds	r2, r0, #1
 8002d8c:	d101      	bne.n	8002d92 <__sflush_r+0x7a>
 8002d8e:	682b      	ldr	r3, [r5, #0]
 8002d90:	b903      	cbnz	r3, 8002d94 <__sflush_r+0x7c>
 8002d92:	6560      	str	r0, [r4, #84]	; 0x54
 8002d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d96:	602f      	str	r7, [r5, #0]
 8002d98:	2900      	cmp	r1, #0
 8002d9a:	d0ca      	beq.n	8002d32 <__sflush_r+0x1a>
 8002d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002da0:	4299      	cmp	r1, r3
 8002da2:	d002      	beq.n	8002daa <__sflush_r+0x92>
 8002da4:	4628      	mov	r0, r5
 8002da6:	f7ff fb47 	bl	8002438 <_free_r>
 8002daa:	2000      	movs	r0, #0
 8002dac:	6360      	str	r0, [r4, #52]	; 0x34
 8002dae:	e7c1      	b.n	8002d34 <__sflush_r+0x1c>
 8002db0:	6a21      	ldr	r1, [r4, #32]
 8002db2:	2301      	movs	r3, #1
 8002db4:	4628      	mov	r0, r5
 8002db6:	47b0      	blx	r6
 8002db8:	1c41      	adds	r1, r0, #1
 8002dba:	d1c7      	bne.n	8002d4c <__sflush_r+0x34>
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0c4      	beq.n	8002d4c <__sflush_r+0x34>
 8002dc2:	2b1d      	cmp	r3, #29
 8002dc4:	d001      	beq.n	8002dca <__sflush_r+0xb2>
 8002dc6:	2b16      	cmp	r3, #22
 8002dc8:	d101      	bne.n	8002dce <__sflush_r+0xb6>
 8002dca:	602f      	str	r7, [r5, #0]
 8002dcc:	e7b1      	b.n	8002d32 <__sflush_r+0x1a>
 8002dce:	89a3      	ldrh	r3, [r4, #12]
 8002dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd4:	81a3      	strh	r3, [r4, #12]
 8002dd6:	e7ad      	b.n	8002d34 <__sflush_r+0x1c>
 8002dd8:	690f      	ldr	r7, [r1, #16]
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d0a9      	beq.n	8002d32 <__sflush_r+0x1a>
 8002dde:	0793      	lsls	r3, r2, #30
 8002de0:	680e      	ldr	r6, [r1, #0]
 8002de2:	bf08      	it	eq
 8002de4:	694b      	ldreq	r3, [r1, #20]
 8002de6:	600f      	str	r7, [r1, #0]
 8002de8:	bf18      	it	ne
 8002dea:	2300      	movne	r3, #0
 8002dec:	eba6 0807 	sub.w	r8, r6, r7
 8002df0:	608b      	str	r3, [r1, #8]
 8002df2:	f1b8 0f00 	cmp.w	r8, #0
 8002df6:	dd9c      	ble.n	8002d32 <__sflush_r+0x1a>
 8002df8:	6a21      	ldr	r1, [r4, #32]
 8002dfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002dfc:	4643      	mov	r3, r8
 8002dfe:	463a      	mov	r2, r7
 8002e00:	4628      	mov	r0, r5
 8002e02:	47b0      	blx	r6
 8002e04:	2800      	cmp	r0, #0
 8002e06:	dc06      	bgt.n	8002e16 <__sflush_r+0xfe>
 8002e08:	89a3      	ldrh	r3, [r4, #12]
 8002e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e0e:	81a3      	strh	r3, [r4, #12]
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	e78e      	b.n	8002d34 <__sflush_r+0x1c>
 8002e16:	4407      	add	r7, r0
 8002e18:	eba8 0800 	sub.w	r8, r8, r0
 8002e1c:	e7e9      	b.n	8002df2 <__sflush_r+0xda>
 8002e1e:	bf00      	nop
 8002e20:	20400001 	.word	0x20400001

08002e24 <_fflush_r>:
 8002e24:	b538      	push	{r3, r4, r5, lr}
 8002e26:	690b      	ldr	r3, [r1, #16]
 8002e28:	4605      	mov	r5, r0
 8002e2a:	460c      	mov	r4, r1
 8002e2c:	b913      	cbnz	r3, 8002e34 <_fflush_r+0x10>
 8002e2e:	2500      	movs	r5, #0
 8002e30:	4628      	mov	r0, r5
 8002e32:	bd38      	pop	{r3, r4, r5, pc}
 8002e34:	b118      	cbz	r0, 8002e3e <_fflush_r+0x1a>
 8002e36:	6983      	ldr	r3, [r0, #24]
 8002e38:	b90b      	cbnz	r3, 8002e3e <_fflush_r+0x1a>
 8002e3a:	f000 f887 	bl	8002f4c <__sinit>
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <_fflush_r+0x6c>)
 8002e40:	429c      	cmp	r4, r3
 8002e42:	d11b      	bne.n	8002e7c <_fflush_r+0x58>
 8002e44:	686c      	ldr	r4, [r5, #4]
 8002e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0ef      	beq.n	8002e2e <_fflush_r+0xa>
 8002e4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e50:	07d0      	lsls	r0, r2, #31
 8002e52:	d404      	bmi.n	8002e5e <_fflush_r+0x3a>
 8002e54:	0599      	lsls	r1, r3, #22
 8002e56:	d402      	bmi.n	8002e5e <_fflush_r+0x3a>
 8002e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e5a:	f000 f915 	bl	8003088 <__retarget_lock_acquire_recursive>
 8002e5e:	4628      	mov	r0, r5
 8002e60:	4621      	mov	r1, r4
 8002e62:	f7ff ff59 	bl	8002d18 <__sflush_r>
 8002e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e68:	07da      	lsls	r2, r3, #31
 8002e6a:	4605      	mov	r5, r0
 8002e6c:	d4e0      	bmi.n	8002e30 <_fflush_r+0xc>
 8002e6e:	89a3      	ldrh	r3, [r4, #12]
 8002e70:	059b      	lsls	r3, r3, #22
 8002e72:	d4dd      	bmi.n	8002e30 <_fflush_r+0xc>
 8002e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e76:	f000 f908 	bl	800308a <__retarget_lock_release_recursive>
 8002e7a:	e7d9      	b.n	8002e30 <_fflush_r+0xc>
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <_fflush_r+0x70>)
 8002e7e:	429c      	cmp	r4, r3
 8002e80:	d101      	bne.n	8002e86 <_fflush_r+0x62>
 8002e82:	68ac      	ldr	r4, [r5, #8]
 8002e84:	e7df      	b.n	8002e46 <_fflush_r+0x22>
 8002e86:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <_fflush_r+0x74>)
 8002e88:	429c      	cmp	r4, r3
 8002e8a:	bf08      	it	eq
 8002e8c:	68ec      	ldreq	r4, [r5, #12]
 8002e8e:	e7da      	b.n	8002e46 <_fflush_r+0x22>
 8002e90:	080044dc 	.word	0x080044dc
 8002e94:	080044fc 	.word	0x080044fc
 8002e98:	080044bc 	.word	0x080044bc

08002e9c <std>:
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	b510      	push	{r4, lr}
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eaa:	6083      	str	r3, [r0, #8]
 8002eac:	8181      	strh	r1, [r0, #12]
 8002eae:	6643      	str	r3, [r0, #100]	; 0x64
 8002eb0:	81c2      	strh	r2, [r0, #14]
 8002eb2:	6183      	str	r3, [r0, #24]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	305c      	adds	r0, #92	; 0x5c
 8002eba:	f7ff fa3d 	bl	8002338 <memset>
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <std+0x38>)
 8002ec0:	6263      	str	r3, [r4, #36]	; 0x24
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <std+0x3c>)
 8002ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <std+0x40>)
 8002ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <std+0x44>)
 8002ecc:	6224      	str	r4, [r4, #32]
 8002ece:	6323      	str	r3, [r4, #48]	; 0x30
 8002ed0:	bd10      	pop	{r4, pc}
 8002ed2:	bf00      	nop
 8002ed4:	080031f5 	.word	0x080031f5
 8002ed8:	08003217 	.word	0x08003217
 8002edc:	0800324f 	.word	0x0800324f
 8002ee0:	08003273 	.word	0x08003273

08002ee4 <_cleanup_r>:
 8002ee4:	4901      	ldr	r1, [pc, #4]	; (8002eec <_cleanup_r+0x8>)
 8002ee6:	f000 b8af 	b.w	8003048 <_fwalk_reent>
 8002eea:	bf00      	nop
 8002eec:	08002e25 	.word	0x08002e25

08002ef0 <__sfmoreglue>:
 8002ef0:	b570      	push	{r4, r5, r6, lr}
 8002ef2:	1e4a      	subs	r2, r1, #1
 8002ef4:	2568      	movs	r5, #104	; 0x68
 8002ef6:	4355      	muls	r5, r2
 8002ef8:	460e      	mov	r6, r1
 8002efa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002efe:	f7ff faeb 	bl	80024d8 <_malloc_r>
 8002f02:	4604      	mov	r4, r0
 8002f04:	b140      	cbz	r0, 8002f18 <__sfmoreglue+0x28>
 8002f06:	2100      	movs	r1, #0
 8002f08:	e9c0 1600 	strd	r1, r6, [r0]
 8002f0c:	300c      	adds	r0, #12
 8002f0e:	60a0      	str	r0, [r4, #8]
 8002f10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f14:	f7ff fa10 	bl	8002338 <memset>
 8002f18:	4620      	mov	r0, r4
 8002f1a:	bd70      	pop	{r4, r5, r6, pc}

08002f1c <__sfp_lock_acquire>:
 8002f1c:	4801      	ldr	r0, [pc, #4]	; (8002f24 <__sfp_lock_acquire+0x8>)
 8002f1e:	f000 b8b3 	b.w	8003088 <__retarget_lock_acquire_recursive>
 8002f22:	bf00      	nop
 8002f24:	200000a8 	.word	0x200000a8

08002f28 <__sfp_lock_release>:
 8002f28:	4801      	ldr	r0, [pc, #4]	; (8002f30 <__sfp_lock_release+0x8>)
 8002f2a:	f000 b8ae 	b.w	800308a <__retarget_lock_release_recursive>
 8002f2e:	bf00      	nop
 8002f30:	200000a8 	.word	0x200000a8

08002f34 <__sinit_lock_acquire>:
 8002f34:	4801      	ldr	r0, [pc, #4]	; (8002f3c <__sinit_lock_acquire+0x8>)
 8002f36:	f000 b8a7 	b.w	8003088 <__retarget_lock_acquire_recursive>
 8002f3a:	bf00      	nop
 8002f3c:	200000a3 	.word	0x200000a3

08002f40 <__sinit_lock_release>:
 8002f40:	4801      	ldr	r0, [pc, #4]	; (8002f48 <__sinit_lock_release+0x8>)
 8002f42:	f000 b8a2 	b.w	800308a <__retarget_lock_release_recursive>
 8002f46:	bf00      	nop
 8002f48:	200000a3 	.word	0x200000a3

08002f4c <__sinit>:
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	4604      	mov	r4, r0
 8002f50:	f7ff fff0 	bl	8002f34 <__sinit_lock_acquire>
 8002f54:	69a3      	ldr	r3, [r4, #24]
 8002f56:	b11b      	cbz	r3, 8002f60 <__sinit+0x14>
 8002f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f5c:	f7ff bff0 	b.w	8002f40 <__sinit_lock_release>
 8002f60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002f64:	6523      	str	r3, [r4, #80]	; 0x50
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <__sinit+0x68>)
 8002f68:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <__sinit+0x6c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002f6e:	42a3      	cmp	r3, r4
 8002f70:	bf04      	itt	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	61a3      	streq	r3, [r4, #24]
 8002f76:	4620      	mov	r0, r4
 8002f78:	f000 f820 	bl	8002fbc <__sfp>
 8002f7c:	6060      	str	r0, [r4, #4]
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f000 f81c 	bl	8002fbc <__sfp>
 8002f84:	60a0      	str	r0, [r4, #8]
 8002f86:	4620      	mov	r0, r4
 8002f88:	f000 f818 	bl	8002fbc <__sfp>
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	60e0      	str	r0, [r4, #12]
 8002f90:	2104      	movs	r1, #4
 8002f92:	6860      	ldr	r0, [r4, #4]
 8002f94:	f7ff ff82 	bl	8002e9c <std>
 8002f98:	68a0      	ldr	r0, [r4, #8]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	2109      	movs	r1, #9
 8002f9e:	f7ff ff7d 	bl	8002e9c <std>
 8002fa2:	68e0      	ldr	r0, [r4, #12]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	2112      	movs	r1, #18
 8002fa8:	f7ff ff78 	bl	8002e9c <std>
 8002fac:	2301      	movs	r3, #1
 8002fae:	61a3      	str	r3, [r4, #24]
 8002fb0:	e7d2      	b.n	8002f58 <__sinit+0xc>
 8002fb2:	bf00      	nop
 8002fb4:	080043d0 	.word	0x080043d0
 8002fb8:	08002ee5 	.word	0x08002ee5

08002fbc <__sfp>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	4607      	mov	r7, r0
 8002fc0:	f7ff ffac 	bl	8002f1c <__sfp_lock_acquire>
 8002fc4:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <__sfp+0x84>)
 8002fc6:	681e      	ldr	r6, [r3, #0]
 8002fc8:	69b3      	ldr	r3, [r6, #24]
 8002fca:	b913      	cbnz	r3, 8002fd2 <__sfp+0x16>
 8002fcc:	4630      	mov	r0, r6
 8002fce:	f7ff ffbd 	bl	8002f4c <__sinit>
 8002fd2:	3648      	adds	r6, #72	; 0x48
 8002fd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	d503      	bpl.n	8002fe4 <__sfp+0x28>
 8002fdc:	6833      	ldr	r3, [r6, #0]
 8002fde:	b30b      	cbz	r3, 8003024 <__sfp+0x68>
 8002fe0:	6836      	ldr	r6, [r6, #0]
 8002fe2:	e7f7      	b.n	8002fd4 <__sfp+0x18>
 8002fe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002fe8:	b9d5      	cbnz	r5, 8003020 <__sfp+0x64>
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <__sfp+0x88>)
 8002fec:	60e3      	str	r3, [r4, #12]
 8002fee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ff2:	6665      	str	r5, [r4, #100]	; 0x64
 8002ff4:	f000 f847 	bl	8003086 <__retarget_lock_init_recursive>
 8002ff8:	f7ff ff96 	bl	8002f28 <__sfp_lock_release>
 8002ffc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003000:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003004:	6025      	str	r5, [r4, #0]
 8003006:	61a5      	str	r5, [r4, #24]
 8003008:	2208      	movs	r2, #8
 800300a:	4629      	mov	r1, r5
 800300c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003010:	f7ff f992 	bl	8002338 <memset>
 8003014:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003018:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800301c:	4620      	mov	r0, r4
 800301e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003020:	3468      	adds	r4, #104	; 0x68
 8003022:	e7d9      	b.n	8002fd8 <__sfp+0x1c>
 8003024:	2104      	movs	r1, #4
 8003026:	4638      	mov	r0, r7
 8003028:	f7ff ff62 	bl	8002ef0 <__sfmoreglue>
 800302c:	4604      	mov	r4, r0
 800302e:	6030      	str	r0, [r6, #0]
 8003030:	2800      	cmp	r0, #0
 8003032:	d1d5      	bne.n	8002fe0 <__sfp+0x24>
 8003034:	f7ff ff78 	bl	8002f28 <__sfp_lock_release>
 8003038:	230c      	movs	r3, #12
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	e7ee      	b.n	800301c <__sfp+0x60>
 800303e:	bf00      	nop
 8003040:	080043d0 	.word	0x080043d0
 8003044:	ffff0001 	.word	0xffff0001

08003048 <_fwalk_reent>:
 8003048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800304c:	4606      	mov	r6, r0
 800304e:	4688      	mov	r8, r1
 8003050:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003054:	2700      	movs	r7, #0
 8003056:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800305a:	f1b9 0901 	subs.w	r9, r9, #1
 800305e:	d505      	bpl.n	800306c <_fwalk_reent+0x24>
 8003060:	6824      	ldr	r4, [r4, #0]
 8003062:	2c00      	cmp	r4, #0
 8003064:	d1f7      	bne.n	8003056 <_fwalk_reent+0xe>
 8003066:	4638      	mov	r0, r7
 8003068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800306c:	89ab      	ldrh	r3, [r5, #12]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d907      	bls.n	8003082 <_fwalk_reent+0x3a>
 8003072:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003076:	3301      	adds	r3, #1
 8003078:	d003      	beq.n	8003082 <_fwalk_reent+0x3a>
 800307a:	4629      	mov	r1, r5
 800307c:	4630      	mov	r0, r6
 800307e:	47c0      	blx	r8
 8003080:	4307      	orrs	r7, r0
 8003082:	3568      	adds	r5, #104	; 0x68
 8003084:	e7e9      	b.n	800305a <_fwalk_reent+0x12>

08003086 <__retarget_lock_init_recursive>:
 8003086:	4770      	bx	lr

08003088 <__retarget_lock_acquire_recursive>:
 8003088:	4770      	bx	lr

0800308a <__retarget_lock_release_recursive>:
 800308a:	4770      	bx	lr

0800308c <__swhatbuf_r>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	460e      	mov	r6, r1
 8003090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003094:	2900      	cmp	r1, #0
 8003096:	b096      	sub	sp, #88	; 0x58
 8003098:	4614      	mov	r4, r2
 800309a:	461d      	mov	r5, r3
 800309c:	da07      	bge.n	80030ae <__swhatbuf_r+0x22>
 800309e:	2300      	movs	r3, #0
 80030a0:	602b      	str	r3, [r5, #0]
 80030a2:	89b3      	ldrh	r3, [r6, #12]
 80030a4:	061a      	lsls	r2, r3, #24
 80030a6:	d410      	bmi.n	80030ca <__swhatbuf_r+0x3e>
 80030a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ac:	e00e      	b.n	80030cc <__swhatbuf_r+0x40>
 80030ae:	466a      	mov	r2, sp
 80030b0:	f000 f906 	bl	80032c0 <_fstat_r>
 80030b4:	2800      	cmp	r0, #0
 80030b6:	dbf2      	blt.n	800309e <__swhatbuf_r+0x12>
 80030b8:	9a01      	ldr	r2, [sp, #4]
 80030ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80030be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80030c2:	425a      	negs	r2, r3
 80030c4:	415a      	adcs	r2, r3
 80030c6:	602a      	str	r2, [r5, #0]
 80030c8:	e7ee      	b.n	80030a8 <__swhatbuf_r+0x1c>
 80030ca:	2340      	movs	r3, #64	; 0x40
 80030cc:	2000      	movs	r0, #0
 80030ce:	6023      	str	r3, [r4, #0]
 80030d0:	b016      	add	sp, #88	; 0x58
 80030d2:	bd70      	pop	{r4, r5, r6, pc}

080030d4 <__smakebuf_r>:
 80030d4:	898b      	ldrh	r3, [r1, #12]
 80030d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030d8:	079d      	lsls	r5, r3, #30
 80030da:	4606      	mov	r6, r0
 80030dc:	460c      	mov	r4, r1
 80030de:	d507      	bpl.n	80030f0 <__smakebuf_r+0x1c>
 80030e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030e4:	6023      	str	r3, [r4, #0]
 80030e6:	6123      	str	r3, [r4, #16]
 80030e8:	2301      	movs	r3, #1
 80030ea:	6163      	str	r3, [r4, #20]
 80030ec:	b002      	add	sp, #8
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
 80030f0:	ab01      	add	r3, sp, #4
 80030f2:	466a      	mov	r2, sp
 80030f4:	f7ff ffca 	bl	800308c <__swhatbuf_r>
 80030f8:	9900      	ldr	r1, [sp, #0]
 80030fa:	4605      	mov	r5, r0
 80030fc:	4630      	mov	r0, r6
 80030fe:	f7ff f9eb 	bl	80024d8 <_malloc_r>
 8003102:	b948      	cbnz	r0, 8003118 <__smakebuf_r+0x44>
 8003104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003108:	059a      	lsls	r2, r3, #22
 800310a:	d4ef      	bmi.n	80030ec <__smakebuf_r+0x18>
 800310c:	f023 0303 	bic.w	r3, r3, #3
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	81a3      	strh	r3, [r4, #12]
 8003116:	e7e3      	b.n	80030e0 <__smakebuf_r+0xc>
 8003118:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <__smakebuf_r+0x7c>)
 800311a:	62b3      	str	r3, [r6, #40]	; 0x28
 800311c:	89a3      	ldrh	r3, [r4, #12]
 800311e:	6020      	str	r0, [r4, #0]
 8003120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003124:	81a3      	strh	r3, [r4, #12]
 8003126:	9b00      	ldr	r3, [sp, #0]
 8003128:	6163      	str	r3, [r4, #20]
 800312a:	9b01      	ldr	r3, [sp, #4]
 800312c:	6120      	str	r0, [r4, #16]
 800312e:	b15b      	cbz	r3, 8003148 <__smakebuf_r+0x74>
 8003130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003134:	4630      	mov	r0, r6
 8003136:	f000 f8d5 	bl	80032e4 <_isatty_r>
 800313a:	b128      	cbz	r0, 8003148 <__smakebuf_r+0x74>
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	81a3      	strh	r3, [r4, #12]
 8003148:	89a0      	ldrh	r0, [r4, #12]
 800314a:	4305      	orrs	r5, r0
 800314c:	81a5      	strh	r5, [r4, #12]
 800314e:	e7cd      	b.n	80030ec <__smakebuf_r+0x18>
 8003150:	08002ee5 	.word	0x08002ee5

08003154 <__malloc_lock>:
 8003154:	4801      	ldr	r0, [pc, #4]	; (800315c <__malloc_lock+0x8>)
 8003156:	f7ff bf97 	b.w	8003088 <__retarget_lock_acquire_recursive>
 800315a:	bf00      	nop
 800315c:	200000a4 	.word	0x200000a4

08003160 <__malloc_unlock>:
 8003160:	4801      	ldr	r0, [pc, #4]	; (8003168 <__malloc_unlock+0x8>)
 8003162:	f7ff bf92 	b.w	800308a <__retarget_lock_release_recursive>
 8003166:	bf00      	nop
 8003168:	200000a4 	.word	0x200000a4

0800316c <_raise_r>:
 800316c:	291f      	cmp	r1, #31
 800316e:	b538      	push	{r3, r4, r5, lr}
 8003170:	4604      	mov	r4, r0
 8003172:	460d      	mov	r5, r1
 8003174:	d904      	bls.n	8003180 <_raise_r+0x14>
 8003176:	2316      	movs	r3, #22
 8003178:	6003      	str	r3, [r0, #0]
 800317a:	f04f 30ff 	mov.w	r0, #4294967295
 800317e:	bd38      	pop	{r3, r4, r5, pc}
 8003180:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003182:	b112      	cbz	r2, 800318a <_raise_r+0x1e>
 8003184:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003188:	b94b      	cbnz	r3, 800319e <_raise_r+0x32>
 800318a:	4620      	mov	r0, r4
 800318c:	f000 f830 	bl	80031f0 <_getpid_r>
 8003190:	462a      	mov	r2, r5
 8003192:	4601      	mov	r1, r0
 8003194:	4620      	mov	r0, r4
 8003196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800319a:	f000 b817 	b.w	80031cc <_kill_r>
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d00a      	beq.n	80031b8 <_raise_r+0x4c>
 80031a2:	1c59      	adds	r1, r3, #1
 80031a4:	d103      	bne.n	80031ae <_raise_r+0x42>
 80031a6:	2316      	movs	r3, #22
 80031a8:	6003      	str	r3, [r0, #0]
 80031aa:	2001      	movs	r0, #1
 80031ac:	e7e7      	b.n	800317e <_raise_r+0x12>
 80031ae:	2400      	movs	r4, #0
 80031b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80031b4:	4628      	mov	r0, r5
 80031b6:	4798      	blx	r3
 80031b8:	2000      	movs	r0, #0
 80031ba:	e7e0      	b.n	800317e <_raise_r+0x12>

080031bc <raise>:
 80031bc:	4b02      	ldr	r3, [pc, #8]	; (80031c8 <raise+0xc>)
 80031be:	4601      	mov	r1, r0
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	f7ff bfd3 	b.w	800316c <_raise_r>
 80031c6:	bf00      	nop
 80031c8:	2000000c 	.word	0x2000000c

080031cc <_kill_r>:
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	4d07      	ldr	r5, [pc, #28]	; (80031ec <_kill_r+0x20>)
 80031d0:	2300      	movs	r3, #0
 80031d2:	4604      	mov	r4, r0
 80031d4:	4608      	mov	r0, r1
 80031d6:	4611      	mov	r1, r2
 80031d8:	602b      	str	r3, [r5, #0]
 80031da:	f7fd ff83 	bl	80010e4 <_kill>
 80031de:	1c43      	adds	r3, r0, #1
 80031e0:	d102      	bne.n	80031e8 <_kill_r+0x1c>
 80031e2:	682b      	ldr	r3, [r5, #0]
 80031e4:	b103      	cbz	r3, 80031e8 <_kill_r+0x1c>
 80031e6:	6023      	str	r3, [r4, #0]
 80031e8:	bd38      	pop	{r3, r4, r5, pc}
 80031ea:	bf00      	nop
 80031ec:	200000ac 	.word	0x200000ac

080031f0 <_getpid_r>:
 80031f0:	f7fd bf70 	b.w	80010d4 <_getpid>

080031f4 <__sread>:
 80031f4:	b510      	push	{r4, lr}
 80031f6:	460c      	mov	r4, r1
 80031f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031fc:	f000 f894 	bl	8003328 <_read_r>
 8003200:	2800      	cmp	r0, #0
 8003202:	bfab      	itete	ge
 8003204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003206:	89a3      	ldrhlt	r3, [r4, #12]
 8003208:	181b      	addge	r3, r3, r0
 800320a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800320e:	bfac      	ite	ge
 8003210:	6563      	strge	r3, [r4, #84]	; 0x54
 8003212:	81a3      	strhlt	r3, [r4, #12]
 8003214:	bd10      	pop	{r4, pc}

08003216 <__swrite>:
 8003216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800321a:	461f      	mov	r7, r3
 800321c:	898b      	ldrh	r3, [r1, #12]
 800321e:	05db      	lsls	r3, r3, #23
 8003220:	4605      	mov	r5, r0
 8003222:	460c      	mov	r4, r1
 8003224:	4616      	mov	r6, r2
 8003226:	d505      	bpl.n	8003234 <__swrite+0x1e>
 8003228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800322c:	2302      	movs	r3, #2
 800322e:	2200      	movs	r2, #0
 8003230:	f000 f868 	bl	8003304 <_lseek_r>
 8003234:	89a3      	ldrh	r3, [r4, #12]
 8003236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800323a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800323e:	81a3      	strh	r3, [r4, #12]
 8003240:	4632      	mov	r2, r6
 8003242:	463b      	mov	r3, r7
 8003244:	4628      	mov	r0, r5
 8003246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800324a:	f000 b817 	b.w	800327c <_write_r>

0800324e <__sseek>:
 800324e:	b510      	push	{r4, lr}
 8003250:	460c      	mov	r4, r1
 8003252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003256:	f000 f855 	bl	8003304 <_lseek_r>
 800325a:	1c43      	adds	r3, r0, #1
 800325c:	89a3      	ldrh	r3, [r4, #12]
 800325e:	bf15      	itete	ne
 8003260:	6560      	strne	r0, [r4, #84]	; 0x54
 8003262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800326a:	81a3      	strheq	r3, [r4, #12]
 800326c:	bf18      	it	ne
 800326e:	81a3      	strhne	r3, [r4, #12]
 8003270:	bd10      	pop	{r4, pc}

08003272 <__sclose>:
 8003272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003276:	f000 b813 	b.w	80032a0 <_close_r>
	...

0800327c <_write_r>:
 800327c:	b538      	push	{r3, r4, r5, lr}
 800327e:	4d07      	ldr	r5, [pc, #28]	; (800329c <_write_r+0x20>)
 8003280:	4604      	mov	r4, r0
 8003282:	4608      	mov	r0, r1
 8003284:	4611      	mov	r1, r2
 8003286:	2200      	movs	r2, #0
 8003288:	602a      	str	r2, [r5, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	f7fd ff61 	bl	8001152 <_write>
 8003290:	1c43      	adds	r3, r0, #1
 8003292:	d102      	bne.n	800329a <_write_r+0x1e>
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	b103      	cbz	r3, 800329a <_write_r+0x1e>
 8003298:	6023      	str	r3, [r4, #0]
 800329a:	bd38      	pop	{r3, r4, r5, pc}
 800329c:	200000ac 	.word	0x200000ac

080032a0 <_close_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	4d06      	ldr	r5, [pc, #24]	; (80032bc <_close_r+0x1c>)
 80032a4:	2300      	movs	r3, #0
 80032a6:	4604      	mov	r4, r0
 80032a8:	4608      	mov	r0, r1
 80032aa:	602b      	str	r3, [r5, #0]
 80032ac:	f7fd ff6d 	bl	800118a <_close>
 80032b0:	1c43      	adds	r3, r0, #1
 80032b2:	d102      	bne.n	80032ba <_close_r+0x1a>
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	b103      	cbz	r3, 80032ba <_close_r+0x1a>
 80032b8:	6023      	str	r3, [r4, #0]
 80032ba:	bd38      	pop	{r3, r4, r5, pc}
 80032bc:	200000ac 	.word	0x200000ac

080032c0 <_fstat_r>:
 80032c0:	b538      	push	{r3, r4, r5, lr}
 80032c2:	4d07      	ldr	r5, [pc, #28]	; (80032e0 <_fstat_r+0x20>)
 80032c4:	2300      	movs	r3, #0
 80032c6:	4604      	mov	r4, r0
 80032c8:	4608      	mov	r0, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	602b      	str	r3, [r5, #0]
 80032ce:	f7fd ff68 	bl	80011a2 <_fstat>
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	d102      	bne.n	80032dc <_fstat_r+0x1c>
 80032d6:	682b      	ldr	r3, [r5, #0]
 80032d8:	b103      	cbz	r3, 80032dc <_fstat_r+0x1c>
 80032da:	6023      	str	r3, [r4, #0]
 80032dc:	bd38      	pop	{r3, r4, r5, pc}
 80032de:	bf00      	nop
 80032e0:	200000ac 	.word	0x200000ac

080032e4 <_isatty_r>:
 80032e4:	b538      	push	{r3, r4, r5, lr}
 80032e6:	4d06      	ldr	r5, [pc, #24]	; (8003300 <_isatty_r+0x1c>)
 80032e8:	2300      	movs	r3, #0
 80032ea:	4604      	mov	r4, r0
 80032ec:	4608      	mov	r0, r1
 80032ee:	602b      	str	r3, [r5, #0]
 80032f0:	f7fd ff67 	bl	80011c2 <_isatty>
 80032f4:	1c43      	adds	r3, r0, #1
 80032f6:	d102      	bne.n	80032fe <_isatty_r+0x1a>
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	b103      	cbz	r3, 80032fe <_isatty_r+0x1a>
 80032fc:	6023      	str	r3, [r4, #0]
 80032fe:	bd38      	pop	{r3, r4, r5, pc}
 8003300:	200000ac 	.word	0x200000ac

08003304 <_lseek_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4d07      	ldr	r5, [pc, #28]	; (8003324 <_lseek_r+0x20>)
 8003308:	4604      	mov	r4, r0
 800330a:	4608      	mov	r0, r1
 800330c:	4611      	mov	r1, r2
 800330e:	2200      	movs	r2, #0
 8003310:	602a      	str	r2, [r5, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	f7fd ff60 	bl	80011d8 <_lseek>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	d102      	bne.n	8003322 <_lseek_r+0x1e>
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	b103      	cbz	r3, 8003322 <_lseek_r+0x1e>
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	bd38      	pop	{r3, r4, r5, pc}
 8003324:	200000ac 	.word	0x200000ac

08003328 <_read_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	4d07      	ldr	r5, [pc, #28]	; (8003348 <_read_r+0x20>)
 800332c:	4604      	mov	r4, r0
 800332e:	4608      	mov	r0, r1
 8003330:	4611      	mov	r1, r2
 8003332:	2200      	movs	r2, #0
 8003334:	602a      	str	r2, [r5, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	f7fd feee 	bl	8001118 <_read>
 800333c:	1c43      	adds	r3, r0, #1
 800333e:	d102      	bne.n	8003346 <_read_r+0x1e>
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	b103      	cbz	r3, 8003346 <_read_r+0x1e>
 8003344:	6023      	str	r3, [r4, #0]
 8003346:	bd38      	pop	{r3, r4, r5, pc}
 8003348:	200000ac 	.word	0x200000ac

0800334c <pow>:
 800334c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003350:	ec59 8b10 	vmov	r8, r9, d0
 8003354:	ec57 6b11 	vmov	r6, r7, d1
 8003358:	f000 f902 	bl	8003560 <__ieee754_pow>
 800335c:	4b4e      	ldr	r3, [pc, #312]	; (8003498 <pow+0x14c>)
 800335e:	f993 3000 	ldrsb.w	r3, [r3]
 8003362:	3301      	adds	r3, #1
 8003364:	ec55 4b10 	vmov	r4, r5, d0
 8003368:	d015      	beq.n	8003396 <pow+0x4a>
 800336a:	4632      	mov	r2, r6
 800336c:	463b      	mov	r3, r7
 800336e:	4630      	mov	r0, r6
 8003370:	4639      	mov	r1, r7
 8003372:	f7fd fc0b 	bl	8000b8c <__aeabi_dcmpun>
 8003376:	b970      	cbnz	r0, 8003396 <pow+0x4a>
 8003378:	4642      	mov	r2, r8
 800337a:	464b      	mov	r3, r9
 800337c:	4640      	mov	r0, r8
 800337e:	4649      	mov	r1, r9
 8003380:	f7fd fc04 	bl	8000b8c <__aeabi_dcmpun>
 8003384:	2200      	movs	r2, #0
 8003386:	2300      	movs	r3, #0
 8003388:	b148      	cbz	r0, 800339e <pow+0x52>
 800338a:	4630      	mov	r0, r6
 800338c:	4639      	mov	r1, r7
 800338e:	f7fd fbcb 	bl	8000b28 <__aeabi_dcmpeq>
 8003392:	2800      	cmp	r0, #0
 8003394:	d17d      	bne.n	8003492 <pow+0x146>
 8003396:	ec45 4b10 	vmov	d0, r4, r5
 800339a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800339e:	4640      	mov	r0, r8
 80033a0:	4649      	mov	r1, r9
 80033a2:	f7fd fbc1 	bl	8000b28 <__aeabi_dcmpeq>
 80033a6:	b1e0      	cbz	r0, 80033e2 <pow+0x96>
 80033a8:	2200      	movs	r2, #0
 80033aa:	2300      	movs	r3, #0
 80033ac:	4630      	mov	r0, r6
 80033ae:	4639      	mov	r1, r7
 80033b0:	f7fd fbba 	bl	8000b28 <__aeabi_dcmpeq>
 80033b4:	2800      	cmp	r0, #0
 80033b6:	d16c      	bne.n	8003492 <pow+0x146>
 80033b8:	ec47 6b10 	vmov	d0, r6, r7
 80033bc:	f000 feb2 	bl	8004124 <finite>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d0e8      	beq.n	8003396 <pow+0x4a>
 80033c4:	2200      	movs	r2, #0
 80033c6:	2300      	movs	r3, #0
 80033c8:	4630      	mov	r0, r6
 80033ca:	4639      	mov	r1, r7
 80033cc:	f7fd fbb6 	bl	8000b3c <__aeabi_dcmplt>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d0e0      	beq.n	8003396 <pow+0x4a>
 80033d4:	f7fe ff86 	bl	80022e4 <__errno>
 80033d8:	2321      	movs	r3, #33	; 0x21
 80033da:	6003      	str	r3, [r0, #0]
 80033dc:	2400      	movs	r4, #0
 80033de:	4d2f      	ldr	r5, [pc, #188]	; (800349c <pow+0x150>)
 80033e0:	e7d9      	b.n	8003396 <pow+0x4a>
 80033e2:	ec45 4b10 	vmov	d0, r4, r5
 80033e6:	f000 fe9d 	bl	8004124 <finite>
 80033ea:	bbb8      	cbnz	r0, 800345c <pow+0x110>
 80033ec:	ec49 8b10 	vmov	d0, r8, r9
 80033f0:	f000 fe98 	bl	8004124 <finite>
 80033f4:	b390      	cbz	r0, 800345c <pow+0x110>
 80033f6:	ec47 6b10 	vmov	d0, r6, r7
 80033fa:	f000 fe93 	bl	8004124 <finite>
 80033fe:	b368      	cbz	r0, 800345c <pow+0x110>
 8003400:	4622      	mov	r2, r4
 8003402:	462b      	mov	r3, r5
 8003404:	4620      	mov	r0, r4
 8003406:	4629      	mov	r1, r5
 8003408:	f7fd fbc0 	bl	8000b8c <__aeabi_dcmpun>
 800340c:	b160      	cbz	r0, 8003428 <pow+0xdc>
 800340e:	f7fe ff69 	bl	80022e4 <__errno>
 8003412:	2321      	movs	r3, #33	; 0x21
 8003414:	6003      	str	r3, [r0, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	2300      	movs	r3, #0
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	f7fd fa45 	bl	80008ac <__aeabi_ddiv>
 8003422:	4604      	mov	r4, r0
 8003424:	460d      	mov	r5, r1
 8003426:	e7b6      	b.n	8003396 <pow+0x4a>
 8003428:	f7fe ff5c 	bl	80022e4 <__errno>
 800342c:	2322      	movs	r3, #34	; 0x22
 800342e:	6003      	str	r3, [r0, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	2300      	movs	r3, #0
 8003434:	4640      	mov	r0, r8
 8003436:	4649      	mov	r1, r9
 8003438:	f7fd fb80 	bl	8000b3c <__aeabi_dcmplt>
 800343c:	2400      	movs	r4, #0
 800343e:	b158      	cbz	r0, 8003458 <pow+0x10c>
 8003440:	ec47 6b10 	vmov	d0, r6, r7
 8003444:	f000 fe84 	bl	8004150 <rint>
 8003448:	4632      	mov	r2, r6
 800344a:	ec51 0b10 	vmov	r0, r1, d0
 800344e:	463b      	mov	r3, r7
 8003450:	f7fd fb6a 	bl	8000b28 <__aeabi_dcmpeq>
 8003454:	2800      	cmp	r0, #0
 8003456:	d0c2      	beq.n	80033de <pow+0x92>
 8003458:	4d11      	ldr	r5, [pc, #68]	; (80034a0 <pow+0x154>)
 800345a:	e79c      	b.n	8003396 <pow+0x4a>
 800345c:	2200      	movs	r2, #0
 800345e:	2300      	movs	r3, #0
 8003460:	4620      	mov	r0, r4
 8003462:	4629      	mov	r1, r5
 8003464:	f7fd fb60 	bl	8000b28 <__aeabi_dcmpeq>
 8003468:	2800      	cmp	r0, #0
 800346a:	d094      	beq.n	8003396 <pow+0x4a>
 800346c:	ec49 8b10 	vmov	d0, r8, r9
 8003470:	f000 fe58 	bl	8004124 <finite>
 8003474:	2800      	cmp	r0, #0
 8003476:	d08e      	beq.n	8003396 <pow+0x4a>
 8003478:	ec47 6b10 	vmov	d0, r6, r7
 800347c:	f000 fe52 	bl	8004124 <finite>
 8003480:	2800      	cmp	r0, #0
 8003482:	d088      	beq.n	8003396 <pow+0x4a>
 8003484:	f7fe ff2e 	bl	80022e4 <__errno>
 8003488:	2322      	movs	r3, #34	; 0x22
 800348a:	6003      	str	r3, [r0, #0]
 800348c:	2400      	movs	r4, #0
 800348e:	2500      	movs	r5, #0
 8003490:	e781      	b.n	8003396 <pow+0x4a>
 8003492:	4d04      	ldr	r5, [pc, #16]	; (80034a4 <pow+0x158>)
 8003494:	2400      	movs	r4, #0
 8003496:	e77e      	b.n	8003396 <pow+0x4a>
 8003498:	20000070 	.word	0x20000070
 800349c:	fff00000 	.word	0xfff00000
 80034a0:	7ff00000 	.word	0x7ff00000
 80034a4:	3ff00000 	.word	0x3ff00000

080034a8 <sqrt>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	ed2d 8b02 	vpush	{d8}
 80034ae:	ec55 4b10 	vmov	r4, r5, d0
 80034b2:	f000 fd77 	bl	8003fa4 <__ieee754_sqrt>
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <sqrt+0x64>)
 80034b8:	eeb0 8a40 	vmov.f32	s16, s0
 80034bc:	eef0 8a60 	vmov.f32	s17, s1
 80034c0:	f993 3000 	ldrsb.w	r3, [r3]
 80034c4:	3301      	adds	r3, #1
 80034c6:	d019      	beq.n	80034fc <sqrt+0x54>
 80034c8:	4622      	mov	r2, r4
 80034ca:	462b      	mov	r3, r5
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7fd fb5c 	bl	8000b8c <__aeabi_dcmpun>
 80034d4:	b990      	cbnz	r0, 80034fc <sqrt+0x54>
 80034d6:	2200      	movs	r2, #0
 80034d8:	2300      	movs	r3, #0
 80034da:	4620      	mov	r0, r4
 80034dc:	4629      	mov	r1, r5
 80034de:	f7fd fb2d 	bl	8000b3c <__aeabi_dcmplt>
 80034e2:	b158      	cbz	r0, 80034fc <sqrt+0x54>
 80034e4:	f7fe fefe 	bl	80022e4 <__errno>
 80034e8:	2321      	movs	r3, #33	; 0x21
 80034ea:	6003      	str	r3, [r0, #0]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2300      	movs	r3, #0
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	f7fd f9da 	bl	80008ac <__aeabi_ddiv>
 80034f8:	ec41 0b18 	vmov	d8, r0, r1
 80034fc:	eeb0 0a48 	vmov.f32	s0, s16
 8003500:	eef0 0a68 	vmov.f32	s1, s17
 8003504:	ecbd 8b02 	vpop	{d8}
 8003508:	bd38      	pop	{r3, r4, r5, pc}
 800350a:	bf00      	nop
 800350c:	20000070 	.word	0x20000070

08003510 <sqrtf>:
 8003510:	b508      	push	{r3, lr}
 8003512:	ed2d 8b02 	vpush	{d8}
 8003516:	eeb0 8a40 	vmov.f32	s16, s0
 800351a:	f000 fdf7 	bl	800410c <__ieee754_sqrtf>
 800351e:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <sqrtf+0x44>)
 8003520:	f993 3000 	ldrsb.w	r3, [r3]
 8003524:	3301      	adds	r3, #1
 8003526:	d011      	beq.n	800354c <sqrtf+0x3c>
 8003528:	eeb4 8a48 	vcmp.f32	s16, s16
 800352c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003530:	d60c      	bvs.n	800354c <sqrtf+0x3c>
 8003532:	eddf 8a09 	vldr	s17, [pc, #36]	; 8003558 <sqrtf+0x48>
 8003536:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800353a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353e:	d505      	bpl.n	800354c <sqrtf+0x3c>
 8003540:	f7fe fed0 	bl	80022e4 <__errno>
 8003544:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8003548:	2321      	movs	r3, #33	; 0x21
 800354a:	6003      	str	r3, [r0, #0]
 800354c:	ecbd 8b02 	vpop	{d8}
 8003550:	bd08      	pop	{r3, pc}
 8003552:	bf00      	nop
 8003554:	20000070 	.word	0x20000070
	...

08003560 <__ieee754_pow>:
 8003560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003564:	ed2d 8b06 	vpush	{d8-d10}
 8003568:	b08d      	sub	sp, #52	; 0x34
 800356a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800356e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8003572:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003576:	ea56 0100 	orrs.w	r1, r6, r0
 800357a:	ec53 2b10 	vmov	r2, r3, d0
 800357e:	f000 84d1 	beq.w	8003f24 <__ieee754_pow+0x9c4>
 8003582:	497f      	ldr	r1, [pc, #508]	; (8003780 <__ieee754_pow+0x220>)
 8003584:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8003588:	428c      	cmp	r4, r1
 800358a:	ee10 8a10 	vmov	r8, s0
 800358e:	4699      	mov	r9, r3
 8003590:	dc09      	bgt.n	80035a6 <__ieee754_pow+0x46>
 8003592:	d103      	bne.n	800359c <__ieee754_pow+0x3c>
 8003594:	b97a      	cbnz	r2, 80035b6 <__ieee754_pow+0x56>
 8003596:	42a6      	cmp	r6, r4
 8003598:	dd02      	ble.n	80035a0 <__ieee754_pow+0x40>
 800359a:	e00c      	b.n	80035b6 <__ieee754_pow+0x56>
 800359c:	428e      	cmp	r6, r1
 800359e:	dc02      	bgt.n	80035a6 <__ieee754_pow+0x46>
 80035a0:	428e      	cmp	r6, r1
 80035a2:	d110      	bne.n	80035c6 <__ieee754_pow+0x66>
 80035a4:	b178      	cbz	r0, 80035c6 <__ieee754_pow+0x66>
 80035a6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80035aa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80035ae:	ea54 0308 	orrs.w	r3, r4, r8
 80035b2:	f000 84b7 	beq.w	8003f24 <__ieee754_pow+0x9c4>
 80035b6:	4873      	ldr	r0, [pc, #460]	; (8003784 <__ieee754_pow+0x224>)
 80035b8:	b00d      	add	sp, #52	; 0x34
 80035ba:	ecbd 8b06 	vpop	{d8-d10}
 80035be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c2:	f000 bdbd 	b.w	8004140 <nan>
 80035c6:	f1b9 0f00 	cmp.w	r9, #0
 80035ca:	da36      	bge.n	800363a <__ieee754_pow+0xda>
 80035cc:	496e      	ldr	r1, [pc, #440]	; (8003788 <__ieee754_pow+0x228>)
 80035ce:	428e      	cmp	r6, r1
 80035d0:	dc51      	bgt.n	8003676 <__ieee754_pow+0x116>
 80035d2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80035d6:	428e      	cmp	r6, r1
 80035d8:	f340 84af 	ble.w	8003f3a <__ieee754_pow+0x9da>
 80035dc:	1531      	asrs	r1, r6, #20
 80035de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80035e2:	2914      	cmp	r1, #20
 80035e4:	dd0f      	ble.n	8003606 <__ieee754_pow+0xa6>
 80035e6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80035ea:	fa20 fc01 	lsr.w	ip, r0, r1
 80035ee:	fa0c f101 	lsl.w	r1, ip, r1
 80035f2:	4281      	cmp	r1, r0
 80035f4:	f040 84a1 	bne.w	8003f3a <__ieee754_pow+0x9da>
 80035f8:	f00c 0c01 	and.w	ip, ip, #1
 80035fc:	f1cc 0102 	rsb	r1, ip, #2
 8003600:	9100      	str	r1, [sp, #0]
 8003602:	b180      	cbz	r0, 8003626 <__ieee754_pow+0xc6>
 8003604:	e059      	b.n	80036ba <__ieee754_pow+0x15a>
 8003606:	2800      	cmp	r0, #0
 8003608:	d155      	bne.n	80036b6 <__ieee754_pow+0x156>
 800360a:	f1c1 0114 	rsb	r1, r1, #20
 800360e:	fa46 fc01 	asr.w	ip, r6, r1
 8003612:	fa0c f101 	lsl.w	r1, ip, r1
 8003616:	42b1      	cmp	r1, r6
 8003618:	f040 848c 	bne.w	8003f34 <__ieee754_pow+0x9d4>
 800361c:	f00c 0c01 	and.w	ip, ip, #1
 8003620:	f1cc 0102 	rsb	r1, ip, #2
 8003624:	9100      	str	r1, [sp, #0]
 8003626:	4959      	ldr	r1, [pc, #356]	; (800378c <__ieee754_pow+0x22c>)
 8003628:	428e      	cmp	r6, r1
 800362a:	d12d      	bne.n	8003688 <__ieee754_pow+0x128>
 800362c:	2f00      	cmp	r7, #0
 800362e:	da79      	bge.n	8003724 <__ieee754_pow+0x1c4>
 8003630:	4956      	ldr	r1, [pc, #344]	; (800378c <__ieee754_pow+0x22c>)
 8003632:	2000      	movs	r0, #0
 8003634:	f7fd f93a 	bl	80008ac <__aeabi_ddiv>
 8003638:	e016      	b.n	8003668 <__ieee754_pow+0x108>
 800363a:	2100      	movs	r1, #0
 800363c:	9100      	str	r1, [sp, #0]
 800363e:	2800      	cmp	r0, #0
 8003640:	d13b      	bne.n	80036ba <__ieee754_pow+0x15a>
 8003642:	494f      	ldr	r1, [pc, #316]	; (8003780 <__ieee754_pow+0x220>)
 8003644:	428e      	cmp	r6, r1
 8003646:	d1ee      	bne.n	8003626 <__ieee754_pow+0xc6>
 8003648:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800364c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003650:	ea53 0308 	orrs.w	r3, r3, r8
 8003654:	f000 8466 	beq.w	8003f24 <__ieee754_pow+0x9c4>
 8003658:	4b4d      	ldr	r3, [pc, #308]	; (8003790 <__ieee754_pow+0x230>)
 800365a:	429c      	cmp	r4, r3
 800365c:	dd0d      	ble.n	800367a <__ieee754_pow+0x11a>
 800365e:	2f00      	cmp	r7, #0
 8003660:	f280 8464 	bge.w	8003f2c <__ieee754_pow+0x9cc>
 8003664:	2000      	movs	r0, #0
 8003666:	2100      	movs	r1, #0
 8003668:	ec41 0b10 	vmov	d0, r0, r1
 800366c:	b00d      	add	sp, #52	; 0x34
 800366e:	ecbd 8b06 	vpop	{d8-d10}
 8003672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003676:	2102      	movs	r1, #2
 8003678:	e7e0      	b.n	800363c <__ieee754_pow+0xdc>
 800367a:	2f00      	cmp	r7, #0
 800367c:	daf2      	bge.n	8003664 <__ieee754_pow+0x104>
 800367e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8003682:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003686:	e7ef      	b.n	8003668 <__ieee754_pow+0x108>
 8003688:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800368c:	d104      	bne.n	8003698 <__ieee754_pow+0x138>
 800368e:	4610      	mov	r0, r2
 8003690:	4619      	mov	r1, r3
 8003692:	f7fc ffe1 	bl	8000658 <__aeabi_dmul>
 8003696:	e7e7      	b.n	8003668 <__ieee754_pow+0x108>
 8003698:	493e      	ldr	r1, [pc, #248]	; (8003794 <__ieee754_pow+0x234>)
 800369a:	428f      	cmp	r7, r1
 800369c:	d10d      	bne.n	80036ba <__ieee754_pow+0x15a>
 800369e:	f1b9 0f00 	cmp.w	r9, #0
 80036a2:	db0a      	blt.n	80036ba <__ieee754_pow+0x15a>
 80036a4:	ec43 2b10 	vmov	d0, r2, r3
 80036a8:	b00d      	add	sp, #52	; 0x34
 80036aa:	ecbd 8b06 	vpop	{d8-d10}
 80036ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b2:	f000 bc77 	b.w	8003fa4 <__ieee754_sqrt>
 80036b6:	2100      	movs	r1, #0
 80036b8:	9100      	str	r1, [sp, #0]
 80036ba:	ec43 2b10 	vmov	d0, r2, r3
 80036be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80036c2:	f000 fd26 	bl	8004112 <fabs>
 80036c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036ca:	ec51 0b10 	vmov	r0, r1, d0
 80036ce:	f1b8 0f00 	cmp.w	r8, #0
 80036d2:	d12a      	bne.n	800372a <__ieee754_pow+0x1ca>
 80036d4:	b12c      	cbz	r4, 80036e2 <__ieee754_pow+0x182>
 80036d6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800378c <__ieee754_pow+0x22c>
 80036da:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80036de:	45e6      	cmp	lr, ip
 80036e0:	d123      	bne.n	800372a <__ieee754_pow+0x1ca>
 80036e2:	2f00      	cmp	r7, #0
 80036e4:	da05      	bge.n	80036f2 <__ieee754_pow+0x192>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	2000      	movs	r0, #0
 80036ec:	4927      	ldr	r1, [pc, #156]	; (800378c <__ieee754_pow+0x22c>)
 80036ee:	f7fd f8dd 	bl	80008ac <__aeabi_ddiv>
 80036f2:	f1b9 0f00 	cmp.w	r9, #0
 80036f6:	dab7      	bge.n	8003668 <__ieee754_pow+0x108>
 80036f8:	9b00      	ldr	r3, [sp, #0]
 80036fa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80036fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003702:	4323      	orrs	r3, r4
 8003704:	d108      	bne.n	8003718 <__ieee754_pow+0x1b8>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	f7fc fdeb 	bl	80002e8 <__aeabi_dsub>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	e78d      	b.n	8003634 <__ieee754_pow+0xd4>
 8003718:	9b00      	ldr	r3, [sp, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d1a4      	bne.n	8003668 <__ieee754_pow+0x108>
 800371e:	4602      	mov	r2, r0
 8003720:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	e79e      	b.n	8003668 <__ieee754_pow+0x108>
 800372a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800372e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8003732:	950a      	str	r5, [sp, #40]	; 0x28
 8003734:	9d00      	ldr	r5, [sp, #0]
 8003736:	46ac      	mov	ip, r5
 8003738:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800373a:	ea5c 0505 	orrs.w	r5, ip, r5
 800373e:	d0e4      	beq.n	800370a <__ieee754_pow+0x1aa>
 8003740:	4b15      	ldr	r3, [pc, #84]	; (8003798 <__ieee754_pow+0x238>)
 8003742:	429e      	cmp	r6, r3
 8003744:	f340 80fc 	ble.w	8003940 <__ieee754_pow+0x3e0>
 8003748:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800374c:	429e      	cmp	r6, r3
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <__ieee754_pow+0x230>)
 8003750:	dd07      	ble.n	8003762 <__ieee754_pow+0x202>
 8003752:	429c      	cmp	r4, r3
 8003754:	dc0a      	bgt.n	800376c <__ieee754_pow+0x20c>
 8003756:	2f00      	cmp	r7, #0
 8003758:	da84      	bge.n	8003664 <__ieee754_pow+0x104>
 800375a:	a307      	add	r3, pc, #28	; (adr r3, 8003778 <__ieee754_pow+0x218>)
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	e795      	b.n	800368e <__ieee754_pow+0x12e>
 8003762:	429c      	cmp	r4, r3
 8003764:	dbf7      	blt.n	8003756 <__ieee754_pow+0x1f6>
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <__ieee754_pow+0x22c>)
 8003768:	429c      	cmp	r4, r3
 800376a:	dd17      	ble.n	800379c <__ieee754_pow+0x23c>
 800376c:	2f00      	cmp	r7, #0
 800376e:	dcf4      	bgt.n	800375a <__ieee754_pow+0x1fa>
 8003770:	e778      	b.n	8003664 <__ieee754_pow+0x104>
 8003772:	bf00      	nop
 8003774:	f3af 8000 	nop.w
 8003778:	8800759c 	.word	0x8800759c
 800377c:	7e37e43c 	.word	0x7e37e43c
 8003780:	7ff00000 	.word	0x7ff00000
 8003784:	08004485 	.word	0x08004485
 8003788:	433fffff 	.word	0x433fffff
 800378c:	3ff00000 	.word	0x3ff00000
 8003790:	3fefffff 	.word	0x3fefffff
 8003794:	3fe00000 	.word	0x3fe00000
 8003798:	41e00000 	.word	0x41e00000
 800379c:	4b64      	ldr	r3, [pc, #400]	; (8003930 <__ieee754_pow+0x3d0>)
 800379e:	2200      	movs	r2, #0
 80037a0:	f7fc fda2 	bl	80002e8 <__aeabi_dsub>
 80037a4:	a356      	add	r3, pc, #344	; (adr r3, 8003900 <__ieee754_pow+0x3a0>)
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	4604      	mov	r4, r0
 80037ac:	460d      	mov	r5, r1
 80037ae:	f7fc ff53 	bl	8000658 <__aeabi_dmul>
 80037b2:	a355      	add	r3, pc, #340	; (adr r3, 8003908 <__ieee754_pow+0x3a8>)
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	4606      	mov	r6, r0
 80037ba:	460f      	mov	r7, r1
 80037bc:	4620      	mov	r0, r4
 80037be:	4629      	mov	r1, r5
 80037c0:	f7fc ff4a 	bl	8000658 <__aeabi_dmul>
 80037c4:	4b5b      	ldr	r3, [pc, #364]	; (8003934 <__ieee754_pow+0x3d4>)
 80037c6:	4682      	mov	sl, r0
 80037c8:	468b      	mov	fp, r1
 80037ca:	2200      	movs	r2, #0
 80037cc:	4620      	mov	r0, r4
 80037ce:	4629      	mov	r1, r5
 80037d0:	f7fc ff42 	bl	8000658 <__aeabi_dmul>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	a14d      	add	r1, pc, #308	; (adr r1, 8003910 <__ieee754_pow+0x3b0>)
 80037da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037de:	f7fc fd83 	bl	80002e8 <__aeabi_dsub>
 80037e2:	4622      	mov	r2, r4
 80037e4:	462b      	mov	r3, r5
 80037e6:	f7fc ff37 	bl	8000658 <__aeabi_dmul>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	2000      	movs	r0, #0
 80037f0:	4951      	ldr	r1, [pc, #324]	; (8003938 <__ieee754_pow+0x3d8>)
 80037f2:	f7fc fd79 	bl	80002e8 <__aeabi_dsub>
 80037f6:	4622      	mov	r2, r4
 80037f8:	4680      	mov	r8, r0
 80037fa:	4689      	mov	r9, r1
 80037fc:	462b      	mov	r3, r5
 80037fe:	4620      	mov	r0, r4
 8003800:	4629      	mov	r1, r5
 8003802:	f7fc ff29 	bl	8000658 <__aeabi_dmul>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4640      	mov	r0, r8
 800380c:	4649      	mov	r1, r9
 800380e:	f7fc ff23 	bl	8000658 <__aeabi_dmul>
 8003812:	a341      	add	r3, pc, #260	; (adr r3, 8003918 <__ieee754_pow+0x3b8>)
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f7fc ff1e 	bl	8000658 <__aeabi_dmul>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4650      	mov	r0, sl
 8003822:	4659      	mov	r1, fp
 8003824:	f7fc fd60 	bl	80002e8 <__aeabi_dsub>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4680      	mov	r8, r0
 800382e:	4689      	mov	r9, r1
 8003830:	4630      	mov	r0, r6
 8003832:	4639      	mov	r1, r7
 8003834:	f7fc fd5a 	bl	80002ec <__adddf3>
 8003838:	2400      	movs	r4, #0
 800383a:	4632      	mov	r2, r6
 800383c:	463b      	mov	r3, r7
 800383e:	4620      	mov	r0, r4
 8003840:	460d      	mov	r5, r1
 8003842:	f7fc fd51 	bl	80002e8 <__aeabi_dsub>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4640      	mov	r0, r8
 800384c:	4649      	mov	r1, r9
 800384e:	f7fc fd4b 	bl	80002e8 <__aeabi_dsub>
 8003852:	9b00      	ldr	r3, [sp, #0]
 8003854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003856:	3b01      	subs	r3, #1
 8003858:	4313      	orrs	r3, r2
 800385a:	4682      	mov	sl, r0
 800385c:	468b      	mov	fp, r1
 800385e:	f040 81f1 	bne.w	8003c44 <__ieee754_pow+0x6e4>
 8003862:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8003920 <__ieee754_pow+0x3c0>
 8003866:	eeb0 8a47 	vmov.f32	s16, s14
 800386a:	eef0 8a67 	vmov.f32	s17, s15
 800386e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003872:	2600      	movs	r6, #0
 8003874:	4632      	mov	r2, r6
 8003876:	463b      	mov	r3, r7
 8003878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800387c:	f7fc fd34 	bl	80002e8 <__aeabi_dsub>
 8003880:	4622      	mov	r2, r4
 8003882:	462b      	mov	r3, r5
 8003884:	f7fc fee8 	bl	8000658 <__aeabi_dmul>
 8003888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800388c:	4680      	mov	r8, r0
 800388e:	4689      	mov	r9, r1
 8003890:	4650      	mov	r0, sl
 8003892:	4659      	mov	r1, fp
 8003894:	f7fc fee0 	bl	8000658 <__aeabi_dmul>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4640      	mov	r0, r8
 800389e:	4649      	mov	r1, r9
 80038a0:	f7fc fd24 	bl	80002ec <__adddf3>
 80038a4:	4632      	mov	r2, r6
 80038a6:	463b      	mov	r3, r7
 80038a8:	4680      	mov	r8, r0
 80038aa:	4689      	mov	r9, r1
 80038ac:	4620      	mov	r0, r4
 80038ae:	4629      	mov	r1, r5
 80038b0:	f7fc fed2 	bl	8000658 <__aeabi_dmul>
 80038b4:	460b      	mov	r3, r1
 80038b6:	4604      	mov	r4, r0
 80038b8:	460d      	mov	r5, r1
 80038ba:	4602      	mov	r2, r0
 80038bc:	4649      	mov	r1, r9
 80038be:	4640      	mov	r0, r8
 80038c0:	f7fc fd14 	bl	80002ec <__adddf3>
 80038c4:	4b1d      	ldr	r3, [pc, #116]	; (800393c <__ieee754_pow+0x3dc>)
 80038c6:	4299      	cmp	r1, r3
 80038c8:	ec45 4b19 	vmov	d9, r4, r5
 80038cc:	4606      	mov	r6, r0
 80038ce:	460f      	mov	r7, r1
 80038d0:	468b      	mov	fp, r1
 80038d2:	f340 82fe 	ble.w	8003ed2 <__ieee754_pow+0x972>
 80038d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80038da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80038de:	4303      	orrs	r3, r0
 80038e0:	f000 81f0 	beq.w	8003cc4 <__ieee754_pow+0x764>
 80038e4:	a310      	add	r3, pc, #64	; (adr r3, 8003928 <__ieee754_pow+0x3c8>)
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	ec51 0b18 	vmov	r0, r1, d8
 80038ee:	f7fc feb3 	bl	8000658 <__aeabi_dmul>
 80038f2:	a30d      	add	r3, pc, #52	; (adr r3, 8003928 <__ieee754_pow+0x3c8>)
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	e6cb      	b.n	8003692 <__ieee754_pow+0x132>
 80038fa:	bf00      	nop
 80038fc:	f3af 8000 	nop.w
 8003900:	60000000 	.word	0x60000000
 8003904:	3ff71547 	.word	0x3ff71547
 8003908:	f85ddf44 	.word	0xf85ddf44
 800390c:	3e54ae0b 	.word	0x3e54ae0b
 8003910:	55555555 	.word	0x55555555
 8003914:	3fd55555 	.word	0x3fd55555
 8003918:	652b82fe 	.word	0x652b82fe
 800391c:	3ff71547 	.word	0x3ff71547
 8003920:	00000000 	.word	0x00000000
 8003924:	bff00000 	.word	0xbff00000
 8003928:	8800759c 	.word	0x8800759c
 800392c:	7e37e43c 	.word	0x7e37e43c
 8003930:	3ff00000 	.word	0x3ff00000
 8003934:	3fd00000 	.word	0x3fd00000
 8003938:	3fe00000 	.word	0x3fe00000
 800393c:	408fffff 	.word	0x408fffff
 8003940:	4bd7      	ldr	r3, [pc, #860]	; (8003ca0 <__ieee754_pow+0x740>)
 8003942:	ea03 0309 	and.w	r3, r3, r9
 8003946:	2200      	movs	r2, #0
 8003948:	b92b      	cbnz	r3, 8003956 <__ieee754_pow+0x3f6>
 800394a:	4bd6      	ldr	r3, [pc, #856]	; (8003ca4 <__ieee754_pow+0x744>)
 800394c:	f7fc fe84 	bl	8000658 <__aeabi_dmul>
 8003950:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003954:	460c      	mov	r4, r1
 8003956:	1523      	asrs	r3, r4, #20
 8003958:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800395c:	4413      	add	r3, r2
 800395e:	9309      	str	r3, [sp, #36]	; 0x24
 8003960:	4bd1      	ldr	r3, [pc, #836]	; (8003ca8 <__ieee754_pow+0x748>)
 8003962:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003966:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800396a:	429c      	cmp	r4, r3
 800396c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003970:	dd08      	ble.n	8003984 <__ieee754_pow+0x424>
 8003972:	4bce      	ldr	r3, [pc, #824]	; (8003cac <__ieee754_pow+0x74c>)
 8003974:	429c      	cmp	r4, r3
 8003976:	f340 8163 	ble.w	8003c40 <__ieee754_pow+0x6e0>
 800397a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800397c:	3301      	adds	r3, #1
 800397e:	9309      	str	r3, [sp, #36]	; 0x24
 8003980:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003984:	2400      	movs	r4, #0
 8003986:	00e3      	lsls	r3, r4, #3
 8003988:	930b      	str	r3, [sp, #44]	; 0x2c
 800398a:	4bc9      	ldr	r3, [pc, #804]	; (8003cb0 <__ieee754_pow+0x750>)
 800398c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003990:	ed93 7b00 	vldr	d7, [r3]
 8003994:	4629      	mov	r1, r5
 8003996:	ec53 2b17 	vmov	r2, r3, d7
 800399a:	eeb0 8a47 	vmov.f32	s16, s14
 800399e:	eef0 8a67 	vmov.f32	s17, s15
 80039a2:	4682      	mov	sl, r0
 80039a4:	f7fc fca0 	bl	80002e8 <__aeabi_dsub>
 80039a8:	4652      	mov	r2, sl
 80039aa:	4606      	mov	r6, r0
 80039ac:	460f      	mov	r7, r1
 80039ae:	462b      	mov	r3, r5
 80039b0:	ec51 0b18 	vmov	r0, r1, d8
 80039b4:	f7fc fc9a 	bl	80002ec <__adddf3>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	2000      	movs	r0, #0
 80039be:	49bd      	ldr	r1, [pc, #756]	; (8003cb4 <__ieee754_pow+0x754>)
 80039c0:	f7fc ff74 	bl	80008ac <__aeabi_ddiv>
 80039c4:	ec41 0b19 	vmov	d9, r0, r1
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4630      	mov	r0, r6
 80039ce:	4639      	mov	r1, r7
 80039d0:	f7fc fe42 	bl	8000658 <__aeabi_dmul>
 80039d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80039d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80039dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039e0:	2300      	movs	r3, #0
 80039e2:	9304      	str	r3, [sp, #16]
 80039e4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80039e8:	46ab      	mov	fp, r5
 80039ea:	106d      	asrs	r5, r5, #1
 80039ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80039f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80039f4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80039f8:	2200      	movs	r2, #0
 80039fa:	4640      	mov	r0, r8
 80039fc:	4649      	mov	r1, r9
 80039fe:	4614      	mov	r4, r2
 8003a00:	461d      	mov	r5, r3
 8003a02:	f7fc fe29 	bl	8000658 <__aeabi_dmul>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	4639      	mov	r1, r7
 8003a0e:	f7fc fc6b 	bl	80002e8 <__aeabi_dsub>
 8003a12:	ec53 2b18 	vmov	r2, r3, d8
 8003a16:	4606      	mov	r6, r0
 8003a18:	460f      	mov	r7, r1
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	f7fc fc63 	bl	80002e8 <__aeabi_dsub>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4650      	mov	r0, sl
 8003a28:	4659      	mov	r1, fp
 8003a2a:	f7fc fc5d 	bl	80002e8 <__aeabi_dsub>
 8003a2e:	4642      	mov	r2, r8
 8003a30:	464b      	mov	r3, r9
 8003a32:	f7fc fe11 	bl	8000658 <__aeabi_dmul>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	4639      	mov	r1, r7
 8003a3e:	f7fc fc53 	bl	80002e8 <__aeabi_dsub>
 8003a42:	ec53 2b19 	vmov	r2, r3, d9
 8003a46:	f7fc fe07 	bl	8000658 <__aeabi_dmul>
 8003a4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003a4e:	ec41 0b18 	vmov	d8, r0, r1
 8003a52:	4610      	mov	r0, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	f7fc fdff 	bl	8000658 <__aeabi_dmul>
 8003a5a:	a37d      	add	r3, pc, #500	; (adr r3, 8003c50 <__ieee754_pow+0x6f0>)
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	4604      	mov	r4, r0
 8003a62:	460d      	mov	r5, r1
 8003a64:	f7fc fdf8 	bl	8000658 <__aeabi_dmul>
 8003a68:	a37b      	add	r3, pc, #492	; (adr r3, 8003c58 <__ieee754_pow+0x6f8>)
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f7fc fc3d 	bl	80002ec <__adddf3>
 8003a72:	4622      	mov	r2, r4
 8003a74:	462b      	mov	r3, r5
 8003a76:	f7fc fdef 	bl	8000658 <__aeabi_dmul>
 8003a7a:	a379      	add	r3, pc, #484	; (adr r3, 8003c60 <__ieee754_pow+0x700>)
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f7fc fc34 	bl	80002ec <__adddf3>
 8003a84:	4622      	mov	r2, r4
 8003a86:	462b      	mov	r3, r5
 8003a88:	f7fc fde6 	bl	8000658 <__aeabi_dmul>
 8003a8c:	a376      	add	r3, pc, #472	; (adr r3, 8003c68 <__ieee754_pow+0x708>)
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f7fc fc2b 	bl	80002ec <__adddf3>
 8003a96:	4622      	mov	r2, r4
 8003a98:	462b      	mov	r3, r5
 8003a9a:	f7fc fddd 	bl	8000658 <__aeabi_dmul>
 8003a9e:	a374      	add	r3, pc, #464	; (adr r3, 8003c70 <__ieee754_pow+0x710>)
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f7fc fc22 	bl	80002ec <__adddf3>
 8003aa8:	4622      	mov	r2, r4
 8003aaa:	462b      	mov	r3, r5
 8003aac:	f7fc fdd4 	bl	8000658 <__aeabi_dmul>
 8003ab0:	a371      	add	r3, pc, #452	; (adr r3, 8003c78 <__ieee754_pow+0x718>)
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	f7fc fc19 	bl	80002ec <__adddf3>
 8003aba:	4622      	mov	r2, r4
 8003abc:	4606      	mov	r6, r0
 8003abe:	460f      	mov	r7, r1
 8003ac0:	462b      	mov	r3, r5
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	f7fc fdc7 	bl	8000658 <__aeabi_dmul>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4630      	mov	r0, r6
 8003ad0:	4639      	mov	r1, r7
 8003ad2:	f7fc fdc1 	bl	8000658 <__aeabi_dmul>
 8003ad6:	4642      	mov	r2, r8
 8003ad8:	4604      	mov	r4, r0
 8003ada:	460d      	mov	r5, r1
 8003adc:	464b      	mov	r3, r9
 8003ade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ae2:	f7fc fc03 	bl	80002ec <__adddf3>
 8003ae6:	ec53 2b18 	vmov	r2, r3, d8
 8003aea:	f7fc fdb5 	bl	8000658 <__aeabi_dmul>
 8003aee:	4622      	mov	r2, r4
 8003af0:	462b      	mov	r3, r5
 8003af2:	f7fc fbfb 	bl	80002ec <__adddf3>
 8003af6:	4642      	mov	r2, r8
 8003af8:	4682      	mov	sl, r0
 8003afa:	468b      	mov	fp, r1
 8003afc:	464b      	mov	r3, r9
 8003afe:	4640      	mov	r0, r8
 8003b00:	4649      	mov	r1, r9
 8003b02:	f7fc fda9 	bl	8000658 <__aeabi_dmul>
 8003b06:	4b6c      	ldr	r3, [pc, #432]	; (8003cb8 <__ieee754_pow+0x758>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	460f      	mov	r7, r1
 8003b0e:	f7fc fbed 	bl	80002ec <__adddf3>
 8003b12:	4652      	mov	r2, sl
 8003b14:	465b      	mov	r3, fp
 8003b16:	f7fc fbe9 	bl	80002ec <__adddf3>
 8003b1a:	9c04      	ldr	r4, [sp, #16]
 8003b1c:	460d      	mov	r5, r1
 8003b1e:	4622      	mov	r2, r4
 8003b20:	460b      	mov	r3, r1
 8003b22:	4640      	mov	r0, r8
 8003b24:	4649      	mov	r1, r9
 8003b26:	f7fc fd97 	bl	8000658 <__aeabi_dmul>
 8003b2a:	4b63      	ldr	r3, [pc, #396]	; (8003cb8 <__ieee754_pow+0x758>)
 8003b2c:	4680      	mov	r8, r0
 8003b2e:	4689      	mov	r9, r1
 8003b30:	2200      	movs	r2, #0
 8003b32:	4620      	mov	r0, r4
 8003b34:	4629      	mov	r1, r5
 8003b36:	f7fc fbd7 	bl	80002e8 <__aeabi_dsub>
 8003b3a:	4632      	mov	r2, r6
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	f7fc fbd3 	bl	80002e8 <__aeabi_dsub>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4650      	mov	r0, sl
 8003b48:	4659      	mov	r1, fp
 8003b4a:	f7fc fbcd 	bl	80002e8 <__aeabi_dsub>
 8003b4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b52:	f7fc fd81 	bl	8000658 <__aeabi_dmul>
 8003b56:	4622      	mov	r2, r4
 8003b58:	4606      	mov	r6, r0
 8003b5a:	460f      	mov	r7, r1
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	ec51 0b18 	vmov	r0, r1, d8
 8003b62:	f7fc fd79 	bl	8000658 <__aeabi_dmul>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	4639      	mov	r1, r7
 8003b6e:	f7fc fbbd 	bl	80002ec <__adddf3>
 8003b72:	4606      	mov	r6, r0
 8003b74:	460f      	mov	r7, r1
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4640      	mov	r0, r8
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	f7fc fbb5 	bl	80002ec <__adddf3>
 8003b82:	9c04      	ldr	r4, [sp, #16]
 8003b84:	a33e      	add	r3, pc, #248	; (adr r3, 8003c80 <__ieee754_pow+0x720>)
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	460d      	mov	r5, r1
 8003b8e:	f7fc fd63 	bl	8000658 <__aeabi_dmul>
 8003b92:	4642      	mov	r2, r8
 8003b94:	ec41 0b18 	vmov	d8, r0, r1
 8003b98:	464b      	mov	r3, r9
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	f7fc fba3 	bl	80002e8 <__aeabi_dsub>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	4639      	mov	r1, r7
 8003baa:	f7fc fb9d 	bl	80002e8 <__aeabi_dsub>
 8003bae:	a336      	add	r3, pc, #216	; (adr r3, 8003c88 <__ieee754_pow+0x728>)
 8003bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb4:	f7fc fd50 	bl	8000658 <__aeabi_dmul>
 8003bb8:	a335      	add	r3, pc, #212	; (adr r3, 8003c90 <__ieee754_pow+0x730>)
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	460f      	mov	r7, r1
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	f7fc fd47 	bl	8000658 <__aeabi_dmul>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4630      	mov	r0, r6
 8003bd0:	4639      	mov	r1, r7
 8003bd2:	f7fc fb8b 	bl	80002ec <__adddf3>
 8003bd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003bd8:	4b38      	ldr	r3, [pc, #224]	; (8003cbc <__ieee754_pow+0x75c>)
 8003bda:	4413      	add	r3, r2
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f7fc fb84 	bl	80002ec <__adddf3>
 8003be4:	4682      	mov	sl, r0
 8003be6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003be8:	468b      	mov	fp, r1
 8003bea:	f7fc fccb 	bl	8000584 <__aeabi_i2d>
 8003bee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003bf0:	4b33      	ldr	r3, [pc, #204]	; (8003cc0 <__ieee754_pow+0x760>)
 8003bf2:	4413      	add	r3, r2
 8003bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003bf8:	4606      	mov	r6, r0
 8003bfa:	460f      	mov	r7, r1
 8003bfc:	4652      	mov	r2, sl
 8003bfe:	465b      	mov	r3, fp
 8003c00:	ec51 0b18 	vmov	r0, r1, d8
 8003c04:	f7fc fb72 	bl	80002ec <__adddf3>
 8003c08:	4642      	mov	r2, r8
 8003c0a:	464b      	mov	r3, r9
 8003c0c:	f7fc fb6e 	bl	80002ec <__adddf3>
 8003c10:	4632      	mov	r2, r6
 8003c12:	463b      	mov	r3, r7
 8003c14:	f7fc fb6a 	bl	80002ec <__adddf3>
 8003c18:	9c04      	ldr	r4, [sp, #16]
 8003c1a:	4632      	mov	r2, r6
 8003c1c:	463b      	mov	r3, r7
 8003c1e:	4620      	mov	r0, r4
 8003c20:	460d      	mov	r5, r1
 8003c22:	f7fc fb61 	bl	80002e8 <__aeabi_dsub>
 8003c26:	4642      	mov	r2, r8
 8003c28:	464b      	mov	r3, r9
 8003c2a:	f7fc fb5d 	bl	80002e8 <__aeabi_dsub>
 8003c2e:	ec53 2b18 	vmov	r2, r3, d8
 8003c32:	f7fc fb59 	bl	80002e8 <__aeabi_dsub>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4650      	mov	r0, sl
 8003c3c:	4659      	mov	r1, fp
 8003c3e:	e606      	b.n	800384e <__ieee754_pow+0x2ee>
 8003c40:	2401      	movs	r4, #1
 8003c42:	e6a0      	b.n	8003986 <__ieee754_pow+0x426>
 8003c44:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8003c98 <__ieee754_pow+0x738>
 8003c48:	e60d      	b.n	8003866 <__ieee754_pow+0x306>
 8003c4a:	bf00      	nop
 8003c4c:	f3af 8000 	nop.w
 8003c50:	4a454eef 	.word	0x4a454eef
 8003c54:	3fca7e28 	.word	0x3fca7e28
 8003c58:	93c9db65 	.word	0x93c9db65
 8003c5c:	3fcd864a 	.word	0x3fcd864a
 8003c60:	a91d4101 	.word	0xa91d4101
 8003c64:	3fd17460 	.word	0x3fd17460
 8003c68:	518f264d 	.word	0x518f264d
 8003c6c:	3fd55555 	.word	0x3fd55555
 8003c70:	db6fabff 	.word	0xdb6fabff
 8003c74:	3fdb6db6 	.word	0x3fdb6db6
 8003c78:	33333303 	.word	0x33333303
 8003c7c:	3fe33333 	.word	0x3fe33333
 8003c80:	e0000000 	.word	0xe0000000
 8003c84:	3feec709 	.word	0x3feec709
 8003c88:	dc3a03fd 	.word	0xdc3a03fd
 8003c8c:	3feec709 	.word	0x3feec709
 8003c90:	145b01f5 	.word	0x145b01f5
 8003c94:	be3e2fe0 	.word	0xbe3e2fe0
 8003c98:	00000000 	.word	0x00000000
 8003c9c:	3ff00000 	.word	0x3ff00000
 8003ca0:	7ff00000 	.word	0x7ff00000
 8003ca4:	43400000 	.word	0x43400000
 8003ca8:	0003988e 	.word	0x0003988e
 8003cac:	000bb679 	.word	0x000bb679
 8003cb0:	08004520 	.word	0x08004520
 8003cb4:	3ff00000 	.word	0x3ff00000
 8003cb8:	40080000 	.word	0x40080000
 8003cbc:	08004540 	.word	0x08004540
 8003cc0:	08004530 	.word	0x08004530
 8003cc4:	a3b5      	add	r3, pc, #724	; (adr r3, 8003f9c <__ieee754_pow+0xa3c>)
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	4640      	mov	r0, r8
 8003ccc:	4649      	mov	r1, r9
 8003cce:	f7fc fb0d 	bl	80002ec <__adddf3>
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	ec41 0b1a 	vmov	d10, r0, r1
 8003cd8:	462b      	mov	r3, r5
 8003cda:	4630      	mov	r0, r6
 8003cdc:	4639      	mov	r1, r7
 8003cde:	f7fc fb03 	bl	80002e8 <__aeabi_dsub>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	ec51 0b1a 	vmov	r0, r1, d10
 8003cea:	f7fc ff45 	bl	8000b78 <__aeabi_dcmpgt>
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	f47f adf8 	bne.w	80038e4 <__ieee754_pow+0x384>
 8003cf4:	4aa4      	ldr	r2, [pc, #656]	; (8003f88 <__ieee754_pow+0xa28>)
 8003cf6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	f340 810b 	ble.w	8003f16 <__ieee754_pow+0x9b6>
 8003d00:	151b      	asrs	r3, r3, #20
 8003d02:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003d06:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003d0a:	fa4a f303 	asr.w	r3, sl, r3
 8003d0e:	445b      	add	r3, fp
 8003d10:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003d14:	4e9d      	ldr	r6, [pc, #628]	; (8003f8c <__ieee754_pow+0xa2c>)
 8003d16:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003d1a:	4116      	asrs	r6, r2
 8003d1c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003d20:	2000      	movs	r0, #0
 8003d22:	ea23 0106 	bic.w	r1, r3, r6
 8003d26:	f1c2 0214 	rsb	r2, r2, #20
 8003d2a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003d2e:	fa4a fa02 	asr.w	sl, sl, r2
 8003d32:	f1bb 0f00 	cmp.w	fp, #0
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	bfb8      	it	lt
 8003d40:	f1ca 0a00 	rsblt	sl, sl, #0
 8003d44:	f7fc fad0 	bl	80002e8 <__aeabi_dsub>
 8003d48:	ec41 0b19 	vmov	d9, r0, r1
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	ec51 0b19 	vmov	r0, r1, d9
 8003d54:	f7fc faca 	bl	80002ec <__adddf3>
 8003d58:	2400      	movs	r4, #0
 8003d5a:	a379      	add	r3, pc, #484	; (adr r3, 8003f40 <__ieee754_pow+0x9e0>)
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	4620      	mov	r0, r4
 8003d62:	460d      	mov	r5, r1
 8003d64:	f7fc fc78 	bl	8000658 <__aeabi_dmul>
 8003d68:	ec53 2b19 	vmov	r2, r3, d9
 8003d6c:	4606      	mov	r6, r0
 8003d6e:	460f      	mov	r7, r1
 8003d70:	4620      	mov	r0, r4
 8003d72:	4629      	mov	r1, r5
 8003d74:	f7fc fab8 	bl	80002e8 <__aeabi_dsub>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	4649      	mov	r1, r9
 8003d80:	f7fc fab2 	bl	80002e8 <__aeabi_dsub>
 8003d84:	a370      	add	r3, pc, #448	; (adr r3, 8003f48 <__ieee754_pow+0x9e8>)
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	f7fc fc65 	bl	8000658 <__aeabi_dmul>
 8003d8e:	a370      	add	r3, pc, #448	; (adr r3, 8003f50 <__ieee754_pow+0x9f0>)
 8003d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d94:	4680      	mov	r8, r0
 8003d96:	4689      	mov	r9, r1
 8003d98:	4620      	mov	r0, r4
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	f7fc fc5c 	bl	8000658 <__aeabi_dmul>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4640      	mov	r0, r8
 8003da6:	4649      	mov	r1, r9
 8003da8:	f7fc faa0 	bl	80002ec <__adddf3>
 8003dac:	4604      	mov	r4, r0
 8003dae:	460d      	mov	r5, r1
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4630      	mov	r0, r6
 8003db6:	4639      	mov	r1, r7
 8003db8:	f7fc fa98 	bl	80002ec <__adddf3>
 8003dbc:	4632      	mov	r2, r6
 8003dbe:	463b      	mov	r3, r7
 8003dc0:	4680      	mov	r8, r0
 8003dc2:	4689      	mov	r9, r1
 8003dc4:	f7fc fa90 	bl	80002e8 <__aeabi_dsub>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4620      	mov	r0, r4
 8003dce:	4629      	mov	r1, r5
 8003dd0:	f7fc fa8a 	bl	80002e8 <__aeabi_dsub>
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	460f      	mov	r7, r1
 8003dda:	464b      	mov	r3, r9
 8003ddc:	4640      	mov	r0, r8
 8003dde:	4649      	mov	r1, r9
 8003de0:	f7fc fc3a 	bl	8000658 <__aeabi_dmul>
 8003de4:	a35c      	add	r3, pc, #368	; (adr r3, 8003f58 <__ieee754_pow+0x9f8>)
 8003de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dea:	4604      	mov	r4, r0
 8003dec:	460d      	mov	r5, r1
 8003dee:	f7fc fc33 	bl	8000658 <__aeabi_dmul>
 8003df2:	a35b      	add	r3, pc, #364	; (adr r3, 8003f60 <__ieee754_pow+0xa00>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f7fc fa76 	bl	80002e8 <__aeabi_dsub>
 8003dfc:	4622      	mov	r2, r4
 8003dfe:	462b      	mov	r3, r5
 8003e00:	f7fc fc2a 	bl	8000658 <__aeabi_dmul>
 8003e04:	a358      	add	r3, pc, #352	; (adr r3, 8003f68 <__ieee754_pow+0xa08>)
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	f7fc fa6f 	bl	80002ec <__adddf3>
 8003e0e:	4622      	mov	r2, r4
 8003e10:	462b      	mov	r3, r5
 8003e12:	f7fc fc21 	bl	8000658 <__aeabi_dmul>
 8003e16:	a356      	add	r3, pc, #344	; (adr r3, 8003f70 <__ieee754_pow+0xa10>)
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f7fc fa64 	bl	80002e8 <__aeabi_dsub>
 8003e20:	4622      	mov	r2, r4
 8003e22:	462b      	mov	r3, r5
 8003e24:	f7fc fc18 	bl	8000658 <__aeabi_dmul>
 8003e28:	a353      	add	r3, pc, #332	; (adr r3, 8003f78 <__ieee754_pow+0xa18>)
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f7fc fa5d 	bl	80002ec <__adddf3>
 8003e32:	4622      	mov	r2, r4
 8003e34:	462b      	mov	r3, r5
 8003e36:	f7fc fc0f 	bl	8000658 <__aeabi_dmul>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4640      	mov	r0, r8
 8003e40:	4649      	mov	r1, r9
 8003e42:	f7fc fa51 	bl	80002e8 <__aeabi_dsub>
 8003e46:	4604      	mov	r4, r0
 8003e48:	460d      	mov	r5, r1
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4640      	mov	r0, r8
 8003e50:	4649      	mov	r1, r9
 8003e52:	f7fc fc01 	bl	8000658 <__aeabi_dmul>
 8003e56:	2200      	movs	r2, #0
 8003e58:	ec41 0b19 	vmov	d9, r0, r1
 8003e5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e60:	4620      	mov	r0, r4
 8003e62:	4629      	mov	r1, r5
 8003e64:	f7fc fa40 	bl	80002e8 <__aeabi_dsub>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	ec51 0b19 	vmov	r0, r1, d9
 8003e70:	f7fc fd1c 	bl	80008ac <__aeabi_ddiv>
 8003e74:	4632      	mov	r2, r6
 8003e76:	4604      	mov	r4, r0
 8003e78:	460d      	mov	r5, r1
 8003e7a:	463b      	mov	r3, r7
 8003e7c:	4640      	mov	r0, r8
 8003e7e:	4649      	mov	r1, r9
 8003e80:	f7fc fbea 	bl	8000658 <__aeabi_dmul>
 8003e84:	4632      	mov	r2, r6
 8003e86:	463b      	mov	r3, r7
 8003e88:	f7fc fa30 	bl	80002ec <__adddf3>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4620      	mov	r0, r4
 8003e92:	4629      	mov	r1, r5
 8003e94:	f7fc fa28 	bl	80002e8 <__aeabi_dsub>
 8003e98:	4642      	mov	r2, r8
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	f7fc fa24 	bl	80002e8 <__aeabi_dsub>
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	493a      	ldr	r1, [pc, #232]	; (8003f90 <__ieee754_pow+0xa30>)
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f7fc fa1e 	bl	80002e8 <__aeabi_dsub>
 8003eac:	e9cd 0100 	strd	r0, r1, [sp]
 8003eb0:	9b01      	ldr	r3, [sp, #4]
 8003eb2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8003eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eba:	da2f      	bge.n	8003f1c <__ieee754_pow+0x9bc>
 8003ebc:	4650      	mov	r0, sl
 8003ebe:	ed9d 0b00 	vldr	d0, [sp]
 8003ec2:	f000 f9d1 	bl	8004268 <scalbn>
 8003ec6:	ec51 0b10 	vmov	r0, r1, d0
 8003eca:	ec53 2b18 	vmov	r2, r3, d8
 8003ece:	f7ff bbe0 	b.w	8003692 <__ieee754_pow+0x132>
 8003ed2:	4b30      	ldr	r3, [pc, #192]	; (8003f94 <__ieee754_pow+0xa34>)
 8003ed4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003ed8:	429e      	cmp	r6, r3
 8003eda:	f77f af0b 	ble.w	8003cf4 <__ieee754_pow+0x794>
 8003ede:	4b2e      	ldr	r3, [pc, #184]	; (8003f98 <__ieee754_pow+0xa38>)
 8003ee0:	440b      	add	r3, r1
 8003ee2:	4303      	orrs	r3, r0
 8003ee4:	d00b      	beq.n	8003efe <__ieee754_pow+0x99e>
 8003ee6:	a326      	add	r3, pc, #152	; (adr r3, 8003f80 <__ieee754_pow+0xa20>)
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	ec51 0b18 	vmov	r0, r1, d8
 8003ef0:	f7fc fbb2 	bl	8000658 <__aeabi_dmul>
 8003ef4:	a322      	add	r3, pc, #136	; (adr r3, 8003f80 <__ieee754_pow+0xa20>)
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f7ff bbca 	b.w	8003692 <__ieee754_pow+0x132>
 8003efe:	4622      	mov	r2, r4
 8003f00:	462b      	mov	r3, r5
 8003f02:	f7fc f9f1 	bl	80002e8 <__aeabi_dsub>
 8003f06:	4642      	mov	r2, r8
 8003f08:	464b      	mov	r3, r9
 8003f0a:	f7fc fe2b 	bl	8000b64 <__aeabi_dcmpge>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	f43f aef0 	beq.w	8003cf4 <__ieee754_pow+0x794>
 8003f14:	e7e7      	b.n	8003ee6 <__ieee754_pow+0x986>
 8003f16:	f04f 0a00 	mov.w	sl, #0
 8003f1a:	e717      	b.n	8003d4c <__ieee754_pow+0x7ec>
 8003f1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f20:	4619      	mov	r1, r3
 8003f22:	e7d2      	b.n	8003eca <__ieee754_pow+0x96a>
 8003f24:	491a      	ldr	r1, [pc, #104]	; (8003f90 <__ieee754_pow+0xa30>)
 8003f26:	2000      	movs	r0, #0
 8003f28:	f7ff bb9e 	b.w	8003668 <__ieee754_pow+0x108>
 8003f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f30:	f7ff bb9a 	b.w	8003668 <__ieee754_pow+0x108>
 8003f34:	9000      	str	r0, [sp, #0]
 8003f36:	f7ff bb76 	b.w	8003626 <__ieee754_pow+0xc6>
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	f7ff bb60 	b.w	8003600 <__ieee754_pow+0xa0>
 8003f40:	00000000 	.word	0x00000000
 8003f44:	3fe62e43 	.word	0x3fe62e43
 8003f48:	fefa39ef 	.word	0xfefa39ef
 8003f4c:	3fe62e42 	.word	0x3fe62e42
 8003f50:	0ca86c39 	.word	0x0ca86c39
 8003f54:	be205c61 	.word	0xbe205c61
 8003f58:	72bea4d0 	.word	0x72bea4d0
 8003f5c:	3e663769 	.word	0x3e663769
 8003f60:	c5d26bf1 	.word	0xc5d26bf1
 8003f64:	3ebbbd41 	.word	0x3ebbbd41
 8003f68:	af25de2c 	.word	0xaf25de2c
 8003f6c:	3f11566a 	.word	0x3f11566a
 8003f70:	16bebd93 	.word	0x16bebd93
 8003f74:	3f66c16c 	.word	0x3f66c16c
 8003f78:	5555553e 	.word	0x5555553e
 8003f7c:	3fc55555 	.word	0x3fc55555
 8003f80:	c2f8f359 	.word	0xc2f8f359
 8003f84:	01a56e1f 	.word	0x01a56e1f
 8003f88:	3fe00000 	.word	0x3fe00000
 8003f8c:	000fffff 	.word	0x000fffff
 8003f90:	3ff00000 	.word	0x3ff00000
 8003f94:	4090cbff 	.word	0x4090cbff
 8003f98:	3f6f3400 	.word	0x3f6f3400
 8003f9c:	652b82fe 	.word	0x652b82fe
 8003fa0:	3c971547 	.word	0x3c971547

08003fa4 <__ieee754_sqrt>:
 8003fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa8:	ec55 4b10 	vmov	r4, r5, d0
 8003fac:	4e56      	ldr	r6, [pc, #344]	; (8004108 <__ieee754_sqrt+0x164>)
 8003fae:	43ae      	bics	r6, r5
 8003fb0:	ee10 0a10 	vmov	r0, s0
 8003fb4:	ee10 3a10 	vmov	r3, s0
 8003fb8:	4629      	mov	r1, r5
 8003fba:	462a      	mov	r2, r5
 8003fbc:	d110      	bne.n	8003fe0 <__ieee754_sqrt+0x3c>
 8003fbe:	ee10 2a10 	vmov	r2, s0
 8003fc2:	462b      	mov	r3, r5
 8003fc4:	f7fc fb48 	bl	8000658 <__aeabi_dmul>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4620      	mov	r0, r4
 8003fce:	4629      	mov	r1, r5
 8003fd0:	f7fc f98c 	bl	80002ec <__adddf3>
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	460d      	mov	r5, r1
 8003fd8:	ec45 4b10 	vmov	d0, r4, r5
 8003fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fe0:	2d00      	cmp	r5, #0
 8003fe2:	dc10      	bgt.n	8004006 <__ieee754_sqrt+0x62>
 8003fe4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003fe8:	4330      	orrs	r0, r6
 8003fea:	d0f5      	beq.n	8003fd8 <__ieee754_sqrt+0x34>
 8003fec:	b15d      	cbz	r5, 8004006 <__ieee754_sqrt+0x62>
 8003fee:	ee10 2a10 	vmov	r2, s0
 8003ff2:	462b      	mov	r3, r5
 8003ff4:	ee10 0a10 	vmov	r0, s0
 8003ff8:	f7fc f976 	bl	80002e8 <__aeabi_dsub>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	f7fc fc54 	bl	80008ac <__aeabi_ddiv>
 8004004:	e7e6      	b.n	8003fd4 <__ieee754_sqrt+0x30>
 8004006:	1509      	asrs	r1, r1, #20
 8004008:	d076      	beq.n	80040f8 <__ieee754_sqrt+0x154>
 800400a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800400e:	07ce      	lsls	r6, r1, #31
 8004010:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8004014:	bf5e      	ittt	pl
 8004016:	0fda      	lsrpl	r2, r3, #31
 8004018:	005b      	lslpl	r3, r3, #1
 800401a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800401e:	0fda      	lsrs	r2, r3, #31
 8004020:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8004024:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8004028:	2000      	movs	r0, #0
 800402a:	106d      	asrs	r5, r5, #1
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	f04f 0e16 	mov.w	lr, #22
 8004032:	4684      	mov	ip, r0
 8004034:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004038:	eb0c 0401 	add.w	r4, ip, r1
 800403c:	4294      	cmp	r4, r2
 800403e:	bfde      	ittt	le
 8004040:	1b12      	suble	r2, r2, r4
 8004042:	eb04 0c01 	addle.w	ip, r4, r1
 8004046:	1840      	addle	r0, r0, r1
 8004048:	0052      	lsls	r2, r2, #1
 800404a:	f1be 0e01 	subs.w	lr, lr, #1
 800404e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004052:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004056:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800405a:	d1ed      	bne.n	8004038 <__ieee754_sqrt+0x94>
 800405c:	4671      	mov	r1, lr
 800405e:	2720      	movs	r7, #32
 8004060:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004064:	4562      	cmp	r2, ip
 8004066:	eb04 060e 	add.w	r6, r4, lr
 800406a:	dc02      	bgt.n	8004072 <__ieee754_sqrt+0xce>
 800406c:	d113      	bne.n	8004096 <__ieee754_sqrt+0xf2>
 800406e:	429e      	cmp	r6, r3
 8004070:	d811      	bhi.n	8004096 <__ieee754_sqrt+0xf2>
 8004072:	2e00      	cmp	r6, #0
 8004074:	eb06 0e04 	add.w	lr, r6, r4
 8004078:	da43      	bge.n	8004102 <__ieee754_sqrt+0x15e>
 800407a:	f1be 0f00 	cmp.w	lr, #0
 800407e:	db40      	blt.n	8004102 <__ieee754_sqrt+0x15e>
 8004080:	f10c 0801 	add.w	r8, ip, #1
 8004084:	eba2 020c 	sub.w	r2, r2, ip
 8004088:	429e      	cmp	r6, r3
 800408a:	bf88      	it	hi
 800408c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004090:	1b9b      	subs	r3, r3, r6
 8004092:	4421      	add	r1, r4
 8004094:	46c4      	mov	ip, r8
 8004096:	0052      	lsls	r2, r2, #1
 8004098:	3f01      	subs	r7, #1
 800409a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800409e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80040a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80040a6:	d1dd      	bne.n	8004064 <__ieee754_sqrt+0xc0>
 80040a8:	4313      	orrs	r3, r2
 80040aa:	d006      	beq.n	80040ba <__ieee754_sqrt+0x116>
 80040ac:	1c4c      	adds	r4, r1, #1
 80040ae:	bf13      	iteet	ne
 80040b0:	3101      	addne	r1, #1
 80040b2:	3001      	addeq	r0, #1
 80040b4:	4639      	moveq	r1, r7
 80040b6:	f021 0101 	bicne.w	r1, r1, #1
 80040ba:	1043      	asrs	r3, r0, #1
 80040bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80040c0:	0849      	lsrs	r1, r1, #1
 80040c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80040c6:	07c2      	lsls	r2, r0, #31
 80040c8:	bf48      	it	mi
 80040ca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80040ce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80040d2:	460c      	mov	r4, r1
 80040d4:	463d      	mov	r5, r7
 80040d6:	e77f      	b.n	8003fd8 <__ieee754_sqrt+0x34>
 80040d8:	0ada      	lsrs	r2, r3, #11
 80040da:	3815      	subs	r0, #21
 80040dc:	055b      	lsls	r3, r3, #21
 80040de:	2a00      	cmp	r2, #0
 80040e0:	d0fa      	beq.n	80040d8 <__ieee754_sqrt+0x134>
 80040e2:	02d7      	lsls	r7, r2, #11
 80040e4:	d50a      	bpl.n	80040fc <__ieee754_sqrt+0x158>
 80040e6:	f1c1 0420 	rsb	r4, r1, #32
 80040ea:	fa23 f404 	lsr.w	r4, r3, r4
 80040ee:	1e4d      	subs	r5, r1, #1
 80040f0:	408b      	lsls	r3, r1
 80040f2:	4322      	orrs	r2, r4
 80040f4:	1b41      	subs	r1, r0, r5
 80040f6:	e788      	b.n	800400a <__ieee754_sqrt+0x66>
 80040f8:	4608      	mov	r0, r1
 80040fa:	e7f0      	b.n	80040de <__ieee754_sqrt+0x13a>
 80040fc:	0052      	lsls	r2, r2, #1
 80040fe:	3101      	adds	r1, #1
 8004100:	e7ef      	b.n	80040e2 <__ieee754_sqrt+0x13e>
 8004102:	46e0      	mov	r8, ip
 8004104:	e7be      	b.n	8004084 <__ieee754_sqrt+0xe0>
 8004106:	bf00      	nop
 8004108:	7ff00000 	.word	0x7ff00000

0800410c <__ieee754_sqrtf>:
 800410c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004110:	4770      	bx	lr

08004112 <fabs>:
 8004112:	ec51 0b10 	vmov	r0, r1, d0
 8004116:	ee10 2a10 	vmov	r2, s0
 800411a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800411e:	ec43 2b10 	vmov	d0, r2, r3
 8004122:	4770      	bx	lr

08004124 <finite>:
 8004124:	b082      	sub	sp, #8
 8004126:	ed8d 0b00 	vstr	d0, [sp]
 800412a:	9801      	ldr	r0, [sp, #4]
 800412c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004130:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004134:	0fc0      	lsrs	r0, r0, #31
 8004136:	b002      	add	sp, #8
 8004138:	4770      	bx	lr
 800413a:	0000      	movs	r0, r0
 800413c:	0000      	movs	r0, r0
	...

08004140 <nan>:
 8004140:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004148 <nan+0x8>
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	00000000 	.word	0x00000000
 800414c:	7ff80000 	.word	0x7ff80000

08004150 <rint>:
 8004150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004152:	ec51 0b10 	vmov	r0, r1, d0
 8004156:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800415a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800415e:	2e13      	cmp	r6, #19
 8004160:	ee10 4a10 	vmov	r4, s0
 8004164:	460b      	mov	r3, r1
 8004166:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800416a:	dc58      	bgt.n	800421e <rint+0xce>
 800416c:	2e00      	cmp	r6, #0
 800416e:	da2b      	bge.n	80041c8 <rint+0x78>
 8004170:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004174:	4302      	orrs	r2, r0
 8004176:	d023      	beq.n	80041c0 <rint+0x70>
 8004178:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800417c:	4302      	orrs	r2, r0
 800417e:	4254      	negs	r4, r2
 8004180:	4314      	orrs	r4, r2
 8004182:	0c4b      	lsrs	r3, r1, #17
 8004184:	0b24      	lsrs	r4, r4, #12
 8004186:	045b      	lsls	r3, r3, #17
 8004188:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800418c:	ea44 0103 	orr.w	r1, r4, r3
 8004190:	4b32      	ldr	r3, [pc, #200]	; (800425c <rint+0x10c>)
 8004192:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004196:	e9d3 6700 	ldrd	r6, r7, [r3]
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4630      	mov	r0, r6
 80041a0:	4639      	mov	r1, r7
 80041a2:	f7fc f8a3 	bl	80002ec <__adddf3>
 80041a6:	e9cd 0100 	strd	r0, r1, [sp]
 80041aa:	463b      	mov	r3, r7
 80041ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041b0:	4632      	mov	r2, r6
 80041b2:	f7fc f899 	bl	80002e8 <__aeabi_dsub>
 80041b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80041ba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80041be:	4639      	mov	r1, r7
 80041c0:	ec41 0b10 	vmov	d0, r0, r1
 80041c4:	b003      	add	sp, #12
 80041c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c8:	4a25      	ldr	r2, [pc, #148]	; (8004260 <rint+0x110>)
 80041ca:	4132      	asrs	r2, r6
 80041cc:	ea01 0702 	and.w	r7, r1, r2
 80041d0:	4307      	orrs	r7, r0
 80041d2:	d0f5      	beq.n	80041c0 <rint+0x70>
 80041d4:	0851      	lsrs	r1, r2, #1
 80041d6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80041da:	4314      	orrs	r4, r2
 80041dc:	d00c      	beq.n	80041f8 <rint+0xa8>
 80041de:	ea23 0201 	bic.w	r2, r3, r1
 80041e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80041e6:	2e13      	cmp	r6, #19
 80041e8:	fa43 f606 	asr.w	r6, r3, r6
 80041ec:	bf0c      	ite	eq
 80041ee:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80041f2:	2400      	movne	r4, #0
 80041f4:	ea42 0306 	orr.w	r3, r2, r6
 80041f8:	4918      	ldr	r1, [pc, #96]	; (800425c <rint+0x10c>)
 80041fa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80041fe:	4622      	mov	r2, r4
 8004200:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004204:	4620      	mov	r0, r4
 8004206:	4629      	mov	r1, r5
 8004208:	f7fc f870 	bl	80002ec <__adddf3>
 800420c:	e9cd 0100 	strd	r0, r1, [sp]
 8004210:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004214:	4622      	mov	r2, r4
 8004216:	462b      	mov	r3, r5
 8004218:	f7fc f866 	bl	80002e8 <__aeabi_dsub>
 800421c:	e7d0      	b.n	80041c0 <rint+0x70>
 800421e:	2e33      	cmp	r6, #51	; 0x33
 8004220:	dd07      	ble.n	8004232 <rint+0xe2>
 8004222:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004226:	d1cb      	bne.n	80041c0 <rint+0x70>
 8004228:	ee10 2a10 	vmov	r2, s0
 800422c:	f7fc f85e 	bl	80002ec <__adddf3>
 8004230:	e7c6      	b.n	80041c0 <rint+0x70>
 8004232:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8004236:	f04f 36ff 	mov.w	r6, #4294967295
 800423a:	40d6      	lsrs	r6, r2
 800423c:	4230      	tst	r0, r6
 800423e:	d0bf      	beq.n	80041c0 <rint+0x70>
 8004240:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8004244:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8004248:	bf1f      	itttt	ne
 800424a:	ea24 0101 	bicne.w	r1, r4, r1
 800424e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8004252:	fa44 f202 	asrne.w	r2, r4, r2
 8004256:	ea41 0402 	orrne.w	r4, r1, r2
 800425a:	e7cd      	b.n	80041f8 <rint+0xa8>
 800425c:	08004550 	.word	0x08004550
 8004260:	000fffff 	.word	0x000fffff
 8004264:	00000000 	.word	0x00000000

08004268 <scalbn>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	ec55 4b10 	vmov	r4, r5, d0
 800426e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004272:	4606      	mov	r6, r0
 8004274:	462b      	mov	r3, r5
 8004276:	b99a      	cbnz	r2, 80042a0 <scalbn+0x38>
 8004278:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800427c:	4323      	orrs	r3, r4
 800427e:	d036      	beq.n	80042ee <scalbn+0x86>
 8004280:	4b39      	ldr	r3, [pc, #228]	; (8004368 <scalbn+0x100>)
 8004282:	4629      	mov	r1, r5
 8004284:	ee10 0a10 	vmov	r0, s0
 8004288:	2200      	movs	r2, #0
 800428a:	f7fc f9e5 	bl	8000658 <__aeabi_dmul>
 800428e:	4b37      	ldr	r3, [pc, #220]	; (800436c <scalbn+0x104>)
 8004290:	429e      	cmp	r6, r3
 8004292:	4604      	mov	r4, r0
 8004294:	460d      	mov	r5, r1
 8004296:	da10      	bge.n	80042ba <scalbn+0x52>
 8004298:	a32b      	add	r3, pc, #172	; (adr r3, 8004348 <scalbn+0xe0>)
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	e03a      	b.n	8004316 <scalbn+0xae>
 80042a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80042a4:	428a      	cmp	r2, r1
 80042a6:	d10c      	bne.n	80042c2 <scalbn+0x5a>
 80042a8:	ee10 2a10 	vmov	r2, s0
 80042ac:	4620      	mov	r0, r4
 80042ae:	4629      	mov	r1, r5
 80042b0:	f7fc f81c 	bl	80002ec <__adddf3>
 80042b4:	4604      	mov	r4, r0
 80042b6:	460d      	mov	r5, r1
 80042b8:	e019      	b.n	80042ee <scalbn+0x86>
 80042ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80042be:	460b      	mov	r3, r1
 80042c0:	3a36      	subs	r2, #54	; 0x36
 80042c2:	4432      	add	r2, r6
 80042c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80042c8:	428a      	cmp	r2, r1
 80042ca:	dd08      	ble.n	80042de <scalbn+0x76>
 80042cc:	2d00      	cmp	r5, #0
 80042ce:	a120      	add	r1, pc, #128	; (adr r1, 8004350 <scalbn+0xe8>)
 80042d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042d4:	da1c      	bge.n	8004310 <scalbn+0xa8>
 80042d6:	a120      	add	r1, pc, #128	; (adr r1, 8004358 <scalbn+0xf0>)
 80042d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042dc:	e018      	b.n	8004310 <scalbn+0xa8>
 80042de:	2a00      	cmp	r2, #0
 80042e0:	dd08      	ble.n	80042f4 <scalbn+0x8c>
 80042e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80042e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80042ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80042ee:	ec45 4b10 	vmov	d0, r4, r5
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80042f8:	da19      	bge.n	800432e <scalbn+0xc6>
 80042fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80042fe:	429e      	cmp	r6, r3
 8004300:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004304:	dd0a      	ble.n	800431c <scalbn+0xb4>
 8004306:	a112      	add	r1, pc, #72	; (adr r1, 8004350 <scalbn+0xe8>)
 8004308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e2      	bne.n	80042d6 <scalbn+0x6e>
 8004310:	a30f      	add	r3, pc, #60	; (adr r3, 8004350 <scalbn+0xe8>)
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	f7fc f99f 	bl	8000658 <__aeabi_dmul>
 800431a:	e7cb      	b.n	80042b4 <scalbn+0x4c>
 800431c:	a10a      	add	r1, pc, #40	; (adr r1, 8004348 <scalbn+0xe0>)
 800431e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0b8      	beq.n	8004298 <scalbn+0x30>
 8004326:	a10e      	add	r1, pc, #56	; (adr r1, 8004360 <scalbn+0xf8>)
 8004328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800432c:	e7b4      	b.n	8004298 <scalbn+0x30>
 800432e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004332:	3236      	adds	r2, #54	; 0x36
 8004334:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004338:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800433c:	4620      	mov	r0, r4
 800433e:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <scalbn+0x108>)
 8004340:	2200      	movs	r2, #0
 8004342:	e7e8      	b.n	8004316 <scalbn+0xae>
 8004344:	f3af 8000 	nop.w
 8004348:	c2f8f359 	.word	0xc2f8f359
 800434c:	01a56e1f 	.word	0x01a56e1f
 8004350:	8800759c 	.word	0x8800759c
 8004354:	7e37e43c 	.word	0x7e37e43c
 8004358:	8800759c 	.word	0x8800759c
 800435c:	fe37e43c 	.word	0xfe37e43c
 8004360:	c2f8f359 	.word	0xc2f8f359
 8004364:	81a56e1f 	.word	0x81a56e1f
 8004368:	43500000 	.word	0x43500000
 800436c:	ffff3cb0 	.word	0xffff3cb0
 8004370:	3c900000 	.word	0x3c900000

08004374 <_init>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	bf00      	nop
 8004378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437a:	bc08      	pop	{r3}
 800437c:	469e      	mov	lr, r3
 800437e:	4770      	bx	lr

08004380 <_fini>:
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	bf00      	nop
 8004384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004386:	bc08      	pop	{r3}
 8004388:	469e      	mov	lr, r3
 800438a:	4770      	bx	lr
